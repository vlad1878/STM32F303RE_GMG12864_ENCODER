
f303_gmg12864_30.06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a348  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  0800a4e8  0800a4e8  0001a4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd4  0800afd4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800afd4  0800afd4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afd4  0800afd4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afd8  0800afd8  0001afd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800afdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000600  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007e4  200007e4  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001598e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a49  00000000  00000000  00035ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  000385f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f18  00000000  00000000  00039608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bf6  00000000  00000000  0003a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001538c  00000000  00000000  0005d116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce2c2  00000000  00000000  000724a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00140764  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005850  00000000  00000000  001407b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4d0 	.word	0x0800a4d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a4d0 	.word	0x0800a4d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <GMG12864_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Command - 8 бит данных.
	DC_set();
 8000d0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d16:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 8000d18:	1df9      	adds	r1, r7, #7
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <GMG12864_Send_command+0x40>)
 8000d22:	f003 fc04 	bl	800452e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d26:	bf00      	nop
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <GMG12864_Send_command+0x40>)
 8000d2a:	f003 fd6e 	bl	800480a <HAL_SPI_GetState>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d1f9      	bne.n	8000d28 <GMG12864_Send_command+0x24>
	DC_reset();
 8000d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d38:	2210      	movs	r2, #16
 8000d3a:	619a      	str	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000069c 	.word	0x2000069c

08000d48 <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 8000d52:	1df9      	adds	r1, r7, #7
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <GMG12864_Send_data+0x30>)
 8000d5c:	f003 fbe7 	bl	800452e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d60:	bf00      	nop
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <GMG12864_Send_data+0x30>)
 8000d64:	f003 fd51 	bl	800480a <HAL_SPI_GetState>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d1f9      	bne.n	8000d62 <GMG12864_Send_data+0x1a>
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000069c 	.word	0x2000069c

08000d7c <GMG12864_Clean_Frame_buffer>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void GMG12864_Clean_Frame_buffer(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 8000d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d84:	2100      	movs	r1, #0
 8000d86:	4802      	ldr	r0, [pc, #8]	; (8000d90 <GMG12864_Clean_Frame_buffer+0x14>)
 8000d88:	f004 ff74 	bl	8005c74 <memset>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000280 	.word	0x20000280

08000d94 <GMG12864_Init>:
/*------------------------Функция очистки буфера кадра-------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void GMG12864_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	cs_set();
 8000d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da0:	619a      	str	r2, [r3, #24]
	RST_set();
 8000da2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000daa:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000dac:	200a      	movs	r0, #10
 8000dae:	f001 fcb9 	bl	8002724 <HAL_Delay>
	RST_reset();
 8000db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000db6:	2202      	movs	r2, #2
 8000db8:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000dba:	200a      	movs	r0, #10
 8000dbc:	f001 fcb2 	bl	8002724 <HAL_Delay>
	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
	GMG12864_Send_command(0xA2);
 8000dc0:	20a2      	movs	r0, #162	; 0xa2
 8000dc2:	f7ff ff9f 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f001 fcac 	bl	8002724 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 8000dcc:	20a0      	movs	r0, #160	; 0xa0
 8000dce:	f7ff ff99 	bl	8000d04 <GMG12864_Send_command>
	GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 8000dd2:	20c8      	movs	r0, #200	; 0xc8
 8000dd4:	f7ff ff96 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f001 fca3 	bl	8002724 <HAL_Delay>
	// делитель внутреннего резистора установлен на 7 (от 0..7)
	GMG12864_Send_command(0x20 | 0x7);    //Regulator Resistor Selection
 8000dde:	2027      	movs	r0, #39	; 0x27
 8000de0:	f7ff ff90 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f001 fc9d 	bl	8002724 <HAL_Delay>
	// управление питанием, все внутренние блоки включены	(от 0..7)
	GMG12864_Send_command(0x28 | 0x7);
 8000dea:	202f      	movs	r0, #47	; 0x2f
 8000dec:	f7ff ff8a 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f001 fc97 	bl	8002724 <HAL_Delay>
	// войти в режим динамического контраста
	GMG12864_Send_command(0x81);    //Electronic Volume
 8000df6:	2081      	movs	r0, #129	; 0x81
 8000df8:	f7ff ff84 	bl	8000d04 <GMG12864_Send_command>
	GMG12864_Send_command(18);	// Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 8000dfc:	2012      	movs	r0, #18
 8000dfe:	f7ff ff81 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f001 fc8e 	bl	8002724 <HAL_Delay>
	GMG12864_Send_command(0x40);
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	f7ff ff7b 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f001 fc88 	bl	8002724 <HAL_Delay>
	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	GMG12864_Send_command(0xAF);    		//Display on
 8000e14:	20af      	movs	r0, #175	; 0xaf
 8000e16:	f7ff ff75 	bl	8000d04 <GMG12864_Send_command>
	// Инвертирование экрана
	GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 8000e1a:	20a6      	movs	r0, #166	; 0xa6
 8000e1c:	f7ff ff72 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f001 fc7f 	bl	8002724 <HAL_Delay>
	cs_reset();
 8000e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	619a      	str	r2, [r3, #24]
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	80bb      	strh	r3, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 8000e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4a:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <GMG12864_Draw_pixel+0xd8>)
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	da55      	bge.n	8000efe <GMG12864_Draw_pixel+0xca>
 8000e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db51      	blt.n	8000efe <GMG12864_Draw_pixel+0xca>
 8000e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e5e:	4a2c      	ldr	r2, [pc, #176]	; (8000f10 <GMG12864_Draw_pixel+0xdc>)
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	4293      	cmp	r3, r2
 8000e64:	da4b      	bge.n	8000efe <GMG12864_Draw_pixel+0xca>
 8000e66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db47      	blt.n	8000efe <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 8000e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da00      	bge.n	8000e78 <GMG12864_Draw_pixel+0x44>
 8000e76:	3307      	adds	r3, #7
 8000e78:	10db      	asrs	r3, r3, #3
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <GMG12864_Draw_pixel+0xd8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	fb12 f303 	smulbb	r3, r2, r3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	81fb      	strh	r3, [r7, #14]

		if (color) {
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d018      	beq.n	8000ec8 <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ea2:	4259      	negs	r1, r3
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	f001 0107 	and.w	r1, r1, #7
 8000eac:	bf58      	it	pl
 8000eae:	424b      	negpl	r3, r1
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	b2d1      	uxtb	r1, r2
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000ec4:	54d1      	strb	r1, [r2, r3]
 8000ec6:	e01b      	b.n	8000f00 <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed4:	4259      	negs	r1, r3
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	f001 0107 	and.w	r1, r1, #7
 8000ede:	bf58      	it	pl
 8000ee0:	424b      	negpl	r3, r1
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	b25a      	sxtb	r2, r3
 8000ef4:	89fb      	ldrh	r3, [r7, #14]
 8000ef6:	b2d1      	uxtb	r1, r2
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000efa:	54d1      	strb	r1, [r2, r3]
 8000efc:	e000      	b.n	8000f00 <GMG12864_Draw_pixel+0xcc>
		return;
 8000efe:	bf00      	nop
		}
	}

}
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000001 	.word	0x20000001
 8000f14:	20000280 	.word	0x20000280

08000f18 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	cs_set();
 8000f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f26:	619a      	str	r2, [r3, #24]
	for (uint8_t y = 0; y < 8; y++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e027      	b.n	8000f7e <GMG12864_Update+0x66>
		ST7565_SetX(0);
 8000f2e:	2010      	movs	r0, #16
 8000f30:	f7ff fee8 	bl	8000d04 <GMG12864_Send_command>
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fee5 	bl	8000d04 <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fed9 	bl	8000d04 <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	e00b      	b.n	8000f70 <GMG12864_Update+0x58>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <GMG12864_Update+0x7c>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff feef 	bl	8000d48 <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	71bb      	strb	r3, [r7, #6]
 8000f70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	daef      	bge.n	8000f58 <GMG12864_Update+0x40>
	for (uint8_t y = 0; y < 8; y++) {
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d9d4      	bls.n	8000f2e <GMG12864_Update+0x16>
		}
	}
	cs_reset();
 8000f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f88:	2201      	movs	r2, #1
 8000f8a:	619a      	str	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000280 	.word	0x20000280

08000f98 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3305      	adds	r3, #5
 8000fbe:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e086      	b.n	80010d4 <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d127      	bne.n	800101e <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73bb      	strb	r3, [r7, #14]
 8000fd2:	e020      	b.n	8001016 <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	b218      	sxth	r0, r3
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff ff20 	bl	8000e34 <GMG12864_Draw_pixel>
 8000ff4:	e00c      	b.n	8001010 <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	b218      	sxth	r0, r3
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	b21b      	sxth	r3, r3
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff ff12 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	3301      	adds	r3, #1
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	2b06      	cmp	r3, #6
 800101a:	d9db      	bls.n	8000fd4 <GMG12864_Print_symbol_5x7+0x3c>
 800101c:	e057      	b.n	80010ce <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800101e:	2300      	movs	r3, #0
 8001020:	737b      	strb	r3, [r7, #13]
 8001022:	e051      	b.n	80010c8 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	441a      	add	r2, r3
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	441a      	add	r2, r3
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <GMG12864_Print_symbol_5x7+0x150>)
 8001036:	5cd3      	ldrb	r3, [r2, r3]
 8001038:	461a      	mov	r2, r3
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	fa42 f303 	asr.w	r3, r2, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d01e      	beq.n	8001086 <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00d      	beq.n	800106a <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	b218      	sxth	r0, r3
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	b29a      	uxth	r2, r3
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	b29b      	uxth	r3, r3
 800105a:	4413      	add	r3, r2
 800105c:	b29b      	uxth	r3, r3
 800105e:	b21b      	sxth	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fee6 	bl	8000e34 <GMG12864_Draw_pixel>
 8001068:	e02b      	b.n	80010c2 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	b218      	sxth	r0, r3
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	b29a      	uxth	r2, r3
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	b21b      	sxth	r3, r3
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fed8 	bl	8000e34 <GMG12864_Draw_pixel>
 8001084:	e01d      	b.n	80010c2 <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00d      	beq.n	80010a8 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b218      	sxth	r0, r3
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	b29a      	uxth	r2, r3
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21b      	sxth	r3, r3
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fec7 	bl	8000e34 <GMG12864_Draw_pixel>
 80010a6:	e00c      	b.n	80010c2 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	b218      	sxth	r0, r3
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff feb9 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	3301      	adds	r3, #1
 80010c6:	737b      	strb	r3, [r7, #13]
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d9aa      	bls.n	8001024 <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f67f af74 	bls.w	8000fc6 <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	0800a7bc 	.word	0x0800a7bc

080010ec <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	4603      	mov	r3, r0
 8001100:	71bb      	strb	r3, [r7, #6]
 8001102:	460b      	mov	r3, r1
 8001104:	80bb      	strh	r3, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	3303      	adds	r3, #3
 8001112:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8001114:	7b3b      	ldrb	r3, [r7, #12]
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e086      	b.n	8001228 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	429a      	cmp	r2, r3
 8001120:	d127      	bne.n	8001172 <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001122:	2300      	movs	r3, #0
 8001124:	73bb      	strb	r3, [r7, #14]
 8001126:	e020      	b.n	800116a <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00d      	beq.n	800114a <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b218      	sxth	r0, r3
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	b21b      	sxth	r3, r3
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fe76 	bl	8000e34 <GMG12864_Draw_pixel>
 8001148:	e00c      	b.n	8001164 <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	b218      	sxth	r0, r3
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	b29a      	uxth	r2, r3
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fe68 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	3301      	adds	r3, #1
 8001168:	73bb      	strb	r3, [r7, #14]
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d9db      	bls.n	8001128 <GMG12864_Print_symbol_3x5+0x3c>
 8001170:	e057      	b.n	8001222 <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001172:	2300      	movs	r3, #0
 8001174:	737b      	strb	r3, [r7, #13]
 8001176:	e051      	b.n	800121c <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 8001178:	88ba      	ldrh	r2, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	441a      	add	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	441a      	add	r2, r3
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	4a2c      	ldr	r2, [pc, #176]	; (800123c <GMG12864_Print_symbol_3x5+0x150>)
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	461a      	mov	r2, r3
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	fa42 f303 	asr.w	r3, r2, r3
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01e      	beq.n	80011da <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00d      	beq.n	80011be <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	b218      	sxth	r0, r3
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fe3c 	bl	8000e34 <GMG12864_Draw_pixel>
 80011bc:	e02b      	b.n	8001216 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	b218      	sxth	r0, r3
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fe2e 	bl	8000e34 <GMG12864_Draw_pixel>
 80011d8:	e01d      	b.n	8001216 <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00d      	beq.n	80011fc <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b218      	sxth	r0, r3
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fe1d 	bl	8000e34 <GMG12864_Draw_pixel>
 80011fa:	e00c      	b.n	8001216 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	b218      	sxth	r0, r3
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	b29a      	uxth	r2, r3
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	b21b      	sxth	r3, r3
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fe0f 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	3301      	adds	r3, #1
 800121a:	737b      	strb	r3, [r7, #13]
 800121c:	7b7b      	ldrb	r3, [r7, #13]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d9aa      	bls.n	8001178 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	3301      	adds	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	429a      	cmp	r2, r3
 800122e:	f67f af74 	bls.w	800111a <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	0800a5d4 	.word	0x0800a5d4

08001240 <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	4604      	mov	r4, r0
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	4603      	mov	r3, r0
 8001254:	71bb      	strb	r3, [r7, #6]
 8001256:	460b      	mov	r3, r1
 8001258:	717b      	strb	r3, [r7, #5]
 800125a:	4613      	mov	r3, r2
 800125c:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	e17e      	b.n	800156a <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2bbf      	cmp	r3, #191	; 0xbf
 8001276:	d841      	bhi.n	80012fc <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]
 8001282:	e16f      	b.n	8001564 <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	81fb      	strh	r3, [r7, #14]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d117      	bne.n	80012c4 <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 8001294:	793b      	ldrb	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	3b20      	subs	r3, #32
 800129e:	b29a      	uxth	r2, r3
 80012a0:	79b9      	ldrb	r1, [r7, #6]
 80012a2:	79f8      	ldrb	r0, [r7, #7]
 80012a4:	2301      	movs	r3, #1
 80012a6:	f7ff ff21 	bl	80010ec <GMG12864_Print_symbol_3x5>
 80012aa:	e007      	b.n	80012bc <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	3b20      	subs	r3, #32
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	79b9      	ldrb	r1, [r7, #6]
 80012b4:	79f8      	ldrb	r0, [r7, #7]
 80012b6:	2300      	movs	r3, #0
 80012b8:	f7ff ff18 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3304      	adds	r3, #4
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e14f      	b.n	8001564 <GMG12864_Decode_UTF8+0x324>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	f040 814c 	bne.w	8001564 <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	3b20      	subs	r3, #32
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	79b9      	ldrb	r1, [r7, #6]
 80012da:	79f8      	ldrb	r0, [r7, #7]
 80012dc:	2301      	movs	r3, #1
 80012de:	f7ff fe5b 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 80012e2:	e007      	b.n	80012f4 <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	3b20      	subs	r3, #32
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	79b9      	ldrb	r1, [r7, #6]
 80012ec:	79f8      	ldrb	r0, [r7, #7]
 80012ee:	2300      	movs	r3, #0
 80012f0:	f7ff fe52 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	3306      	adds	r3, #6
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	e133      	b.n	8001564 <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	3301      	adds	r3, #1
 800130c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800130e:	440b      	add	r3, r1
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8001320:	4293      	cmp	r3, r2
 8001322:	d843      	bhi.n	80013ac <GMG12864_Decode_UTF8+0x16c>
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	f24d 0281 	movw	r2, #53377	; 0xd081
 800132a:	4293      	cmp	r3, r2
 800132c:	d93e      	bls.n	80013ac <GMG12864_Decode_UTF8+0x16c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800132e:	797b      	ldrb	r3, [r7, #5]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001340:	330f      	adds	r3, #15
 8001342:	b29a      	uxth	r2, r3
 8001344:	79b9      	ldrb	r1, [r7, #6]
 8001346:	79f8      	ldrb	r0, [r7, #7]
 8001348:	2301      	movs	r3, #1
 800134a:	f7ff fecf 	bl	80010ec <GMG12864_Print_symbol_3x5>
 800134e:	e009      	b.n	8001364 <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001356:	330f      	adds	r3, #15
 8001358:	b29a      	uxth	r2, r3
 800135a:	79b9      	ldrb	r1, [r7, #6]
 800135c:	79f8      	ldrb	r0, [r7, #7]
 800135e:	2300      	movs	r3, #0
 8001360:	f7ff fec4 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	3304      	adds	r3, #4
 8001368:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800136a:	e0f8      	b.n	800155e <GMG12864_Decode_UTF8+0x31e>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2b01      	cmp	r3, #1
 8001370:	f040 80f5 	bne.w	800155e <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001380:	330f      	adds	r3, #15
 8001382:	b29a      	uxth	r2, r3
 8001384:	79b9      	ldrb	r1, [r7, #6]
 8001386:	79f8      	ldrb	r0, [r7, #7]
 8001388:	2301      	movs	r3, #1
 800138a:	f7ff fe05 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 800138e:	e009      	b.n	80013a4 <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8001390:	89fb      	ldrh	r3, [r7, #14]
 8001392:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001396:	330f      	adds	r3, #15
 8001398:	b29a      	uxth	r2, r3
 800139a:	79b9      	ldrb	r1, [r7, #6]
 800139c:	79f8      	ldrb	r0, [r7, #7]
 800139e:	2300      	movs	r3, #0
 80013a0:	f7ff fdfa 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	3306      	adds	r3, #6
 80013a8:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80013aa:	e0d8      	b.n	800155e <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	f24d 0281 	movw	r2, #53377	; 0xd081
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12e      	bne.n	8001414 <GMG12864_Decode_UTF8+0x1d4>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d113      	bne.n	80013e4 <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 80013bc:	793b      	ldrb	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80013c2:	79b9      	ldrb	r1, [r7, #6]
 80013c4:	79f8      	ldrb	r0, [r7, #7]
 80013c6:	2301      	movs	r3, #1
 80013c8:	229f      	movs	r2, #159	; 0x9f
 80013ca:	f7ff fe8f 	bl	80010ec <GMG12864_Print_symbol_3x5>
 80013ce:	e005      	b.n	80013dc <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 80013d0:	79b9      	ldrb	r1, [r7, #6]
 80013d2:	79f8      	ldrb	r0, [r7, #7]
 80013d4:	2300      	movs	r3, #0
 80013d6:	229f      	movs	r2, #159	; 0x9f
 80013d8:	f7ff fe88 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3304      	adds	r3, #4
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e0bd      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80013e4:	797b      	ldrb	r3, [r7, #5]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	f040 80ba 	bne.w	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80013ec:	793b      	ldrb	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80013f2:	79b9      	ldrb	r1, [r7, #6]
 80013f4:	79f8      	ldrb	r0, [r7, #7]
 80013f6:	2301      	movs	r3, #1
 80013f8:	229f      	movs	r2, #159	; 0x9f
 80013fa:	f7ff fdcd 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 80013fe:	e005      	b.n	800140c <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8001400:	79b9      	ldrb	r1, [r7, #6]
 8001402:	79f8      	ldrb	r0, [r7, #7]
 8001404:	2300      	movs	r3, #0
 8001406:	229f      	movs	r2, #159	; 0x9f
 8001408:	f7ff fdc6 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3306      	adds	r3, #6
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e0a5      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	f24d 1291 	movw	r2, #53649	; 0xd191
 800141a:	4293      	cmp	r3, r2
 800141c:	d12e      	bne.n	800147c <GMG12864_Decode_UTF8+0x23c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d113      	bne.n	800144c <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 8001424:	793b      	ldrb	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 800142a:	79b9      	ldrb	r1, [r7, #6]
 800142c:	79f8      	ldrb	r0, [r7, #7]
 800142e:	2301      	movs	r3, #1
 8001430:	22a0      	movs	r2, #160	; 0xa0
 8001432:	f7ff fe5b 	bl	80010ec <GMG12864_Print_symbol_3x5>
 8001436:	e005      	b.n	8001444 <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001438:	79b9      	ldrb	r1, [r7, #6]
 800143a:	79f8      	ldrb	r0, [r7, #7]
 800143c:	2300      	movs	r3, #0
 800143e:	22a0      	movs	r2, #160	; 0xa0
 8001440:	f7ff fe54 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3304      	adds	r3, #4
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e089      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 800144c:	797b      	ldrb	r3, [r7, #5]
 800144e:	2b01      	cmp	r3, #1
 8001450:	f040 8086 	bne.w	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8001454:	793b      	ldrb	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 800145a:	79b9      	ldrb	r1, [r7, #6]
 800145c:	79f8      	ldrb	r0, [r7, #7]
 800145e:	2301      	movs	r3, #1
 8001460:	22a0      	movs	r2, #160	; 0xa0
 8001462:	f7ff fd99 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 8001466:	e005      	b.n	8001474 <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001468:	79b9      	ldrb	r1, [r7, #6]
 800146a:	79f8      	ldrb	r0, [r7, #7]
 800146c:	2300      	movs	r3, #0
 800146e:	22a0      	movs	r2, #160	; 0xa0
 8001470:	f7ff fd92 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	3306      	adds	r3, #6
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	e071      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 8001482:	4293      	cmp	r3, r2
 8001484:	d12d      	bne.n	80014e2 <GMG12864_Decode_UTF8+0x2a2>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001486:	797b      	ldrb	r3, [r7, #5]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d113      	bne.n	80014b4 <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 800148c:	793b      	ldrb	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001492:	79b9      	ldrb	r1, [r7, #6]
 8001494:	79f8      	ldrb	r0, [r7, #7]
 8001496:	2301      	movs	r3, #1
 8001498:	22a1      	movs	r2, #161	; 0xa1
 800149a:	f7ff fe27 	bl	80010ec <GMG12864_Print_symbol_3x5>
 800149e:	e005      	b.n	80014ac <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80014a0:	79b9      	ldrb	r1, [r7, #6]
 80014a2:	79f8      	ldrb	r0, [r7, #7]
 80014a4:	2300      	movs	r3, #0
 80014a6:	22a1      	movs	r2, #161	; 0xa1
 80014a8:	f7ff fe20 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	3304      	adds	r3, #4
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e055      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80014b4:	797b      	ldrb	r3, [r7, #5]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d152      	bne.n	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80014ba:	793b      	ldrb	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 80014c0:	79b9      	ldrb	r1, [r7, #6]
 80014c2:	79f8      	ldrb	r0, [r7, #7]
 80014c4:	2301      	movs	r3, #1
 80014c6:	22a1      	movs	r2, #161	; 0xa1
 80014c8:	f7ff fd66 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 80014cc:	e005      	b.n	80014da <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80014ce:	79b9      	ldrb	r1, [r7, #6]
 80014d0:	79f8      	ldrb	r0, [r7, #7]
 80014d2:	2300      	movs	r3, #0
 80014d4:	22a1      	movs	r2, #161	; 0xa1
 80014d6:	f7ff fd5f 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3306      	adds	r3, #6
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	e03e      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80014e2:	797b      	ldrb	r3, [r7, #5]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11b      	bne.n	8001520 <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 80014e8:	793b      	ldrb	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80014f4:	330f      	adds	r3, #15
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	79b9      	ldrb	r1, [r7, #6]
 80014fa:	79f8      	ldrb	r0, [r7, #7]
 80014fc:	2301      	movs	r3, #1
 80014fe:	f7ff fdf5 	bl	80010ec <GMG12864_Print_symbol_3x5>
 8001502:	e009      	b.n	8001518 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800150a:	330f      	adds	r3, #15
 800150c:	b29a      	uxth	r2, r3
 800150e:	79b9      	ldrb	r1, [r7, #6]
 8001510:	79f8      	ldrb	r0, [r7, #7]
 8001512:	2300      	movs	r3, #0
 8001514:	f7ff fdea 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3304      	adds	r3, #4
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e01f      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001520:	797b      	ldrb	r3, [r7, #5]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d11c      	bne.n	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8001526:	793b      	ldrb	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00a      	beq.n	8001542 <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800152c:	89fb      	ldrh	r3, [r7, #14]
 800152e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001532:	330f      	adds	r3, #15
 8001534:	b29a      	uxth	r2, r3
 8001536:	79b9      	ldrb	r1, [r7, #6]
 8001538:	79f8      	ldrb	r0, [r7, #7]
 800153a:	2301      	movs	r3, #1
 800153c:	f7ff fd2c 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 8001540:	e009      	b.n	8001556 <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001548:	330f      	adds	r3, #15
 800154a:	b29a      	uxth	r2, r3
 800154c:	79b9      	ldrb	r1, [r7, #6]
 800154e:	79f8      	ldrb	r0, [r7, #7]
 8001550:	2300      	movs	r3, #0
 8001552:	f7ff fd21 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3306      	adds	r3, #6
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	e000      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800155e:	bf00      	nop
				}
			}
			flag_block = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	3301      	adds	r3, #1
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	f63f ae79 	bhi.w	800126c <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <MX_GPIO_Init+0x160>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	4a3f      	ldr	r2, [pc, #252]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6153      	str	r3, [r2, #20]
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vref_3_3_GPIO_Port, Vref_3_3_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	483a      	ldr	r0, [pc, #232]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001600:	f001 fb50 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin|user_led_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2133      	movs	r1, #51	; 0x33
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f001 fb4a 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8001610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001616:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4830      	ldr	r0, [pc, #192]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001628:	f001 f9b2 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 800162c:	2303      	movs	r3, #3
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001630:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4829      	ldr	r0, [pc, #164]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001642:	f001 f9a5 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001646:	2304      	movs	r3, #4
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800164a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001650:	2301      	movs	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4823      	ldr	r0, [pc, #140]	; (80016e8 <MX_GPIO_Init+0x164>)
 800165c:	f001 f998 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Vref_3_3_Pin;
 8001660:	2308      	movs	r3, #8
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Vref_3_3_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001678:	f001 f98a 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin|user_led_Pin;
 800167c:	2333      	movs	r3, #51	; 0x33
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f001 f97b 	bl	8002990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2006      	movs	r0, #6
 80016a0:	f001 f93f 	bl	8002922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016a4:	2006      	movs	r0, #6
 80016a6:	f001 f958 	bl	800295a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2007      	movs	r0, #7
 80016b0:	f001 f937 	bl	8002922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016b4:	2007      	movs	r0, #7
 80016b6:	f001 f950 	bl	800295a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2008      	movs	r0, #8
 80016c0:	f001 f92f 	bl	8002922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80016c4:	2008      	movs	r0, #8
 80016c6:	f001 f948 	bl	800295a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2028      	movs	r0, #40	; 0x28
 80016d0:	f001 f927 	bl	8002922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d4:	2028      	movs	r0, #40	; 0x28
 80016d6:	f001 f940 	bl	800295a <HAL_NVIC_EnableIRQ>

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f2:	f000 ffb1 	bl	8002658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f6:	f000 f989 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fa:	f7ff ff43 	bl	8001584 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016fe:	f000 fca5 	bl	800204c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001702:	f000 ff0d 	bl	8002520 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001706:	f000 fe95 	bl	8002434 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800170a:	2064      	movs	r0, #100	; 0x64
 800170c:	f001 f80a 	bl	8002724 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim4);
 8001710:	48ad      	ldr	r0, [pc, #692]	; (80019c8 <main+0x2dc>)
 8001712:	f003 fa45 	bl	8004ba0 <HAL_TIM_Base_Start_IT>
  t_led = HAL_GetTick();
 8001716:	f000 fff9 	bl	800270c <HAL_GetTick>
 800171a:	4603      	mov	r3, r0
 800171c:	4aab      	ldr	r2, [pc, #684]	; (80019cc <main+0x2e0>)
 800171e:	6013      	str	r3, [r2, #0]
  GMG12864_Init();
 8001720:	f7ff fb38 	bl	8000d94 <GMG12864_Init>
  GPIOC -> BSRR = GPIO_PIN_3;
 8001724:	4baa      	ldr	r3, [pc, #680]	; (80019d0 <main+0x2e4>)
 8001726:	2208      	movs	r2, #8
 8001728:	619a      	str	r2, [r3, #24]
  sprintf(tx_buffer, "Hello world");
 800172a:	49aa      	ldr	r1, [pc, #680]	; (80019d4 <main+0x2e8>)
 800172c:	48aa      	ldr	r0, [pc, #680]	; (80019d8 <main+0x2ec>)
 800172e:	f005 f929 	bl	8006984 <siprintf>
  GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 8001732:	4ba9      	ldr	r3, [pc, #676]	; (80019d8 <main+0x2ec>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	2201      	movs	r2, #1
 800173a:	2100      	movs	r1, #0
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fd7f 	bl	8001240 <GMG12864_Decode_UTF8>
  GMG12864_Update();
 8001742:	f7ff fbe9 	bl	8000f18 <GMG12864_Update>
  GMG12864_Clean_Frame_buffer();
 8001746:	f7ff fb19 	bl	8000d7c <GMG12864_Clean_Frame_buffer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(stage_menu == 0)
 800174a:	4ba4      	ldr	r3, [pc, #656]	; (80019dc <main+0x2f0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d010      	beq.n	800177a <main+0x8e>
	  {
		  upd_disp();
 8001758:	f000 fc62 	bl	8002020 <upd_disp>
		  print_first_line();
 800175c:	f000 fbb4 	bl	8001ec8 <print_first_line>
		  print_second_line();
 8001760:	f000 fbca 	bl	8001ef8 <print_second_line>
		  print_third_line();
 8001764:	f000 fbe0 	bl	8001f28 <print_third_line>
		  print_fourth_line();
 8001768:	f000 fbf6 	bl	8001f58 <print_fourth_line>
		  print_fifth_line();
 800176c:	f000 fc0c 	bl	8001f88 <print_fifth_line>
		  print_sixth_line();
 8001770:	f000 fc22 	bl	8001fb8 <print_sixth_line>
		  pointer_write();
 8001774:	f000 fc38 	bl	8001fe8 <pointer_write>
 8001778:	e0f6      	b.n	8001968 <main+0x27c>
	  }
	  else if(stage_menu)
 800177a:	4b98      	ldr	r3, [pc, #608]	; (80019dc <main+0x2f0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80ef 	beq.w	8001962 <main+0x276>
	  {
		  switch(number_str)
 8001784:	4b96      	ldr	r3, [pc, #600]	; (80019e0 <main+0x2f4>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b32      	cmp	r3, #50	; 0x32
 800178a:	f300 80ed 	bgt.w	8001968 <main+0x27c>
 800178e:	2b14      	cmp	r3, #20
 8001790:	da04      	bge.n	800179c <main+0xb0>
 8001792:	2b00      	cmp	r3, #0
 8001794:	d048      	beq.n	8001828 <main+0x13c>
 8001796:	2b0a      	cmp	r3, #10
 8001798:	d06d      	beq.n	8001876 <main+0x18a>
 800179a:	e0e5      	b.n	8001968 <main+0x27c>
 800179c:	3b14      	subs	r3, #20
 800179e:	2b1e      	cmp	r3, #30
 80017a0:	f200 80e2 	bhi.w	8001968 <main+0x27c>
 80017a4:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <main+0xc0>)
 80017a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017aa:	bf00      	nop
 80017ac:	080018db 	.word	0x080018db
 80017b0:	08001969 	.word	0x08001969
 80017b4:	08001969 	.word	0x08001969
 80017b8:	08001969 	.word	0x08001969
 80017bc:	08001969 	.word	0x08001969
 80017c0:	08001969 	.word	0x08001969
 80017c4:	08001969 	.word	0x08001969
 80017c8:	08001969 	.word	0x08001969
 80017cc:	08001969 	.word	0x08001969
 80017d0:	08001969 	.word	0x08001969
 80017d4:	080018fd 	.word	0x080018fd
 80017d8:	08001969 	.word	0x08001969
 80017dc:	08001969 	.word	0x08001969
 80017e0:	08001969 	.word	0x08001969
 80017e4:	08001969 	.word	0x08001969
 80017e8:	08001969 	.word	0x08001969
 80017ec:	08001969 	.word	0x08001969
 80017f0:	08001969 	.word	0x08001969
 80017f4:	08001969 	.word	0x08001969
 80017f8:	08001969 	.word	0x08001969
 80017fc:	0800191f 	.word	0x0800191f
 8001800:	08001969 	.word	0x08001969
 8001804:	08001969 	.word	0x08001969
 8001808:	08001969 	.word	0x08001969
 800180c:	08001969 	.word	0x08001969
 8001810:	08001969 	.word	0x08001969
 8001814:	08001969 	.word	0x08001969
 8001818:	08001969 	.word	0x08001969
 800181c:	08001969 	.word	0x08001969
 8001820:	08001969 	.word	0x08001969
 8001824:	08001941 	.word	0x08001941
		  {
		  case 0:
				GMG12864_Clean_Frame_buffer();
 8001828:	f7ff faa8 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				if (!flag_led)
 800182c:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <main+0x2f8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00e      	beq.n	8001858 <main+0x16c>
				{
					sprintf(tx_buffer, "User led is on");
 800183a:	496b      	ldr	r1, [pc, #428]	; (80019e8 <main+0x2fc>)
 800183c:	4866      	ldr	r0, [pc, #408]	; (80019d8 <main+0x2ec>)
 800183e:	f005 f8a1 	bl	8006984 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 8001842:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <main+0x2ec>)
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	2201      	movs	r2, #1
 800184a:	2100      	movs	r1, #0
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fcf7 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 8001852:	f7ff fb61 	bl	8000f18 <GMG12864_Update>
				{
					sprintf(tx_buffer, "User led is off");
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
					GMG12864_Update();
				}
				break;
 8001856:	e087      	b.n	8001968 <main+0x27c>
					sprintf(tx_buffer, "User led is off");
 8001858:	4964      	ldr	r1, [pc, #400]	; (80019ec <main+0x300>)
 800185a:	485f      	ldr	r0, [pc, #380]	; (80019d8 <main+0x2ec>)
 800185c:	f005 f892 	bl	8006984 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 8001860:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <main+0x2ec>)
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2300      	movs	r3, #0
 8001866:	2201      	movs	r2, #1
 8001868:	2100      	movs	r1, #0
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fce8 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 8001870:	f7ff fb52 	bl	8000f18 <GMG12864_Update>
				break;
 8001874:	e078      	b.n	8001968 <main+0x27c>
		  case 10:
				if(tim4_flag == 0)
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <main+0x304>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d012      	beq.n	80018aa <main+0x1be>
				{
					GMG12864_Clean_Frame_buffer();
 8001884:	f7ff fa7a 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
					sprintf(tx_buffer, "tim4_counter is %d", tim4_counter);
 8001888:	4b5a      	ldr	r3, [pc, #360]	; (80019f4 <main+0x308>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	495a      	ldr	r1, [pc, #360]	; (80019f8 <main+0x30c>)
 8001890:	4851      	ldr	r0, [pc, #324]	; (80019d8 <main+0x2ec>)
 8001892:	f005 f877 	bl	8006984 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <main+0x2ec>)
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2300      	movs	r3, #0
 800189c:	2201      	movs	r2, #1
 800189e:	2100      	movs	r1, #0
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fccd 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 80018a6:	f7ff fb37 	bl	8000f18 <GMG12864_Update>
				}
				if(tim4_counter >= 252)
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <main+0x308>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2bfb      	cmp	r3, #251	; 0xfb
 80018b0:	d959      	bls.n	8001966 <main+0x27a>
				{
					tim4_flag = 1;
 80018b2:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <main+0x304>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
					GMG12864_Clean_Frame_buffer();
 80018b8:	f7ff fa60 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
					sprintf(tx_buffer, "Olichka the best!!!");
 80018bc:	494f      	ldr	r1, [pc, #316]	; (80019fc <main+0x310>)
 80018be:	4846      	ldr	r0, [pc, #280]	; (80019d8 <main+0x2ec>)
 80018c0:	f005 f860 	bl	8006984 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 80018c4:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <main+0x2ec>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2300      	movs	r3, #0
 80018ca:	2201      	movs	r2, #1
 80018cc:	2100      	movs	r1, #0
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fcb6 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 80018d4:	f7ff fb20 	bl	8000f18 <GMG12864_Update>
				}
				break;
 80018d8:	e045      	b.n	8001966 <main+0x27a>
		  case 20:
				GMG12864_Clean_Frame_buffer();
 80018da:	f7ff fa4f 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "Parameters third str");
 80018de:	4948      	ldr	r1, [pc, #288]	; (8001a00 <main+0x314>)
 80018e0:	483d      	ldr	r0, [pc, #244]	; (80019d8 <main+0x2ec>)
 80018e2:	f005 f84f 	bl	8006984 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <main+0x2ec>)
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	2201      	movs	r2, #1
 80018ee:	2100      	movs	r1, #0
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fca5 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 80018f6:	f7ff fb0f 	bl	8000f18 <GMG12864_Update>
				break;
 80018fa:	e035      	b.n	8001968 <main+0x27c>
		  case 30:
				GMG12864_Clean_Frame_buffer();
 80018fc:	f7ff fa3e 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "Parameters fourth str");
 8001900:	4940      	ldr	r1, [pc, #256]	; (8001a04 <main+0x318>)
 8001902:	4835      	ldr	r0, [pc, #212]	; (80019d8 <main+0x2ec>)
 8001904:	f005 f83e 	bl	8006984 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <main+0x2ec>)
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2300      	movs	r3, #0
 800190e:	2201      	movs	r2, #1
 8001910:	2100      	movs	r1, #0
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fc94 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 8001918:	f7ff fafe 	bl	8000f18 <GMG12864_Update>
				break;
 800191c:	e024      	b.n	8001968 <main+0x27c>
		  case 40:
				GMG12864_Clean_Frame_buffer();
 800191e:	f7ff fa2d 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "Parameters first str");
 8001922:	4939      	ldr	r1, [pc, #228]	; (8001a08 <main+0x31c>)
 8001924:	482c      	ldr	r0, [pc, #176]	; (80019d8 <main+0x2ec>)
 8001926:	f005 f82d 	bl	8006984 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <main+0x2ec>)
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	2201      	movs	r2, #1
 8001932:	2100      	movs	r1, #0
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fc83 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 800193a:	f7ff faed 	bl	8000f18 <GMG12864_Update>
				break;
 800193e:	e013      	b.n	8001968 <main+0x27c>
		  case 50:
				GMG12864_Clean_Frame_buffer();
 8001940:	f7ff fa1c 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "Parameters first str");
 8001944:	4930      	ldr	r1, [pc, #192]	; (8001a08 <main+0x31c>)
 8001946:	4824      	ldr	r0, [pc, #144]	; (80019d8 <main+0x2ec>)
 8001948:	f005 f81c 	bl	8006984 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <main+0x2ec>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2300      	movs	r3, #0
 8001952:	2201      	movs	r2, #1
 8001954:	2100      	movs	r1, #0
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fc72 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 800195c:	f7ff fadc 	bl	8000f18 <GMG12864_Update>
				break;
 8001960:	e002      	b.n	8001968 <main+0x27c>
		  }
	  }
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <main+0x27c>
				break;
 8001966:	bf00      	nop
	  }
	  else
	  {
		  GPIOA -> BSRR = (uint32_t)user_led_Pin << 16;
	  }*/
	  if(HAL_GetTick() - t_led > 1000)
 8001968:	f000 fed0 	bl	800270c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <main+0x2e0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001978:	f67f aee7 	bls.w	800174a <main+0x5e>
	  {
		  t_led = HAL_GetTick();
 800197c:	f000 fec6 	bl	800270c <HAL_GetTick>
 8001980:	4603      	mov	r3, r0
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <main+0x2e0>)
 8001984:	6013      	str	r3, [r2, #0]
		  flag_led = !flag_led;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <main+0x2f8>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <main+0x2f8>)
 80019a2:	701a      	strb	r2, [r3, #0]
		  if(!flag_led)
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <main+0x2f8>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f083 0301 	eor.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <main+0x2d0>
		  {
			  GPIOA -> BSRR = user_led_Pin;
 80019b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019b6:	2220      	movs	r2, #32
 80019b8:	619a      	str	r2, [r3, #24]
 80019ba:	e6c6      	b.n	800174a <main+0x5e>
		  }
		  else
		  {
			  GPIOA -> BSRR = (uint32_t)user_led_Pin << 16;
 80019bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019c4:	619a      	str	r2, [r3, #24]
	  if(stage_menu == 0)
 80019c6:	e6c0      	b.n	800174a <main+0x5e>
 80019c8:	20000700 	.word	0x20000700
 80019cc:	20000684 	.word	0x20000684
 80019d0:	48000800 	.word	0x48000800
 80019d4:	0800a4e8 	.word	0x0800a4e8
 80019d8:	20000200 	.word	0x20000200
 80019dc:	20000683 	.word	0x20000683
 80019e0:	20000682 	.word	0x20000682
 80019e4:	20000681 	.word	0x20000681
 80019e8:	0800a4f4 	.word	0x0800a4f4
 80019ec:	0800a504 	.word	0x0800a504
 80019f0:	20000689 	.word	0x20000689
 80019f4:	20000688 	.word	0x20000688
 80019f8:	0800a514 	.word	0x0800a514
 80019fc:	0800a528 	.word	0x0800a528
 8001a00:	0800a53c 	.word	0x0800a53c
 8001a04:	0800a554 	.word	0x0800a554
 8001a08:	0800a56c 	.word	0x0800a56c

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b0a6      	sub	sp, #152	; 0x98
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f92a 	bl	8005c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2258      	movs	r2, #88	; 0x58
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 f91c 	bl	8005c74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a44:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a46:	2301      	movs	r3, #1
 8001a48:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 f94a 	bl	8002d04 <HAL_RCC_OscConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a76:	f000 fae3 	bl	8002040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 f84a 	bl	8003b30 <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001aa2:	f000 facd 	bl	8002040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <SystemClock_Config+0xc0>)
 8001aa8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fa71 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ac0:	f000 fabe 	bl	8002040 <Error_Handler>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3798      	adds	r7, #152	; 0x98
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	00200002 	.word	0x00200002

08001ad0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f040 80d5 	bne.w	8001c8c <HAL_GPIO_EXTI_Callback+0x1bc>
	{
		if (!(GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001ae2:	4b9b      	ldr	r3, [pc, #620]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_GPIO_EXTI_Callback+0x32>
 8001aee:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_GPIO_EXTI_Callback+0x32>
			status = 0x00;
 8001afa:	4b96      	ldr	r3, [pc, #600]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e02e      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0x90>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001b02:	4b93      	ldr	r3, [pc, #588]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_GPIO_EXTI_Callback+0x52>
 8001b0e:	4b90      	ldr	r3, [pc, #576]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_GPIO_EXTI_Callback+0x52>
			status = 0x10;
 8001b1a:	4b8e      	ldr	r3, [pc, #568]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e01e      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0x90>
		} else if (!(GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_GPIO_EXTI_Callback+0x72>
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_EXTI_Callback+0x72>
			status = 0x01;
 8001b3a:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e00e      	b.n	8001b60 <HAL_GPIO_EXTI_Callback+0x90>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001b42:	4b83      	ldr	r3, [pc, #524]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_GPIO_EXTI_Callback+0x90>
 8001b4e:	4b80      	ldr	r3, [pc, #512]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_GPIO_EXTI_Callback+0x90>
			status = 0x11;
 8001b5a:	4b7e      	ldr	r3, [pc, #504]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b5c:	2211      	movs	r2, #17
 8001b5e:	701a      	strb	r2, [r3, #0]
		}
		if ((status_old == 0x10) && (status == 0x11)) {
 8001b60:	4b7d      	ldr	r3, [pc, #500]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d11a      	bne.n	8001b9e <HAL_GPIO_EXTI_Callback+0xce>
 8001b68:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b11      	cmp	r3, #17
 8001b6e:	d116      	bne.n	8001b9e <HAL_GPIO_EXTI_Callback+0xce>
			counter += 1;
 8001b70:	4b7a      	ldr	r3, [pc, #488]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b78      	ldr	r3, [pc, #480]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001b7a:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001b7c:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b31      	cmp	r3, #49	; 0x31
 8001b82:	d808      	bhi.n	8001b96 <HAL_GPIO_EXTI_Callback+0xc6>
				number_str += 10;
 8001b84:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	330a      	adds	r3, #10
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b74      	ldr	r3, [pc, #464]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001b8e:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001b90:	f7ff f8f4 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str < 50) {
 8001b94:	e021      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x10a>
			} else {
				number_str = 50;
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001b98:	2232      	movs	r2, #50	; 0x32
 8001b9a:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001b9c:	e01d      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x10a>
			}
		} else if ((status_old == 0x01) && (status == 0x00)) {
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d119      	bne.n	8001bda <HAL_GPIO_EXTI_Callback+0x10a>
 8001ba6:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_GPIO_EXTI_Callback+0x10a>
			counter += 1;
 8001bae:	4b6b      	ldr	r3, [pc, #428]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001bb8:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001bba:	4b69      	ldr	r3, [pc, #420]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b31      	cmp	r3, #49	; 0x31
 8001bc0:	d808      	bhi.n	8001bd4 <HAL_GPIO_EXTI_Callback+0x104>
				number_str += 10;
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	330a      	adds	r3, #10
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bcc:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001bce:	f7ff f8d5 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001bd2:	e002      	b.n	8001bda <HAL_GPIO_EXTI_Callback+0x10a>
			} else {
				number_str = 50;
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bd6:	2232      	movs	r2, #50	; 0x32
 8001bd8:	701a      	strb	r2, [r3, #0]
			}
		}
		if (status_old == 0x11 && status == 0x10) {
 8001bda:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d107      	bne.n	8001bf2 <HAL_GPIO_EXTI_Callback+0x122>
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d103      	bne.n	8001bf2 <HAL_GPIO_EXTI_Callback+0x122>
			status_old = 0x10;
 8001bea:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001bec:	2210      	movs	r2, #16
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e048      	b.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1b4>

		} else if (status_old == 0x00 && status == 0x01) {
 8001bf2:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_GPIO_EXTI_Callback+0x13a>
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d103      	bne.n	8001c0a <HAL_GPIO_EXTI_Callback+0x13a>
			status_old = 0x01;
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e03c      	b.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1b4>
		} else if (status_old == 0x10 && status == 0x00) {
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d11a      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x178>
 8001c12:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x178>
			counter -= 1;
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c24:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_GPIO_EXTI_Callback+0x170>
				number_str -= 10;
 8001c2e:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	3b0a      	subs	r3, #10
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c38:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001c3a:	f7ff f89f 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str > 0) {
 8001c3e:	e021      	b.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1b4>
			} else {
				number_str = 0;
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001c46:	e01d      	b.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1b4>
			}
		} else if (status_old == 0x01 && status == 0x11) {
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d119      	bne.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1b4>
 8001c50:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b11      	cmp	r3, #17
 8001c56:	d115      	bne.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1b4>
			counter -= 1;
 8001c58:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c62:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001c64:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_GPIO_EXTI_Callback+0x1ae>
				number_str -= 10;
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3b0a      	subs	r3, #10
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c76:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001c78:	f7ff f880 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1b4>
			} else {
				number_str = 0;
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			}
		}
		status_old = status;
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c8a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_1)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	f040 80df 	bne.w	8001e52 <HAL_GPIO_EXTI_Callback+0x382>
	{
		if (!(GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x1e4>
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x1e4>
			status = 0x00;
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e02e      	b.n	8001d12 <HAL_GPIO_EXTI_Callback+0x242>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x204>
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x204>
			status = 0x10;
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001cce:	2210      	movs	r2, #16
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e01e      	b.n	8001d12 <HAL_GPIO_EXTI_Callback+0x242>
		} else if (!(GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x224>
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x224>
			status = 0x01;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e00e      	b.n	8001d12 <HAL_GPIO_EXTI_Callback+0x242>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_GPIO_EXTI_Callback+0x242>
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_GPIO_EXTI_Callback+0x242>
			status = 0x11;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001d0e:	2211      	movs	r2, #17
 8001d10:	701a      	strb	r2, [r3, #0]
		}
		if ((status_old == 0x10) && (status == 0x11)) {
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x288>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d124      	bne.n	8001d64 <HAL_GPIO_EXTI_Callback+0x294>
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x284>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b11      	cmp	r3, #17
 8001d20:	d120      	bne.n	8001d64 <HAL_GPIO_EXTI_Callback+0x294>
			counter += 1;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001d2c:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b31      	cmp	r3, #49	; 0x31
 8001d34:	d808      	bhi.n	8001d48 <HAL_GPIO_EXTI_Callback+0x278>
				number_str += 10;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	330a      	adds	r3, #10
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001d40:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001d42:	f7ff f81b 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str < 50) {
 8001d46:	e02b      	b.n	8001da0 <HAL_GPIO_EXTI_Callback+0x2d0>
			} else {
				number_str = 50;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x290>)
 8001d4a:	2232      	movs	r2, #50	; 0x32
 8001d4c:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001d4e:	e027      	b.n	8001da0 <HAL_GPIO_EXTI_Callback+0x2d0>
 8001d50:	48000800 	.word	0x48000800
 8001d54:	20000699 	.word	0x20000699
 8001d58:	20000698 	.word	0x20000698
 8001d5c:	20000680 	.word	0x20000680
 8001d60:	20000682 	.word	0x20000682
			}
		} else if ((status_old == 0x01) && (status == 0x00)) {
 8001d64:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d119      	bne.n	8001da0 <HAL_GPIO_EXTI_Callback+0x2d0>
 8001d6c:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d115      	bne.n	8001da0 <HAL_GPIO_EXTI_Callback+0x2d0>
			counter += 1;
 8001d74:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001d7e:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001d80:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b31      	cmp	r3, #49	; 0x31
 8001d86:	d808      	bhi.n	8001d9a <HAL_GPIO_EXTI_Callback+0x2ca>
				number_str += 10;
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	330a      	adds	r3, #10
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001d92:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001d94:	f7fe fff2 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_EXTI_Callback+0x2d0>
			} else {
				number_str = 50;
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001d9c:	2232      	movs	r2, #50	; 0x32
 8001d9e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (status_old == 0x11 && status == 0x10) {
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	d107      	bne.n	8001db8 <HAL_GPIO_EXTI_Callback+0x2e8>
 8001da8:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d103      	bne.n	8001db8 <HAL_GPIO_EXTI_Callback+0x2e8>
			status_old = 0x10;
 8001db0:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001db2:	2210      	movs	r2, #16
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e048      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x37a>

		} else if (status_old == 0x00 && status == 0x01) {
 8001db8:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_GPIO_EXTI_Callback+0x300>
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d103      	bne.n	8001dd0 <HAL_GPIO_EXTI_Callback+0x300>
			status_old = 0x01;
 8001dc8:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e03c      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x37a>
		} else if (status_old == 0x10 && status == 0x00) {
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d11a      	bne.n	8001e0e <HAL_GPIO_EXTI_Callback+0x33e>
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d116      	bne.n	8001e0e <HAL_GPIO_EXTI_Callback+0x33e>
			counter -= 1;
 8001de0:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001dea:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_GPIO_EXTI_Callback+0x336>
				number_str -= 10;
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3b0a      	subs	r3, #10
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001dfe:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001e00:	f7fe ffbc 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str > 0) {
 8001e04:	e021      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x37a>
			} else {
				number_str = 0;
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001e0c:	e01d      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x37a>
			}
		} else if (status_old == 0x01 && status == 0x11) {
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d119      	bne.n	8001e4a <HAL_GPIO_EXTI_Callback+0x37a>
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	d115      	bne.n	8001e4a <HAL_GPIO_EXTI_Callback+0x37a>
			counter -= 1;
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001e28:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_GPIO_EXTI_Callback+0x374>
				number_str -= 10;
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	3b0a      	subs	r3, #10
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e3c:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001e3e:	f7fe ff9d 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001e42:	e002      	b.n	8001e4a <HAL_GPIO_EXTI_Callback+0x37a>
			} else {
				number_str = 0;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
			}
		}
		status_old = status;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001e50:	701a      	strb	r2, [r3, #0]

	}
	if(GPIO_Pin == GPIO_PIN_2)
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_EXTI_Callback+0x3d0>
	{
		flag_led = !flag_led;
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001e74:	701a      	strb	r2, [r3, #0]
		stage_menu = !stage_menu;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f083 0301 	eor.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001e92:	701a      	strb	r2, [r3, #0]
		update_display = 1;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_GPIO_EXTI_Callback+0x3f0>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
		tim4_flag = 0;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_GPIO_EXTI_Callback+0x3f4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
	}
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000698 	.word	0x20000698
 8001eac:	20000699 	.word	0x20000699
 8001eb0:	20000680 	.word	0x20000680
 8001eb4:	20000682 	.word	0x20000682
 8001eb8:	20000681 	.word	0x20000681
 8001ebc:	20000683 	.word	0x20000683
 8001ec0:	20000002 	.word	0x20000002
 8001ec4:	20000689 	.word	0x20000689

08001ec8 <print_first_line>:

void print_first_line()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "User led param.");
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <print_first_line+0x28>)
 8001ed0:	4808      	ldr	r0, [pc, #32]	; (8001ef4 <print_first_line+0x2c>)
 8001ed2:	f004 fd57 	bl	8006984 <siprintf>
	GMG12864_Decode_UTF8(15, 0, 1, 0, tx_buffer);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <print_first_line+0x2c>)
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	2201      	movs	r2, #1
 8001ede:	2100      	movs	r1, #0
 8001ee0:	200f      	movs	r0, #15
 8001ee2:	f7ff f9ad 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001ee6:	f7ff f817 	bl	8000f18 <GMG12864_Update>
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	0800a584 	.word	0x0800a584
 8001ef4:	20000200 	.word	0x20000200

08001ef8 <print_second_line>:

void print_second_line()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "TIM_4 param");
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <print_second_line+0x28>)
 8001f00:	4808      	ldr	r0, [pc, #32]	; (8001f24 <print_second_line+0x2c>)
 8001f02:	f004 fd3f 	bl	8006984 <siprintf>
	GMG12864_Decode_UTF8(15, 10, 1, 0, tx_buffer);
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <print_second_line+0x2c>)
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	210a      	movs	r1, #10
 8001f10:	200f      	movs	r0, #15
 8001f12:	f7ff f995 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001f16:	f7fe ffff 	bl	8000f18 <GMG12864_Update>
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	0800a594 	.word	0x0800a594
 8001f24:	20000200 	.word	0x20000200

08001f28 <print_third_line>:

void print_third_line()
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Third line");
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <print_third_line+0x28>)
 8001f30:	4808      	ldr	r0, [pc, #32]	; (8001f54 <print_third_line+0x2c>)
 8001f32:	f004 fd27 	bl	8006984 <siprintf>
	GMG12864_Decode_UTF8(15, 20, 1, 0, tx_buffer);
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <print_third_line+0x2c>)
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2114      	movs	r1, #20
 8001f40:	200f      	movs	r0, #15
 8001f42:	f7ff f97d 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001f46:	f7fe ffe7 	bl	8000f18 <GMG12864_Update>
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	0800a5a0 	.word	0x0800a5a0
 8001f54:	20000200 	.word	0x20000200

08001f58 <print_fourth_line>:

void print_fourth_line()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Fourth line");
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <print_fourth_line+0x28>)
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <print_fourth_line+0x2c>)
 8001f62:	f004 fd0f 	bl	8006984 <siprintf>
	GMG12864_Decode_UTF8(15, 30, 1, 0, tx_buffer);
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <print_fourth_line+0x2c>)
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	211e      	movs	r1, #30
 8001f70:	200f      	movs	r0, #15
 8001f72:	f7ff f965 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001f76:	f7fe ffcf 	bl	8000f18 <GMG12864_Update>
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	0800a5ac 	.word	0x0800a5ac
 8001f84:	20000200 	.word	0x20000200

08001f88 <print_fifth_line>:

void print_fifth_line()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Fifth line");
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <print_fifth_line+0x28>)
 8001f90:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <print_fifth_line+0x2c>)
 8001f92:	f004 fcf7 	bl	8006984 <siprintf>
	GMG12864_Decode_UTF8(15, 40, 1, 0, tx_buffer);
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <print_fifth_line+0x2c>)
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2128      	movs	r1, #40	; 0x28
 8001fa0:	200f      	movs	r0, #15
 8001fa2:	f7ff f94d 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001fa6:	f7fe ffb7 	bl	8000f18 <GMG12864_Update>
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	0800a5b8 	.word	0x0800a5b8
 8001fb4:	20000200 	.word	0x20000200

08001fb8 <print_sixth_line>:

void print_sixth_line()
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Sixth line");
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <print_sixth_line+0x28>)
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <print_sixth_line+0x2c>)
 8001fc2:	f004 fcdf 	bl	8006984 <siprintf>
	GMG12864_Decode_UTF8(15, 50, 1, 0, tx_buffer);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <print_sixth_line+0x2c>)
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2132      	movs	r1, #50	; 0x32
 8001fd0:	200f      	movs	r0, #15
 8001fd2:	f7ff f935 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001fd6:	f7fe ff9f 	bl	8000f18 <GMG12864_Update>
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0800a5c4 	.word	0x0800a5c4
 8001fe4:	20000200 	.word	0x20000200

08001fe8 <pointer_write>:

void pointer_write()
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "->");
 8001fee:	4909      	ldr	r1, [pc, #36]	; (8002014 <pointer_write+0x2c>)
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <pointer_write+0x30>)
 8001ff2:	f004 fcc7 	bl	8006984 <siprintf>
	GMG12864_Decode_UTF8(0, number_str, 1, 0, tx_buffer);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <pointer_write+0x34>)
 8001ff8:	7819      	ldrb	r1, [r3, #0]
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <pointer_write+0x30>)
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	2201      	movs	r2, #1
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff f91c 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002008:	f7fe ff86 	bl	8000f18 <GMG12864_Update>
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	0800a5d0 	.word	0x0800a5d0
 8002018:	20000200 	.word	0x20000200
 800201c:	20000682 	.word	0x20000682

08002020 <upd_disp>:

void upd_disp()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	if(update_display)
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <upd_disp+0x1c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <upd_disp+0x16>
	{
		GMG12864_Clean_Frame_buffer();
 800202c:	f7fe fea6 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
		update_display = 0;
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <upd_disp+0x1c>)
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
	}
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000002 	.word	0x20000002

08002040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002044:	b672      	cpsid	i
}
 8002046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002048:	e7fe      	b.n	8002048 <Error_Handler+0x8>
	...

0800204c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <MX_SPI1_Init+0x78>)
 8002054:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800205c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002066:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800206a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_SPI1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_SPI1_Init+0x74>)
 800207a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002082:	2208      	movs	r2, #8
 8002084:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_SPI1_Init+0x74>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_SPI1_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_SPI1_Init+0x74>)
 800209a:	2207      	movs	r2, #7
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_SPI1_Init+0x74>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_SPI1_Init+0x74>)
 80020a6:	2208      	movs	r2, #8
 80020a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_SPI1_Init+0x74>)
 80020ac:	f002 f994 	bl	80043d8 <HAL_SPI_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020b6:	f7ff ffc3 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000069c 	.word	0x2000069c
 80020c4:	40013000 	.word	0x40013000

080020c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_SPI_MspInit+0xb4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d144      	bne.n	8002174 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 80020f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f4:	6193      	str	r3, [r2, #24]
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	6153      	str	r3, [r2, #20]
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002124:	6153      	str	r3, [r2, #20]
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_SPI_MspInit+0xb8>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002142:	2305      	movs	r3, #5
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f000 fc1e 	bl	8002990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002154:	2308      	movs	r3, #8
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002164:	2305      	movs	r3, #5
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_SPI_MspInit+0xbc>)
 8002170:	f000 fc0e 	bl	8002990 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40013000 	.word	0x40013000
 8002180:	40021000 	.word	0x40021000
 8002184:	48000400 	.word	0x48000400

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_MspInit+0x44>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_MspInit+0x44>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6193      	str	r3, [r2, #24]
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_MspInit+0x44>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_MspInit+0x44>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_MspInit+0x44>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_MspInit+0x44>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000

080021d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <NMI_Handler+0x4>

080021d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <HardFault_Handler+0x4>

080021dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <MemManage_Handler+0x4>

080021e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e6:	e7fe      	b.n	80021e6 <BusFault_Handler+0x4>

080021e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <UsageFault_Handler+0x4>

080021ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221c:	f000 fa62 	bl	80026e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002228:	2001      	movs	r0, #1
 800222a:	f000 fd53 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}

08002232 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002236:	2002      	movs	r0, #2
 8002238:	f000 fd4c 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002244:	2004      	movs	r0, #4
 8002246:	f000 fd45 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <TIM4_IRQHandler+0x1c>)
 8002256:	f002 fd13 	bl	8004c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  tim4_counter += 3;
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <TIM4_IRQHandler+0x20>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	3303      	adds	r3, #3
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b03      	ldr	r3, [pc, #12]	; (8002270 <TIM4_IRQHandler+0x20>)
 8002264:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000700 	.word	0x20000700
 8002270:	20000688 	.word	0x20000688

08002274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002278:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800227c:	f000 fd2a 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	return 1;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <_kill>:

int _kill(int pid, int sig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800229e:	f003 fcbf 	bl	8005c20 <__errno>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2216      	movs	r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
	return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_exit>:

void _exit (int status)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffe7 	bl	8002294 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022c6:	e7fe      	b.n	80022c6 <_exit+0x12>

080022c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e00a      	b.n	80022f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022da:	f3af 8000 	nop.w
 80022de:	4601      	mov	r1, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf0      	blt.n	80022da <_read+0x12>
	}

return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e009      	b.n	8002328 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	60ba      	str	r2, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf1      	blt.n	8002314 <_write+0x12>
	}
	return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_close>:

int _close(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002362:	605a      	str	r2, [r3, #4]
	return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_isatty>:

int _isatty(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	return 1;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
	return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f003 fc24 	bl	8005c20 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20010000 	.word	0x20010000
 8002404:	00000400 	.word	0x00000400
 8002408:	2000068c 	.word	0x2000068c
 800240c:	200007e8 	.word	0x200007e8

08002410 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <MX_TIM4_Init+0x98>)
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <MX_TIM4_Init+0x9c>)
 8002456:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_TIM4_Init+0x98>)
 800245a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800245e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_TIM4_Init+0x98>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <MX_TIM4_Init+0x98>)
 8002468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800246c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_TIM4_Init+0x98>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_TIM4_Init+0x98>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800247a:	4814      	ldr	r0, [pc, #80]	; (80024cc <MX_TIM4_Init+0x98>)
 800247c:	f002 fb38 	bl	8004af0 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002486:	f7ff fddb 	bl	8002040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <MX_TIM4_Init+0x98>)
 8002498:	f002 fd11 	bl	8004ebe <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80024a2:	f7ff fdcd 	bl	8002040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_TIM4_Init+0x98>)
 80024b4:	f002 ff36 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80024be:	f7ff fdbf 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000700 	.word	0x20000700
 80024d0:	40000800 	.word	0x40000800

080024d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <HAL_TIM_Base_MspInit+0x44>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d113      	bne.n	800250e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_TIM_Base_MspInit+0x48>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_TIM_Base_MspInit+0x48>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	61d3      	str	r3, [r2, #28]
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_TIM_Base_MspInit+0x48>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	201e      	movs	r0, #30
 8002504:	f000 fa0d 	bl	8002922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002508:	201e      	movs	r0, #30
 800250a:	f000 fa26 	bl	800295a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40000800 	.word	0x40000800
 800251c:	40021000 	.word	0x40021000

08002520 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_USART2_UART_Init+0x58>)
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <MX_USART2_UART_Init+0x5c>)
 8002528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <MX_USART2_UART_Init+0x58>)
 800252c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_USART2_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_USART2_UART_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_USART2_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_USART2_UART_Init+0x58>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_USART2_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_USART2_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_USART2_UART_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_USART2_UART_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_USART2_UART_Init+0x58>)
 8002564:	f002 ff88 	bl	8005478 <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800256e:	f7ff fd67 	bl	8002040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000074c 	.word	0x2000074c
 800257c:	40004400 	.word	0x40004400

08002580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_UART_MspInit+0x7c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d128      	bne.n	80025f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_UART_MspInit+0x80>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <HAL_UART_MspInit+0x80>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_UART_MspInit+0x80>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_UART_MspInit+0x80>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <HAL_UART_MspInit+0x80>)
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	6153      	str	r3, [r2, #20]
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_UART_MspInit+0x80>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025d2:	230c      	movs	r3, #12
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e2:	2307      	movs	r3, #7
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f0:	f000 f9ce 	bl	8002990 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025f4:	bf00      	nop
 80025f6:	3728      	adds	r7, #40	; 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40004400 	.word	0x40004400
 8002600:	40021000 	.word	0x40021000

08002604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800263c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <LoopForever+0x6>)
  ldr r1, =_edata
 800260a:	490e      	ldr	r1, [pc, #56]	; (8002644 <LoopForever+0xa>)
  ldr r2, =_sidata
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <LoopForever+0xe>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002620:	4c0b      	ldr	r4, [pc, #44]	; (8002650 <LoopForever+0x16>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800262e:	f7ff feef 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002632:	f003 fafb 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002636:	f7ff f859 	bl	80016ec <main>

0800263a <LoopForever>:

LoopForever:
    b LoopForever
 800263a:	e7fe      	b.n	800263a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800263c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002644:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002648:	0800afdc 	.word	0x0800afdc
  ldr r2, =_sbss
 800264c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002650:	200007e4 	.word	0x200007e4

08002654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <ADC1_2_IRQHandler>
	...

08002658 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_Init+0x28>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_Init+0x28>)
 8002662:	f043 0310 	orr.w	r3, r3, #16
 8002666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f000 f94f 	bl	800290c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266e:	200f      	movs	r0, #15
 8002670:	f000 f808 	bl	8002684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002674:	f7ff fd88 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40022000 	.word	0x40022000

08002684 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x54>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x58>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	fbb3 f3f1 	udiv	r3, r3, r1
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f967 	bl	8002976 <HAL_SYSTICK_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d80a      	bhi.n	80026ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f000 f92f 	bl	8002922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_InitTick+0x5c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000004 	.word	0x20000004
 80026dc:	2000000c 	.word	0x2000000c
 80026e0:	20000008 	.word	0x20000008

080026e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000000c 	.word	0x2000000c
 8002708:	200007d0 	.word	0x200007d0

0800270c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	200007d0 	.word	0x200007d0

08002724 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff ffee 	bl	800270c <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_Delay+0x44>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800274a:	bf00      	nop
 800274c:	f7ff ffde 	bl	800270c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000000c 	.word	0x2000000c

0800276c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279e:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60d3      	str	r3, [r2, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <__NVIC_GetPriorityGrouping+0x18>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 0307 	and.w	r3, r3, #7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0b      	blt.n	80027fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4907      	ldr	r1, [pc, #28]	; (8002808 <__NVIC_EnableIRQ+0x38>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2001      	movs	r0, #1
 80027f2:	fa00 f202 	lsl.w	r2, r0, r2
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <__NVIC_SetPriority+0x50>)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f1c3 0307 	rsb	r3, r3, #7
 800287a:	2b04      	cmp	r3, #4
 800287c:	bf28      	it	cs
 800287e:	2304      	movcs	r3, #4
 8002880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3304      	adds	r3, #4
 8002886:	2b06      	cmp	r3, #6
 8002888:	d902      	bls.n	8002890 <NVIC_EncodePriority+0x30>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3b03      	subs	r3, #3
 800288e:	e000      	b.n	8002892 <NVIC_EncodePriority+0x32>
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	401a      	ands	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	4313      	orrs	r3, r2
         );
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d8:	d301      	bcc.n	80028de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028da:	2301      	movs	r3, #1
 80028dc:	e00f      	b.n	80028fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <SysTick_Config+0x40>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e6:	210f      	movs	r1, #15
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	f7ff ff8e 	bl	800280c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <SysTick_Config+0x40>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f6:	4b04      	ldr	r3, [pc, #16]	; (8002908 <SysTick_Config+0x40>)
 80028f8:	2207      	movs	r2, #7
 80028fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	e000e010 	.word	0xe000e010

0800290c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff29 	bl	800276c <__NVIC_SetPriorityGrouping>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002934:	f7ff ff3e 	bl	80027b4 <__NVIC_GetPriorityGrouping>
 8002938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7ff ff8e 	bl	8002860 <NVIC_EncodePriority>
 8002944:	4602      	mov	r2, r0
 8002946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff5d 	bl	800280c <__NVIC_SetPriority>
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff31 	bl	80027d0 <__NVIC_EnableIRQ>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ffa2 	bl	80028c8 <SysTick_Config>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299e:	e160      	b.n	8002c62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8152 	beq.w	8002c5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d005      	beq.n	80029d0 <HAL_GPIO_Init+0x40>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d130      	bne.n	8002a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a06:	2201      	movs	r2, #1
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 0201 	and.w	r2, r3, #1
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d017      	beq.n	8002a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	2203      	movs	r2, #3
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d123      	bne.n	8002ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	6939      	ldr	r1, [r7, #16]
 8002abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0203 	and.w	r2, r3, #3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80ac 	beq.w	8002c5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b04:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_GPIO_Init+0x2f0>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_GPIO_Init+0x2f0>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <HAL_GPIO_Init+0x2f0>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b1c:	4a59      	ldr	r2, [pc, #356]	; (8002c84 <HAL_GPIO_Init+0x2f4>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b46:	d025      	beq.n	8002b94 <HAL_GPIO_Init+0x204>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_GPIO_Init+0x2f8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d01f      	beq.n	8002b90 <HAL_GPIO_Init+0x200>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a4e      	ldr	r2, [pc, #312]	; (8002c8c <HAL_GPIO_Init+0x2fc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d019      	beq.n	8002b8c <HAL_GPIO_Init+0x1fc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a4d      	ldr	r2, [pc, #308]	; (8002c90 <HAL_GPIO_Init+0x300>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_GPIO_Init+0x1f8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_GPIO_Init+0x304>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00d      	beq.n	8002b84 <HAL_GPIO_Init+0x1f4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_GPIO_Init+0x308>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d007      	beq.n	8002b80 <HAL_GPIO_Init+0x1f0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_GPIO_Init+0x30c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_GPIO_Init+0x1ec>
 8002b78:	2306      	movs	r3, #6
 8002b7a:	e00c      	b.n	8002b96 <HAL_GPIO_Init+0x206>
 8002b7c:	2307      	movs	r3, #7
 8002b7e:	e00a      	b.n	8002b96 <HAL_GPIO_Init+0x206>
 8002b80:	2305      	movs	r3, #5
 8002b82:	e008      	b.n	8002b96 <HAL_GPIO_Init+0x206>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e006      	b.n	8002b96 <HAL_GPIO_Init+0x206>
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e004      	b.n	8002b96 <HAL_GPIO_Init+0x206>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e002      	b.n	8002b96 <HAL_GPIO_Init+0x206>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_GPIO_Init+0x206>
 8002b94:	2300      	movs	r3, #0
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	f002 0203 	and.w	r2, r2, #3
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	4093      	lsls	r3, r2
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba6:	4937      	ldr	r1, [pc, #220]	; (8002c84 <HAL_GPIO_Init+0x2f4>)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bd8:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c02:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f ae97 	bne.w	80029a0 <HAL_GPIO_Init+0x10>
  }
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40010000 	.word	0x40010000
 8002c88:	48000400 	.word	0x48000400
 8002c8c:	48000800 	.word	0x48000800
 8002c90:	48000c00 	.word	0x48000c00
 8002c94:	48001000 	.word	0x48001000
 8002c98:	48001400 	.word	0x48001400
 8002c9c:	48001800 	.word	0x48001800
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe feec 	bl	8001ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f000 bf01 	b.w	8003b20 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8160 	beq.w	8002fee <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d2e:	4bae      	ldr	r3, [pc, #696]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d3a:	4bab      	ldr	r3, [pc, #684]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d159      	bne.n	8002dfa <HAL_RCC_OscConfig+0xf6>
 8002d46:	4ba8      	ldr	r3, [pc, #672]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d152      	bne.n	8002dfa <HAL_RCC_OscConfig+0xf6>
 8002d54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x82>
 8002d80:	4b99      	ldr	r3, [pc, #612]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0xae>
 8002d86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002da2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002dae:	4b8e      	ldr	r3, [pc, #568]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002db6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002dba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002dbe:	fa92 f2a2 	rbit	r2, r2
 8002dc2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002dc6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8102 	beq.w	8002fec <HAL_RCC_OscConfig+0x2e8>
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 80fc 	bne.w	8002fec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f000 be93 	b.w	8003b20 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x110>
 8002e06:	4b78      	ldr	r3, [pc, #480]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a77      	ldr	r2, [pc, #476]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e030      	b.n	8002e76 <HAL_RCC_OscConfig+0x172>
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x134>
 8002e1e:	4b72      	ldr	r3, [pc, #456]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a71      	ldr	r2, [pc, #452]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b6f      	ldr	r3, [pc, #444]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6e      	ldr	r2, [pc, #440]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e01e      	b.n	8002e76 <HAL_RCC_OscConfig+0x172>
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x15a>
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a64      	ldr	r2, [pc, #400]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e00b      	b.n	8002e76 <HAL_RCC_OscConfig+0x172>
 8002e5e:	4b62      	ldr	r3, [pc, #392]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5e      	ldr	r2, [pc, #376]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d059      	beq.n	8002f34 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7ff fc44 	bl	800270c <HAL_GetTick>
 8002e84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8a:	f7ff fc3f 	bl	800270c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d902      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	f000 be40 	b.w	8003b20 <HAL_RCC_OscConfig+0xe1c>
 8002ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002eb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x1ce>
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0x1fa>
 8002ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002eee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002efa:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f02:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002f0a:	fa92 f2a2 	rbit	r2, r2
 8002f0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002f12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f042 0220 	orr.w	r2, r2, #32
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f002 021f 	and.w	r2, r2, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0ab      	beq.n	8002e8a <HAL_RCC_OscConfig+0x186>
 8002f32:	e05c      	b.n	8002fee <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7ff fbea 	bl	800270c <HAL_GetTick>
 8002f38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3e:	f7ff fbe5 	bl	800270c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d902      	bls.n	8002f54 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	f000 bde6 	b.w	8003b20 <HAL_RCC_OscConfig+0xe1c>
 8002f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f58:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002f68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d102      	bne.n	8002f86 <HAL_RCC_OscConfig+0x282>
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	e015      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2ae>
 8002f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fa2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_RCC_OscConfig+0x2e4>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002fba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002fbe:	fa92 f2a2 	rbit	r2, r2
 8002fc2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002fc6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fca:	fab2 f282 	clz	r2, r2
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f042 0220 	orr.w	r2, r2, #32
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f002 021f 	and.w	r2, r2, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ab      	bne.n	8002f3e <HAL_RCC_OscConfig+0x23a>
 8002fe6:	e002      	b.n	8002fee <HAL_RCC_OscConfig+0x2ea>
 8002fe8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8170 	beq.w	80032de <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ffe:	4bd0      	ldr	r3, [pc, #832]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800300a:	4bcd      	ldr	r3, [pc, #820]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d16d      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3ee>
 8003016:	4bca      	ldr	r3, [pc, #808]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003022:	d166      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3ee>
 8003024:	2302      	movs	r3, #2
 8003026:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003036:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0x350>
 800304e:	4bbc      	ldr	r3, [pc, #752]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	e013      	b.n	800307c <HAL_RCC_OscConfig+0x378>
 8003054:	2302      	movs	r3, #2
 8003056:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003066:	2302      	movs	r3, #2
 8003068:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800306c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003078:	4bb1      	ldr	r3, [pc, #708]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2202      	movs	r2, #2
 800307e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003082:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800308e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_RCC_OscConfig+0x3ba>
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d002      	beq.n	80030be <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f000 bd31 	b.w	8003b20 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4ba0      	ldr	r3, [pc, #640]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	21f8      	movs	r1, #248	; 0xf8
 80030ce:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80030d6:	fa91 f1a1 	rbit	r1, r1
 80030da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80030de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030e2:	fab1 f181 	clz	r1, r1
 80030e6:	b2c9      	uxtb	r1, r1
 80030e8:	408b      	lsls	r3, r1
 80030ea:	4995      	ldr	r1, [pc, #596]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f0:	e0f5      	b.n	80032de <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8085 	beq.w	8003208 <HAL_RCC_OscConfig+0x504>
 80030fe:	2301      	movs	r3, #1
 8003100:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003110:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800311e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	461a      	mov	r2, r3
 8003126:	2301      	movs	r3, #1
 8003128:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7ff faef 	bl	800270c <HAL_GetTick>
 800312e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003134:	f7ff faea 	bl	800270c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d902      	bls.n	800314a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	f000 bceb 	b.w	8003b20 <HAL_RCC_OscConfig+0xe1c>
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800315c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_RCC_OscConfig+0x476>
 8003174:	4b72      	ldr	r3, [pc, #456]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	e013      	b.n	80031a2 <HAL_RCC_OscConfig+0x49e>
 800317a:	2302      	movs	r3, #2
 800317c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800318c:	2302      	movs	r3, #2
 800318e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003192:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800319e:	4b68      	ldr	r3, [pc, #416]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2202      	movs	r2, #2
 80031a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80031a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80031ac:	fa92 f2a2 	rbit	r2, r2
 80031b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80031b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	f042 0220 	orr.w	r2, r2, #32
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	f002 021f 	and.w	r2, r2, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0af      	beq.n	8003134 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b5a      	ldr	r3, [pc, #360]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	21f8      	movs	r1, #248	; 0xf8
 80031e4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80031ec:	fa91 f1a1 	rbit	r1, r1
 80031f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80031f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031f8:	fab1 f181 	clz	r1, r1
 80031fc:	b2c9      	uxtb	r1, r1
 80031fe:	408b      	lsls	r3, r1
 8003200:	494f      	ldr	r1, [pc, #316]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
 8003206:	e06a      	b.n	80032de <HAL_RCC_OscConfig+0x5da>
 8003208:	2301      	movs	r3, #1
 800320a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800321a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003228:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	461a      	mov	r2, r3
 8003230:	2300      	movs	r3, #0
 8003232:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7ff fa6a 	bl	800270c <HAL_GetTick>
 8003238:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800323e:	f7ff fa65 	bl	800270c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	f000 bc66 	b.w	8003b20 <HAL_RCC_OscConfig+0xe1c>
 8003254:	2302      	movs	r3, #2
 8003256:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d102      	bne.n	8003284 <HAL_RCC_OscConfig+0x580>
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e013      	b.n	80032ac <HAL_RCC_OscConfig+0x5a8>
 8003284:	2302      	movs	r3, #2
 8003286:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003296:	2302      	movs	r3, #2
 8003298:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800329c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_OscConfig+0x63c>)
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2202      	movs	r2, #2
 80032ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80032b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80032b6:	fa92 f2a2 	rbit	r2, r2
 80032ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80032be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f002 021f 	and.w	r2, r2, #31
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1af      	bne.n	800323e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80da 	beq.w	80034a2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d069      	beq.n	80033cc <HAL_RCC_OscConfig+0x6c8>
 80032f8:	2301      	movs	r3, #1
 80032fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800330a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_OscConfig+0x640>)
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	461a      	mov	r2, r3
 800331e:	2301      	movs	r3, #1
 8003320:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7ff f9f3 	bl	800270c <HAL_GetTick>
 8003326:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e00d      	b.n	8003348 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7ff f9ee 	bl	800270c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d905      	bls.n	8003348 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e3ef      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
 8003340:	40021000 	.word	0x40021000
 8003344:	10908120 	.word	0x10908120
 8003348:	2302      	movs	r3, #2
 800334a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003352:	fa93 f2a3 	rbit	r2, r3
 8003356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003360:	2202      	movs	r2, #2
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	fa93 f2a3 	rbit	r2, r3
 800336e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003378:	2202      	movs	r2, #2
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800338a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338c:	4ba4      	ldr	r3, [pc, #656]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 800338e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003390:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003394:	2102      	movs	r1, #2
 8003396:	6019      	str	r1, [r3, #0]
 8003398:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f1a3 	rbit	r1, r3
 80033a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033a6:	6019      	str	r1, [r3, #0]
  return result;
 80033a8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0b0      	beq.n	800332c <HAL_RCC_OscConfig+0x628>
 80033ca:	e06a      	b.n	80034a2 <HAL_RCC_OscConfig+0x79e>
 80033cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033e2:	601a      	str	r2, [r3, #0]
  return result;
 80033e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b8c      	ldr	r3, [pc, #560]	; (8003624 <HAL_RCC_OscConfig+0x920>)
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	2300      	movs	r3, #0
 80033fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7ff f985 	bl	800270c <HAL_GetTick>
 8003402:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003406:	e009      	b.n	800341c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003408:	f7ff f980 	bl	800270c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e381      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
 800341c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003420:	2202      	movs	r2, #2
 8003422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f2a3 	rbit	r2, r3
 800342e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f2a3 	rbit	r2, r3
 8003446:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003450:	2202      	movs	r2, #2
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003462:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003464:	4b6e      	ldr	r3, [pc, #440]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003468:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800346c:	2102      	movs	r1, #2
 800346e:	6019      	str	r1, [r3, #0]
 8003470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f1a3 	rbit	r1, r3
 800347a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800347e:	6019      	str	r1, [r3, #0]
  return result;
 8003480:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1b2      	bne.n	8003408 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8157 	beq.w	8003760 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d112      	bne.n	80034ea <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b56      	ldr	r3, [pc, #344]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a55      	ldr	r2, [pc, #340]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <HAL_RCC_OscConfig+0x924>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11a      	bne.n	800352c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f6:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <HAL_RCC_OscConfig+0x924>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4b      	ldr	r2, [pc, #300]	; (8003628 <HAL_RCC_OscConfig+0x924>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003500:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003502:	f7ff f903 	bl	800270c <HAL_GetTick>
 8003506:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	e009      	b.n	8003520 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7ff f8fe 	bl	800270c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b64      	cmp	r3, #100	; 0x64
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e2ff      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_RCC_OscConfig+0x924>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ef      	beq.n	800350c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x840>
 8003536:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a39      	ldr	r2, [pc, #228]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e02f      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a0>
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x864>
 800354e:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a33      	ldr	r2, [pc, #204]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a30      	ldr	r2, [pc, #192]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a0>
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x888>
 8003572:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003578:	f043 0304 	orr.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a27      	ldr	r2, [pc, #156]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6213      	str	r3, [r2, #32]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0x8a0>
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	6213      	str	r3, [r2, #32]
 8003598:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a20      	ldr	r2, [pc, #128]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 800359e:	f023 0304 	bic.w	r3, r3, #4
 80035a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d06a      	beq.n	8003684 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7ff f8ad 	bl	800270c <HAL_GetTick>
 80035b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7ff f8a8 	bl	800270c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e2a7      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
 80035d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035d4:	2202      	movs	r2, #2
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f2a3 	rbit	r2, r3
 80035e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035ec:	2202      	movs	r2, #2
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035fe:	601a      	str	r2, [r3, #0]
  return result;
 8003600:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003604:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0302 	orr.w	r3, r3, #2
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d108      	bne.n	800362c <HAL_RCC_OscConfig+0x928>
 800361a:	4b01      	ldr	r3, [pc, #4]	; (8003620 <HAL_RCC_OscConfig+0x91c>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	e013      	b.n	8003648 <HAL_RCC_OscConfig+0x944>
 8003620:	40021000 	.word	0x40021000
 8003624:	10908120 	.word	0x10908120
 8003628:	40007000 	.word	0x40007000
 800362c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003630:	2202      	movs	r2, #2
 8003632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	4bc0      	ldr	r3, [pc, #768]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800364c:	2102      	movs	r1, #2
 800364e:	6011      	str	r1, [r2, #0]
 8003650:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	fa92 f1a2 	rbit	r1, r2
 800365a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800365e:	6011      	str	r1, [r2, #0]
  return result;
 8003660:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	fab2 f282 	clz	r2, r2
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	f002 021f 	and.w	r2, r2, #31
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f202 	lsl.w	r2, r1, r2
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d09a      	beq.n	80035b8 <HAL_RCC_OscConfig+0x8b4>
 8003682:	e063      	b.n	800374c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003684:	f7ff f842 	bl	800270c <HAL_GetTick>
 8003688:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	e00b      	b.n	80036a6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7ff f83d 	bl	800270c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e23c      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
 80036a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036aa:	2202      	movs	r2, #2
 80036ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	fa93 f2a3 	rbit	r2, r3
 80036b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036c2:	2202      	movs	r2, #2
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	fa93 f2a3 	rbit	r2, r3
 80036d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036d4:	601a      	str	r2, [r3, #0]
  return result;
 80036d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d102      	bne.n	80036f6 <HAL_RCC_OscConfig+0x9f2>
 80036f0:	4b95      	ldr	r3, [pc, #596]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	e00d      	b.n	8003712 <HAL_RCC_OscConfig+0xa0e>
 80036f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036fa:	2202      	movs	r2, #2
 80036fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fa93 f2a3 	rbit	r2, r3
 8003708:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	4b8e      	ldr	r3, [pc, #568]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003716:	2102      	movs	r1, #2
 8003718:	6011      	str	r1, [r2, #0]
 800371a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	fa92 f1a2 	rbit	r1, r2
 8003724:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003728:	6011      	str	r1, [r2, #0]
  return result;
 800372a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1a0      	bne.n	800368e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800374c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b7c      	ldr	r3, [pc, #496]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4a7b      	ldr	r2, [pc, #492]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 81d9 	beq.w	8003b1e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376c:	4b76      	ldr	r3, [pc, #472]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	f000 81a6 	beq.w	8003ac6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b02      	cmp	r3, #2
 8003782:	f040 811e 	bne.w	80039c2 <HAL_RCC_OscConfig+0xcbe>
 8003786:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800378a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800378e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	fa93 f2a3 	rbit	r2, r3
 800379a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800379e:	601a      	str	r2, [r3, #0]
  return result;
 80037a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	461a      	mov	r2, r3
 80037b8:	2300      	movs	r3, #0
 80037ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe ffa6 	bl	800270c <HAL_GetTick>
 80037c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c4:	e009      	b.n	80037da <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe ffa1 	bl	800270c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1a2      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
 80037da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f2a3 	rbit	r2, r3
 80037ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037f2:	601a      	str	r2, [r3, #0]
  return result;
 80037f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <HAL_RCC_OscConfig+0xb10>
 800380e:	4b4e      	ldr	r3, [pc, #312]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	e01b      	b.n	800384c <HAL_RCC_OscConfig+0xb48>
 8003814:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800381c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fa93 f2a3 	rbit	r2, r3
 8003828:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003832:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	fa93 f2a3 	rbit	r2, r3
 8003842:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003850:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003854:	6011      	str	r1, [r2, #0]
 8003856:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	fa92 f1a2 	rbit	r1, r2
 8003860:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003864:	6011      	str	r1, [r2, #0]
  return result;
 8003866:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f002 021f 	and.w	r2, r2, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d19e      	bne.n	80037c6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f023 020f 	bic.w	r2, r3, #15
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	492c      	ldr	r1, [pc, #176]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003898:	4313      	orrs	r3, r2
 800389a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a19      	ldr	r1, [r3, #32]
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	4925      	ldr	r1, [pc, #148]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038d0:	601a      	str	r2, [r3, #0]
  return result;
 80038d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	461a      	mov	r2, r3
 80038ea:	2301      	movs	r3, #1
 80038ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe ff0d 	bl	800270c <HAL_GetTick>
 80038f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f6:	e009      	b.n	800390c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe ff08 	bl	800270c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e109      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
 800390c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003924:	601a      	str	r2, [r3, #0]
  return result;
 8003926:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800392a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0xc48>
 8003940:	4b01      	ldr	r3, [pc, #4]	; (8003948 <HAL_RCC_OscConfig+0xc44>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	e01e      	b.n	8003984 <HAL_RCC_OscConfig+0xc80>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fa93 f2a3 	rbit	r2, r3
 8003960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800396a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCC_OscConfig+0xe28>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003988:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800398c:	6011      	str	r1, [r2, #0]
 800398e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	fa92 f1a2 	rbit	r1, r2
 8003998:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800399c:	6011      	str	r1, [r2, #0]
  return result;
 800399e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	fab2 f282 	clz	r2, r2
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	f002 021f 	and.w	r2, r2, #31
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d09b      	beq.n	80038f8 <HAL_RCC_OscConfig+0xbf4>
 80039c0:	e0ad      	b.n	8003b1e <HAL_RCC_OscConfig+0xe1a>
 80039c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039da:	601a      	str	r2, [r3, #0]
  return result;
 80039dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fe88 	bl	800270c <HAL_GetTick>
 80039fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a00:	e009      	b.n	8003a16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fe fe83 	bl	800270c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e084      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
 8003a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f2a3 	rbit	r2, r3
 8003a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a2e:	601a      	str	r2, [r3, #0]
  return result;
 8003a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_OscConfig+0xd4c>
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <HAL_RCC_OscConfig+0xe28>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd84>
 8003a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f107 0320 	add.w	r3, r7, #32
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f107 031c 	add.w	r3, r7, #28
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f107 031c 	add.w	r3, r7, #28
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	fa93 f2a3 	rbit	r2, r3
 8003a7e:	f107 0318 	add.w	r3, r7, #24
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <HAL_RCC_OscConfig+0xe28>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f107 0214 	add.w	r2, r7, #20
 8003a8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a90:	6011      	str	r1, [r2, #0]
 8003a92:	f107 0214 	add.w	r2, r7, #20
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	fa92 f1a2 	rbit	r1, r2
 8003a9c:	f107 0210 	add.w	r2, r7, #16
 8003aa0:	6011      	str	r1, [r2, #0]
  return result;
 8003aa2:	f107 0210 	add.w	r2, r7, #16
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	fab2 f282 	clz	r2, r2
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	f042 0220 	orr.w	r2, r2, #32
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	f002 021f 	and.w	r2, r2, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d19e      	bne.n	8003a02 <HAL_RCC_OscConfig+0xcfe>
 8003ac4:	e02b      	b.n	8003b1e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e025      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_RCC_OscConfig+0xe28>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCC_OscConfig+0xe28>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ae4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ae8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d111      	bne.n	8003b1a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003af6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003afa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d108      	bne.n	8003b1a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b0c:	f003 020f 	and.w	r2, r3, #15
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b09e      	sub	sp, #120	; 0x78
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e162      	b.n	8003e0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b90      	ldr	r3, [pc, #576]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d910      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b8d      	ldr	r3, [pc, #564]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0207 	bic.w	r2, r3, #7
 8003b5e:	498b      	ldr	r1, [pc, #556]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e14a      	b.n	8003e0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b82      	ldr	r3, [pc, #520]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	497f      	ldr	r1, [pc, #508]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80dc 	beq.w	8003d5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d13c      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xf6>
 8003bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbc:	fab3 f383 	clz	r3, r3
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d102      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xa6>
 8003bd0:	4b6f      	ldr	r3, [pc, #444]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	e00f      	b.n	8003bf6 <HAL_RCC_ClockConfig+0xc6>
 8003bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	667b      	str	r3, [r7, #100]	; 0x64
 8003be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf2:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bfe:	fa92 f2a2 	rbit	r2, r2
 8003c02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c06:	fab2 f282 	clz	r2, r2
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	f042 0220 	orr.w	r2, r2, #32
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	f002 021f 	and.w	r2, r2, #31
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d17b      	bne.n	8003d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0f3      	b.n	8003e0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d13c      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x178>
 8003c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x128>
 8003c52:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e00f      	b.n	8003c78 <HAL_RCC_ClockConfig+0x148>
 8003c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	647b      	str	r3, [r7, #68]	; 0x44
 8003c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c74:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c80:	fa92 f2a2 	rbit	r2, r2
 8003c84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c88:	fab2 f282 	clz	r2, r2
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f042 0220 	orr.w	r2, r2, #32
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f002 021f 	and.w	r2, r2, #31
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d13a      	bne.n	8003d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0b2      	b.n	8003e0e <HAL_RCC_ClockConfig+0x2de>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1a0>
 8003cca:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	e00d      	b.n	8003cec <HAL_RCC_ClockConfig+0x1bc>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	2302      	movs	r3, #2
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	2202      	movs	r2, #2
 8003cee:	61ba      	str	r2, [r7, #24]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	fa92 f2a2 	rbit	r2, r2
 8003cf6:	617a      	str	r2, [r7, #20]
  return result;
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	fab2 f282 	clz	r2, r2
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	f042 0220 	orr.w	r2, r2, #32
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	f002 021f 	and.w	r2, r2, #31
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e079      	b.n	8003e0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	491a      	ldr	r1, [pc, #104]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d2c:	f7fe fcee 	bl	800270c <HAL_GetTick>
 8003d30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d34:	f7fe fcea 	bl	800270c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e061      	b.n	8003e0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_RCC_ClockConfig+0x260>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 020c 	and.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1eb      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d214      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	4906      	ldr	r1, [pc, #24]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_ClockConfig+0x25c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e040      	b.n	8003e0e <HAL_RCC_ClockConfig+0x2de>
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_RCC_ClockConfig+0x2e8>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	491a      	ldr	r1, [pc, #104]	; (8003e18 <HAL_RCC_ClockConfig+0x2e8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_RCC_ClockConfig+0x2e8>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4912      	ldr	r1, [pc, #72]	; (8003e18 <HAL_RCC_ClockConfig+0x2e8>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dd2:	f000 f829 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_RCC_ClockConfig+0x2e8>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de0:	22f0      	movs	r2, #240	; 0xf0
 8003de2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	fa92 f2a2 	rbit	r2, r2
 8003dea:	60fa      	str	r2, [r7, #12]
  return result;
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	fab2 f282 	clz	r2, r2
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	40d3      	lsrs	r3, r2
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_RCC_ClockConfig+0x2ec>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <HAL_RCC_ClockConfig+0x2f0>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_RCC_ClockConfig+0x2f4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fc3c 	bl	8002684 <HAL_InitTick>
  
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3778      	adds	r7, #120	; 0x78
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	0800aae8 	.word	0x0800aae8
 8003e20:	20000004 	.word	0x20000004
 8003e24:	20000008 	.word	0x20000008

08003e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b08b      	sub	sp, #44	; 0x2c
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x30>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x36>
 8003e56:	e03f      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e5a:	623b      	str	r3, [r7, #32]
      break;
 8003e5c:	e03f      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	fa92 f2a2 	rbit	r2, r2
 8003e70:	607a      	str	r2, [r7, #4]
  return result;
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	fab2 f282 	clz	r2, r2
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	40d3      	lsrs	r3, r2
 8003e7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e82:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	220f      	movs	r2, #15
 8003e8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	fa92 f2a2 	rbit	r2, r2
 8003e94:	60fa      	str	r2, [r7, #12]
  return result;
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	fab2 f282 	clz	r2, r2
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	40d3      	lsrs	r3, r2
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003eb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e007      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ec2:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	fb02 f303 	mul.w	r3, r2, r3
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	623b      	str	r3, [r7, #32]
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eda:	623b      	str	r3, [r7, #32]
      break;
 8003edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ede:	6a3b      	ldr	r3, [r7, #32]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	372c      	adds	r7, #44	; 0x2c
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	007a1200 	.word	0x007a1200
 8003ef4:	0800ab00 	.word	0x0800ab00
 8003ef8:	0800ab10 	.word	0x0800ab10

08003efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f1a:	f7ff ffef 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f1e:	4601      	mov	r1, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	fa92 f2a2 	rbit	r2, r2
 8003f34:	603a      	str	r2, [r7, #0]
  return result;
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	40d3      	lsrs	r3, r2
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	0800aaf8 	.word	0x0800aaf8

08003f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f5e:	f7ff ffcd 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f62:	4601      	mov	r1, r0
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	fa92 f2a2 	rbit	r2, r2
 8003f78:	603a      	str	r2, [r7, #0]
  return result;
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	40d3      	lsrs	r3, r2
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f86:	5cd3      	ldrb	r3, [r2, r3]
 8003f88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000
 8003f98:	0800aaf8 	.word	0x0800aaf8

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b092      	sub	sp, #72	; 0x48
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80d4 	beq.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc0:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10e      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	61d3      	str	r3, [r2, #28]
 8003fd8:	4b48      	ldr	r3, [pc, #288]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b45      	ldr	r3, [pc, #276]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d118      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff6:	4b42      	ldr	r3, [pc, #264]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a41      	ldr	r2, [pc, #260]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004002:	f7fe fb83 	bl	800270c <HAL_GetTick>
 8004006:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fe fb7f 	bl	800270c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b64      	cmp	r3, #100	; 0x64
 8004016:	d901      	bls.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e1d6      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	4b38      	ldr	r3, [pc, #224]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004028:	4b34      	ldr	r3, [pc, #208]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004030:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8084 	beq.w	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004044:	429a      	cmp	r2, r3
 8004046:	d07c      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004062:	fab3 f383 	clz	r3, r3
 8004066:	b2db      	uxtb	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	461a      	mov	r2, r3
 8004072:	2301      	movs	r3, #1
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	fa93 f3a3 	rbit	r3, r3
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800409a:	4a18      	ldr	r2, [pc, #96]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d04b      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fe fb2f 	bl	800270c <HAL_GetTick>
 80040ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fe fb2b 	bl	800270c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e180      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040c8:	2302      	movs	r3, #2
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	2302      	movs	r3, #2
 80040d6:	623b      	str	r3, [r7, #32]
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	61fb      	str	r3, [r7, #28]
  return result;
 80040e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d108      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040f6:	4b01      	ldr	r3, [pc, #4]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	e00d      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	10908100 	.word	0x10908100
 8004108:	2302      	movs	r3, #2
 800410a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	4ba0      	ldr	r3, [pc, #640]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2202      	movs	r2, #2
 800411a:	613a      	str	r2, [r7, #16]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	fa92 f2a2 	rbit	r2, r2
 8004122:	60fa      	str	r2, [r7, #12]
  return result;
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	fab2 f282 	clz	r2, r2
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	f002 021f 	and.w	r2, r2, #31
 8004136:	2101      	movs	r1, #1
 8004138:	fa01 f202 	lsl.w	r2, r1, r2
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0b7      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004142:	4b95      	ldr	r3, [pc, #596]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4992      	ldr	r1, [pc, #584]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004154:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415c:	4b8e      	ldr	r3, [pc, #568]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4a8d      	ldr	r2, [pc, #564]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004166:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004174:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	f023 0203 	bic.w	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4985      	ldr	r1, [pc, #532]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004192:	4b81      	ldr	r3, [pc, #516]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	497e      	ldr	r1, [pc, #504]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041b0:	4b79      	ldr	r3, [pc, #484]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	4976      	ldr	r1, [pc, #472]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ce:	4b72      	ldr	r3, [pc, #456]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f023 0210 	bic.w	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	496f      	ldr	r1, [pc, #444]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041ec:	4b6a      	ldr	r3, [pc, #424]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	4967      	ldr	r1, [pc, #412]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f023 0220 	bic.w	r2, r3, #32
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4960      	ldr	r1, [pc, #384]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004228:	4b5b      	ldr	r3, [pc, #364]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	4958      	ldr	r1, [pc, #352]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004246:	4b54      	ldr	r3, [pc, #336]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4951      	ldr	r1, [pc, #324]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004264:	4b4c      	ldr	r3, [pc, #304]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4949      	ldr	r1, [pc, #292]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004282:	4b45      	ldr	r3, [pc, #276]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4942      	ldr	r1, [pc, #264]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042a0:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	493a      	ldr	r1, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	4933      	ldr	r1, [pc, #204]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042dc:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	492b      	ldr	r1, [pc, #172]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042fa:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4924      	ldr	r1, [pc, #144]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	491c      	ldr	r1, [pc, #112]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004336:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	4915      	ldr	r1, [pc, #84]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	490d      	ldr	r1, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	4906      	ldr	r1, [pc, #24]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004390:	4b01      	ldr	r3, [pc, #4]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	e002      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a4:	490b      	ldr	r1, [pc, #44]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	4904      	ldr	r1, [pc, #16]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3748      	adds	r7, #72	; 0x48
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000

080043d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e09d      	b.n	8004526 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d108      	bne.n	8004404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fa:	d009      	beq.n	8004410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
 8004402:	e005      	b.n	8004410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fe4c 	bl	80020c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004446:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004450:	d902      	bls.n	8004458 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e002      	b.n	800445e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800445c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004466:	d007      	beq.n	8004478 <HAL_SPI_Init+0xa0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004470:	d002      	beq.n	8004478 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	ea42 0103 	orr.w	r1, r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	0c1b      	lsrs	r3, r3, #16
 80044d4:	f003 0204 	and.w	r2, r3, #4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044f4:	ea42 0103 	orr.w	r1, r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004514:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b088      	sub	sp, #32
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_SPI_Transmit+0x22>
 800454c:	2302      	movs	r3, #2
 800454e:	e158      	b.n	8004802 <HAL_SPI_Transmit+0x2d4>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004558:	f7fe f8d8 	bl	800270c <HAL_GetTick>
 800455c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d002      	beq.n	8004574 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800456e:	2302      	movs	r3, #2
 8004570:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004572:	e13d      	b.n	80047f0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_SPI_Transmit+0x52>
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004584:	e134      	b.n	80047f0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2203      	movs	r2, #3
 800458a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	88fa      	ldrh	r2, [r7, #6]
 80045a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d0:	d10f      	bne.n	80045f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d007      	beq.n	8004610 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004618:	d94b      	bls.n	80046b2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_SPI_Transmit+0xfa>
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d13e      	bne.n	80046a6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800464c:	e02b      	b.n	80046a6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b02      	cmp	r3, #2
 800465a:	d112      	bne.n	8004682 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004680:	e011      	b.n	80046a6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004682:	f7fe f843 	bl	800270c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d803      	bhi.n	800469a <HAL_SPI_Transmit+0x16c>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d102      	bne.n	80046a0 <HAL_SPI_Transmit+0x172>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a4:	e0a4      	b.n	80047f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ce      	bne.n	800464e <HAL_SPI_Transmit+0x120>
 80046b0:	e07c      	b.n	80047ac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_SPI_Transmit+0x192>
 80046ba:	8afb      	ldrh	r3, [r7, #22]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d170      	bne.n	80047a2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d912      	bls.n	80046f0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	881a      	ldrh	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	1c9a      	adds	r2, r3, #2
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b02      	subs	r3, #2
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ee:	e058      	b.n	80047a2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004716:	e044      	b.n	80047a2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d12b      	bne.n	800477e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d912      	bls.n	8004756 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b02      	subs	r3, #2
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004754:	e025      	b.n	80047a2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800477c:	e011      	b.n	80047a2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800477e:	f7fd ffc5 	bl	800270c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d803      	bhi.n	8004796 <HAL_SPI_Transmit+0x268>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d102      	bne.n	800479c <HAL_SPI_Transmit+0x26e>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047a0:	e026      	b.n	80047f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1b5      	bne.n	8004718 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f957 	bl	8004a64 <SPI_EndRxTxTransaction>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e000      	b.n	80047f0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80047ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004800:	7ffb      	ldrb	r3, [r7, #31]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004818:	b2db      	uxtb	r3, r3
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004838:	f7fd ff68 	bl	800270c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	4413      	add	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004848:	f7fd ff60 	bl	800270c <HAL_GetTick>
 800484c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800484e:	4b39      	ldr	r3, [pc, #228]	; (8004934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	0d1b      	lsrs	r3, r3, #20
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	fb02 f303 	mul.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	e054      	b.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d050      	beq.n	800490a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004868:	f7fd ff50 	bl	800270c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d902      	bls.n	800487e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d13d      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800488c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004896:	d111      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	d004      	beq.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d107      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d10f      	bne.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e017      	b.n	800492a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3b01      	subs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d19b      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000004 	.word	0x20000004

08004938 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800494a:	f7fd fedf 	bl	800270c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	4413      	add	r3, r2
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800495a:	f7fd fed7 	bl	800270c <HAL_GetTick>
 800495e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004968:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	00da      	lsls	r2, r3, #3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	0d1b      	lsrs	r3, r3, #20
 8004978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004980:	e060      	b.n	8004a44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004988:	d107      	bne.n	800499a <SPI_WaitFifoStateUntilTimeout+0x62>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004998:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d050      	beq.n	8004a44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049a2:	f7fd feb3 	bl	800270c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d902      	bls.n	80049b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d13d      	bne.n	8004a34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d0:	d111      	bne.n	80049f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049da:	d004      	beq.n	80049e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d107      	bne.n	80049f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fe:	d10f      	bne.n	8004a20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e010      	b.n	8004a56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d196      	bne.n	8004982 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3728      	adds	r7, #40	; 0x28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000004 	.word	0x20000004

08004a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ff5b 	bl	8004938 <SPI_WaitFifoStateUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e027      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2180      	movs	r1, #128	; 0x80
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fec0 	bl	8004828 <SPI_WaitFlagStateUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e014      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ff34 	bl	8004938 <SPI_WaitFifoStateUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e000      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e049      	b.n	8004b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fcdc 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f000 fac0 	bl	80050b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d001      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e04f      	b.n	8004c58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0x76>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d018      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0x76>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0x76>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <HAL_TIM_Base_Start_IT+0xcc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0x76>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0x76>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIM_Base_Start_IT+0x76>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d115      	bne.n	8004c42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	d015      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0xb4>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2e:	d011      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c40:	e008      	b.n	8004c54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e000      	b.n	8004c56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40013400 	.word	0x40013400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40015000 	.word	0x40015000
 8004c7c:	00010007 	.word	0x00010007

08004c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d122      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0202 	mvn.w	r2, #2
 8004cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9d8 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9ca 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f9db 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d122      	bne.n	8004d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d11b      	bne.n	8004d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0204 	mvn.w	r2, #4
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f9ae 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9a0 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f9b1 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d122      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d11b      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0208 	mvn.w	r2, #8
 8004d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2204      	movs	r2, #4
 8004d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f984 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f976 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f987 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d122      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d11b      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0210 	mvn.w	r2, #16
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2208      	movs	r2, #8
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f95a 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f94c 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f95d 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10e      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d107      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0201 	mvn.w	r2, #1
 8004dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f926 	bl	8005050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d10e      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b80      	cmp	r3, #128	; 0x80
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fb10 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3e:	d10e      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d107      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb03 	bl	8005464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d10e      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d107      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f90b 	bl	80050a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d10e      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d107      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f06f 0220 	mvn.w	r2, #32
 8004eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fac3 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_ConfigClockSource+0x1c>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e0b6      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x18a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004efc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	d03e      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xd8>
 8004f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1c:	f200 8087 	bhi.w	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	f000 8086 	beq.w	8005034 <HAL_TIM_ConfigClockSource+0x176>
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2c:	d87f      	bhi.n	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f2e:	2b70      	cmp	r3, #112	; 0x70
 8004f30:	d01a      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0xaa>
 8004f32:	2b70      	cmp	r3, #112	; 0x70
 8004f34:	d87b      	bhi.n	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f36:	2b60      	cmp	r3, #96	; 0x60
 8004f38:	d050      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x11e>
 8004f3a:	2b60      	cmp	r3, #96	; 0x60
 8004f3c:	d877      	bhi.n	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f3e:	2b50      	cmp	r3, #80	; 0x50
 8004f40:	d03c      	beq.n	8004fbc <HAL_TIM_ConfigClockSource+0xfe>
 8004f42:	2b50      	cmp	r3, #80	; 0x50
 8004f44:	d873      	bhi.n	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d058      	beq.n	8004ffc <HAL_TIM_ConfigClockSource+0x13e>
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d86f      	bhi.n	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f4e:	2b30      	cmp	r3, #48	; 0x30
 8004f50:	d064      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x15e>
 8004f52:	2b30      	cmp	r3, #48	; 0x30
 8004f54:	d86b      	bhi.n	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d060      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x15e>
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d867      	bhi.n	800502e <HAL_TIM_ConfigClockSource+0x170>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d05c      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x15e>
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d05a      	beq.n	800501c <HAL_TIM_ConfigClockSource+0x15e>
 8004f66:	e062      	b.n	800502e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6899      	ldr	r1, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f000 f9b4 	bl	80052e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
      break;
 8004f94:	e04f      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f000 f99d 	bl	80052e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb8:	609a      	str	r2, [r3, #8]
      break;
 8004fba:	e03c      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f000 f911 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2150      	movs	r1, #80	; 0x50
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f96a 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004fda:	e02c      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f000 f930 	bl	800524e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2160      	movs	r1, #96	; 0x60
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f95a 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004ffa:	e01c      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	461a      	mov	r2, r3
 800500a:	f000 f8f1 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2140      	movs	r1, #64	; 0x40
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f94a 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 800501a:	e00c      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 f941 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 800502c:	e003      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	e000      	b.n	8005036 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005034:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a42      	ldr	r2, [pc, #264]	; (80051d0 <TIM_Base_SetConfig+0x11c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d00f      	beq.n	80050f4 <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3f      	ldr	r2, [pc, #252]	; (80051d4 <TIM_Base_SetConfig+0x120>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00b      	beq.n	80050f4 <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3e      	ldr	r2, [pc, #248]	; (80051d8 <TIM_Base_SetConfig+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3d      	ldr	r2, [pc, #244]	; (80051dc <TIM_Base_SetConfig+0x128>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3c      	ldr	r2, [pc, #240]	; (80051e0 <TIM_Base_SetConfig+0x12c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a31      	ldr	r2, [pc, #196]	; (80051d0 <TIM_Base_SetConfig+0x11c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01f      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d01b      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2e      	ldr	r2, [pc, #184]	; (80051d4 <TIM_Base_SetConfig+0x120>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d017      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2d      	ldr	r2, [pc, #180]	; (80051d8 <TIM_Base_SetConfig+0x124>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <TIM_Base_SetConfig+0x128>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00f      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <TIM_Base_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <TIM_Base_SetConfig+0x134>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <TIM_Base_SetConfig+0x138>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <TIM_Base_SetConfig+0x12c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <TIM_Base_SetConfig+0x11c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <TIM_Base_SetConfig+0x100>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <TIM_Base_SetConfig+0x128>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_Base_SetConfig+0x100>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <TIM_Base_SetConfig+0x130>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_Base_SetConfig+0x100>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <TIM_Base_SetConfig+0x134>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_Base_SetConfig+0x100>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a11      	ldr	r2, [pc, #68]	; (80051ec <TIM_Base_SetConfig+0x138>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0x100>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <TIM_Base_SetConfig+0x12c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40013400 	.word	0x40013400
 80051e0:	40015000 	.word	0x40015000
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800

080051f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 030a 	bic.w	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524e:	b480      	push	{r7}
 8005250:	b087      	sub	sp, #28
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0210 	bic.w	r2, r3, #16
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800528a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e06d      	b.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a30      	ldr	r2, [pc, #192]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d009      	beq.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2f      	ldr	r2, [pc, #188]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d004      	beq.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2d      	ldr	r2, [pc, #180]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005380:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d01d      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b8:	d018      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00e      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a11      	ldr	r2, [pc, #68]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40013400 	.word	0x40013400
 800542c:	40015000 	.word	0x40015000
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40014000 	.word	0x40014000

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e040      	b.n	800550c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd f870 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f82c 	bl	8005514 <UART_SetConfig>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e022      	b.n	800550c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f9f6 	bl	80058c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa7d 	bl	8005a04 <UART_CheckIdleState>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4bab      	ldr	r3, [pc, #684]	; (80057ec <UART_SetConfig+0x2d8>)
 8005540:	4013      	ands	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	6979      	ldr	r1, [r7, #20]
 8005548:	430b      	orrs	r3, r1
 800554a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a99      	ldr	r2, [pc, #612]	; (80057f0 <UART_SetConfig+0x2dc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d120      	bne.n	80055d2 <UART_SetConfig+0xbe>
 8005590:	4b98      	ldr	r3, [pc, #608]	; (80057f4 <UART_SetConfig+0x2e0>)
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b03      	cmp	r3, #3
 800559a:	d817      	bhi.n	80055cc <UART_SetConfig+0xb8>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0x90>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055c1 	.word	0x080055c1
 80055ac:	080055c7 	.word	0x080055c7
 80055b0:	080055bb 	.word	0x080055bb
 80055b4:	2301      	movs	r3, #1
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e0b5      	b.n	8005726 <UART_SetConfig+0x212>
 80055ba:	2302      	movs	r3, #2
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e0b2      	b.n	8005726 <UART_SetConfig+0x212>
 80055c0:	2304      	movs	r3, #4
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e0af      	b.n	8005726 <UART_SetConfig+0x212>
 80055c6:	2308      	movs	r3, #8
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e0ac      	b.n	8005726 <UART_SetConfig+0x212>
 80055cc:	2310      	movs	r3, #16
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e0a9      	b.n	8005726 <UART_SetConfig+0x212>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a88      	ldr	r2, [pc, #544]	; (80057f8 <UART_SetConfig+0x2e4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d124      	bne.n	8005626 <UART_SetConfig+0x112>
 80055dc:	4b85      	ldr	r3, [pc, #532]	; (80057f4 <UART_SetConfig+0x2e0>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055e8:	d011      	beq.n	800560e <UART_SetConfig+0xfa>
 80055ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ee:	d817      	bhi.n	8005620 <UART_SetConfig+0x10c>
 80055f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f4:	d011      	beq.n	800561a <UART_SetConfig+0x106>
 80055f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fa:	d811      	bhi.n	8005620 <UART_SetConfig+0x10c>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <UART_SetConfig+0xf4>
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d006      	beq.n	8005614 <UART_SetConfig+0x100>
 8005606:	e00b      	b.n	8005620 <UART_SetConfig+0x10c>
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e08b      	b.n	8005726 <UART_SetConfig+0x212>
 800560e:	2302      	movs	r3, #2
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e088      	b.n	8005726 <UART_SetConfig+0x212>
 8005614:	2304      	movs	r3, #4
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e085      	b.n	8005726 <UART_SetConfig+0x212>
 800561a:	2308      	movs	r3, #8
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e082      	b.n	8005726 <UART_SetConfig+0x212>
 8005620:	2310      	movs	r3, #16
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e07f      	b.n	8005726 <UART_SetConfig+0x212>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a74      	ldr	r2, [pc, #464]	; (80057fc <UART_SetConfig+0x2e8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d124      	bne.n	800567a <UART_SetConfig+0x166>
 8005630:	4b70      	ldr	r3, [pc, #448]	; (80057f4 <UART_SetConfig+0x2e0>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005638:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800563c:	d011      	beq.n	8005662 <UART_SetConfig+0x14e>
 800563e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005642:	d817      	bhi.n	8005674 <UART_SetConfig+0x160>
 8005644:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005648:	d011      	beq.n	800566e <UART_SetConfig+0x15a>
 800564a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800564e:	d811      	bhi.n	8005674 <UART_SetConfig+0x160>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <UART_SetConfig+0x148>
 8005654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005658:	d006      	beq.n	8005668 <UART_SetConfig+0x154>
 800565a:	e00b      	b.n	8005674 <UART_SetConfig+0x160>
 800565c:	2300      	movs	r3, #0
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e061      	b.n	8005726 <UART_SetConfig+0x212>
 8005662:	2302      	movs	r3, #2
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e05e      	b.n	8005726 <UART_SetConfig+0x212>
 8005668:	2304      	movs	r3, #4
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e05b      	b.n	8005726 <UART_SetConfig+0x212>
 800566e:	2308      	movs	r3, #8
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e058      	b.n	8005726 <UART_SetConfig+0x212>
 8005674:	2310      	movs	r3, #16
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e055      	b.n	8005726 <UART_SetConfig+0x212>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a60      	ldr	r2, [pc, #384]	; (8005800 <UART_SetConfig+0x2ec>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d124      	bne.n	80056ce <UART_SetConfig+0x1ba>
 8005684:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <UART_SetConfig+0x2e0>)
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800568c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005690:	d011      	beq.n	80056b6 <UART_SetConfig+0x1a2>
 8005692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005696:	d817      	bhi.n	80056c8 <UART_SetConfig+0x1b4>
 8005698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569c:	d011      	beq.n	80056c2 <UART_SetConfig+0x1ae>
 800569e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a2:	d811      	bhi.n	80056c8 <UART_SetConfig+0x1b4>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <UART_SetConfig+0x19c>
 80056a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ac:	d006      	beq.n	80056bc <UART_SetConfig+0x1a8>
 80056ae:	e00b      	b.n	80056c8 <UART_SetConfig+0x1b4>
 80056b0:	2300      	movs	r3, #0
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e037      	b.n	8005726 <UART_SetConfig+0x212>
 80056b6:	2302      	movs	r3, #2
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e034      	b.n	8005726 <UART_SetConfig+0x212>
 80056bc:	2304      	movs	r3, #4
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e031      	b.n	8005726 <UART_SetConfig+0x212>
 80056c2:	2308      	movs	r3, #8
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e02e      	b.n	8005726 <UART_SetConfig+0x212>
 80056c8:	2310      	movs	r3, #16
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e02b      	b.n	8005726 <UART_SetConfig+0x212>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a4c      	ldr	r2, [pc, #304]	; (8005804 <UART_SetConfig+0x2f0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d124      	bne.n	8005722 <UART_SetConfig+0x20e>
 80056d8:	4b46      	ldr	r3, [pc, #280]	; (80057f4 <UART_SetConfig+0x2e0>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80056e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056e4:	d011      	beq.n	800570a <UART_SetConfig+0x1f6>
 80056e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056ea:	d817      	bhi.n	800571c <UART_SetConfig+0x208>
 80056ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f0:	d011      	beq.n	8005716 <UART_SetConfig+0x202>
 80056f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f6:	d811      	bhi.n	800571c <UART_SetConfig+0x208>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <UART_SetConfig+0x1f0>
 80056fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005700:	d006      	beq.n	8005710 <UART_SetConfig+0x1fc>
 8005702:	e00b      	b.n	800571c <UART_SetConfig+0x208>
 8005704:	2300      	movs	r3, #0
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e00d      	b.n	8005726 <UART_SetConfig+0x212>
 800570a:	2302      	movs	r3, #2
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e00a      	b.n	8005726 <UART_SetConfig+0x212>
 8005710:	2304      	movs	r3, #4
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e007      	b.n	8005726 <UART_SetConfig+0x212>
 8005716:	2308      	movs	r3, #8
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e004      	b.n	8005726 <UART_SetConfig+0x212>
 800571c:	2310      	movs	r3, #16
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e001      	b.n	8005726 <UART_SetConfig+0x212>
 8005722:	2310      	movs	r3, #16
 8005724:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572e:	d16d      	bne.n	800580c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8005730:	7ffb      	ldrb	r3, [r7, #31]
 8005732:	2b08      	cmp	r3, #8
 8005734:	d827      	bhi.n	8005786 <UART_SetConfig+0x272>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x228>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	08005787 	.word	0x08005787
 800574c:	08005777 	.word	0x08005777
 8005750:	08005787 	.word	0x08005787
 8005754:	08005787 	.word	0x08005787
 8005758:	08005787 	.word	0x08005787
 800575c:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005760:	f7fe fbd8 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e013      	b.n	8005790 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7fe fbf6 	bl	8003f58 <HAL_RCC_GetPCLK2Freq>
 800576c:	61b8      	str	r0, [r7, #24]
        break;
 800576e:	e00f      	b.n	8005790 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <UART_SetConfig+0x2f4>)
 8005772:	61bb      	str	r3, [r7, #24]
        break;
 8005774:	e00c      	b.n	8005790 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7fe fb57 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 800577a:	61b8      	str	r0, [r7, #24]
        break;
 800577c:	e008      	b.n	8005790 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005782:	61bb      	str	r3, [r7, #24]
        break;
 8005784:	e004      	b.n	8005790 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	77bb      	strb	r3, [r7, #30]
        break;
 800578e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8086 	beq.w	80058a4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	005a      	lsls	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	441a      	add	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b0f      	cmp	r3, #15
 80057b4:	d916      	bls.n	80057e4 <UART_SetConfig+0x2d0>
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d212      	bcs.n	80057e4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f023 030f 	bic.w	r3, r3, #15
 80057c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	89fb      	ldrh	r3, [r7, #14]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	89fa      	ldrh	r2, [r7, #14]
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	e05f      	b.n	80058a4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	77bb      	strb	r3, [r7, #30]
 80057e8:	e05c      	b.n	80058a4 <UART_SetConfig+0x390>
 80057ea:	bf00      	nop
 80057ec:	efff69f3 	.word	0xefff69f3
 80057f0:	40013800 	.word	0x40013800
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40004400 	.word	0x40004400
 80057fc:	40004800 	.word	0x40004800
 8005800:	40004c00 	.word	0x40004c00
 8005804:	40005000 	.word	0x40005000
 8005808:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800580c:	7ffb      	ldrb	r3, [r7, #31]
 800580e:	2b08      	cmp	r3, #8
 8005810:	d827      	bhi.n	8005862 <UART_SetConfig+0x34e>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <UART_SetConfig+0x304>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800583d 	.word	0x0800583d
 800581c:	08005845 	.word	0x08005845
 8005820:	0800584d 	.word	0x0800584d
 8005824:	08005863 	.word	0x08005863
 8005828:	08005853 	.word	0x08005853
 800582c:	08005863 	.word	0x08005863
 8005830:	08005863 	.word	0x08005863
 8005834:	08005863 	.word	0x08005863
 8005838:	0800585b 	.word	0x0800585b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800583c:	f7fe fb6a 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005840:	61b8      	str	r0, [r7, #24]
        break;
 8005842:	e013      	b.n	800586c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005844:	f7fe fb88 	bl	8003f58 <HAL_RCC_GetPCLK2Freq>
 8005848:	61b8      	str	r0, [r7, #24]
        break;
 800584a:	e00f      	b.n	800586c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <UART_SetConfig+0x3a8>)
 800584e:	61bb      	str	r3, [r7, #24]
        break;
 8005850:	e00c      	b.n	800586c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005852:	f7fe fae9 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8005856:	61b8      	str	r0, [r7, #24]
        break;
 8005858:	e008      	b.n	800586c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800585e:	61bb      	str	r3, [r7, #24]
        break;
 8005860:	e004      	b.n	800586c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	77bb      	strb	r3, [r7, #30]
        break;
 800586a:	bf00      	nop
    }

    if (pclk != 0U)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d018      	beq.n	80058a4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	085a      	lsrs	r2, r3, #1
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	441a      	add	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	b29b      	uxth	r3, r3
 8005886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b0f      	cmp	r3, #15
 800588c:	d908      	bls.n	80058a0 <UART_SetConfig+0x38c>
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005894:	d204      	bcs.n	80058a0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	e001      	b.n	80058a4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	007a1200 	.word	0x007a1200

080058c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01a      	beq.n	80059d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059be:	d10a      	bne.n	80059d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a14:	f7fc fe7a 	bl	800270c <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d10e      	bne.n	8005a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f82d 	bl	8005a96 <UART_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e023      	b.n	8005a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d10e      	bne.n	8005a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f817 	bl	8005a96 <UART_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e00d      	b.n	8005a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b09c      	sub	sp, #112	; 0x70
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa6:	e0a5      	b.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	f000 80a1 	beq.w	8005bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab2:	f7fc fe2b 	bl	800270c <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d13e      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005adc:	667b      	str	r3, [r7, #100]	; 0x64
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005aec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e6      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	663b      	str	r3, [r7, #96]	; 0x60
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e5      	bne.n	8005afa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e067      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d04f      	beq.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b62:	d147      	bne.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bc0:	623a      	str	r2, [r7, #32]
 8005bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	69f9      	ldr	r1, [r7, #28]
 8005bc6:	6a3a      	ldr	r2, [r7, #32]
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e010      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69da      	ldr	r2, [r3, #28]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	f43f af4a 	beq.w	8005aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3770      	adds	r7, #112	; 0x70
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <__errno>:
 8005c20:	4b01      	ldr	r3, [pc, #4]	; (8005c28 <__errno+0x8>)
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000010 	.word	0x20000010

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4d0d      	ldr	r5, [pc, #52]	; (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	; (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1b64      	subs	r4, r4, r5
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2600      	movs	r6, #0
 8005c38:	42a6      	cmp	r6, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4d0b      	ldr	r5, [pc, #44]	; (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	; (8005c70 <__libc_init_array+0x44>)
 8005c40:	f004 fc46 	bl	800a4d0 <_init>
 8005c44:	1b64      	subs	r4, r4, r5
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2600      	movs	r6, #0
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c54:	4798      	blx	r3
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c5e:	4798      	blx	r3
 8005c60:	3601      	adds	r6, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	0800afd4 	.word	0x0800afd4
 8005c68:	0800afd4 	.word	0x0800afd4
 8005c6c:	0800afd4 	.word	0x0800afd4
 8005c70:	0800afd8 	.word	0x0800afd8

08005c74 <memset>:
 8005c74:	4402      	add	r2, r0
 8005c76:	4603      	mov	r3, r0
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d100      	bne.n	8005c7e <memset+0xa>
 8005c7c:	4770      	bx	lr
 8005c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c82:	e7f9      	b.n	8005c78 <memset+0x4>

08005c84 <__cvt>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	ec55 4b10 	vmov	r4, r5, d0
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	460e      	mov	r6, r1
 8005c90:	4619      	mov	r1, r3
 8005c92:	462b      	mov	r3, r5
 8005c94:	bfbb      	ittet	lt
 8005c96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c9a:	461d      	movlt	r5, r3
 8005c9c:	2300      	movge	r3, #0
 8005c9e:	232d      	movlt	r3, #45	; 0x2d
 8005ca0:	700b      	strb	r3, [r1, #0]
 8005ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ca8:	4691      	mov	r9, r2
 8005caa:	f023 0820 	bic.w	r8, r3, #32
 8005cae:	bfbc      	itt	lt
 8005cb0:	4622      	movlt	r2, r4
 8005cb2:	4614      	movlt	r4, r2
 8005cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cb8:	d005      	beq.n	8005cc6 <__cvt+0x42>
 8005cba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cbe:	d100      	bne.n	8005cc2 <__cvt+0x3e>
 8005cc0:	3601      	adds	r6, #1
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	e000      	b.n	8005cc8 <__cvt+0x44>
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	ab03      	add	r3, sp, #12
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	ab02      	add	r3, sp, #8
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	ec45 4b10 	vmov	d0, r4, r5
 8005cd4:	4653      	mov	r3, sl
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	f001 fdb6 	bl	8007848 <_dtoa_r>
 8005cdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	d102      	bne.n	8005cea <__cvt+0x66>
 8005ce4:	f019 0f01 	tst.w	r9, #1
 8005ce8:	d022      	beq.n	8005d30 <__cvt+0xac>
 8005cea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cee:	eb07 0906 	add.w	r9, r7, r6
 8005cf2:	d110      	bne.n	8005d16 <__cvt+0x92>
 8005cf4:	783b      	ldrb	r3, [r7, #0]
 8005cf6:	2b30      	cmp	r3, #48	; 0x30
 8005cf8:	d10a      	bne.n	8005d10 <__cvt+0x8c>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	f7fa fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d06:	b918      	cbnz	r0, 8005d10 <__cvt+0x8c>
 8005d08:	f1c6 0601 	rsb	r6, r6, #1
 8005d0c:	f8ca 6000 	str.w	r6, [sl]
 8005d10:	f8da 3000 	ldr.w	r3, [sl]
 8005d14:	4499      	add	r9, r3
 8005d16:	2200      	movs	r2, #0
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	f7fa fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d22:	b108      	cbz	r0, 8005d28 <__cvt+0xa4>
 8005d24:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d28:	2230      	movs	r2, #48	; 0x30
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	454b      	cmp	r3, r9
 8005d2e:	d307      	bcc.n	8005d40 <__cvt+0xbc>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d34:	1bdb      	subs	r3, r3, r7
 8005d36:	4638      	mov	r0, r7
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	b004      	add	sp, #16
 8005d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d40:	1c59      	adds	r1, r3, #1
 8005d42:	9103      	str	r1, [sp, #12]
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e7f0      	b.n	8005d2a <__cvt+0xa6>

08005d48 <__exponent>:
 8005d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	bfb8      	it	lt
 8005d50:	4249      	neglt	r1, r1
 8005d52:	f803 2b02 	strb.w	r2, [r3], #2
 8005d56:	bfb4      	ite	lt
 8005d58:	222d      	movlt	r2, #45	; 0x2d
 8005d5a:	222b      	movge	r2, #43	; 0x2b
 8005d5c:	2909      	cmp	r1, #9
 8005d5e:	7042      	strb	r2, [r0, #1]
 8005d60:	dd2a      	ble.n	8005db8 <__exponent+0x70>
 8005d62:	f10d 0407 	add.w	r4, sp, #7
 8005d66:	46a4      	mov	ip, r4
 8005d68:	270a      	movs	r7, #10
 8005d6a:	46a6      	mov	lr, r4
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d72:	fb07 1516 	mls	r5, r7, r6, r1
 8005d76:	3530      	adds	r5, #48	; 0x30
 8005d78:	2a63      	cmp	r2, #99	; 0x63
 8005d7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d82:	4631      	mov	r1, r6
 8005d84:	dcf1      	bgt.n	8005d6a <__exponent+0x22>
 8005d86:	3130      	adds	r1, #48	; 0x30
 8005d88:	f1ae 0502 	sub.w	r5, lr, #2
 8005d8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d90:	1c44      	adds	r4, r0, #1
 8005d92:	4629      	mov	r1, r5
 8005d94:	4561      	cmp	r1, ip
 8005d96:	d30a      	bcc.n	8005dae <__exponent+0x66>
 8005d98:	f10d 0209 	add.w	r2, sp, #9
 8005d9c:	eba2 020e 	sub.w	r2, r2, lr
 8005da0:	4565      	cmp	r5, ip
 8005da2:	bf88      	it	hi
 8005da4:	2200      	movhi	r2, #0
 8005da6:	4413      	add	r3, r2
 8005da8:	1a18      	subs	r0, r3, r0
 8005daa:	b003      	add	sp, #12
 8005dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005db2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005db6:	e7ed      	b.n	8005d94 <__exponent+0x4c>
 8005db8:	2330      	movs	r3, #48	; 0x30
 8005dba:	3130      	adds	r1, #48	; 0x30
 8005dbc:	7083      	strb	r3, [r0, #2]
 8005dbe:	70c1      	strb	r1, [r0, #3]
 8005dc0:	1d03      	adds	r3, r0, #4
 8005dc2:	e7f1      	b.n	8005da8 <__exponent+0x60>

08005dc4 <_printf_float>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	ed2d 8b02 	vpush	{d8}
 8005dcc:	b08d      	sub	sp, #52	; 0x34
 8005dce:	460c      	mov	r4, r1
 8005dd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	4605      	mov	r5, r0
 8005dda:	f002 fe91 	bl	8008b00 <_localeconv_r>
 8005dde:	f8d0 a000 	ldr.w	sl, [r0]
 8005de2:	4650      	mov	r0, sl
 8005de4:	f7fa f9fc 	bl	80001e0 <strlen>
 8005de8:	2300      	movs	r3, #0
 8005dea:	930a      	str	r3, [sp, #40]	; 0x28
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	9305      	str	r3, [sp, #20]
 8005df0:	f8d8 3000 	ldr.w	r3, [r8]
 8005df4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005df8:	3307      	adds	r3, #7
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	f103 0208 	add.w	r2, r3, #8
 8005e02:	f8c8 2000 	str.w	r2, [r8]
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e16:	9307      	str	r3, [sp, #28]
 8005e18:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e1c:	ee08 0a10 	vmov	s16, r0
 8005e20:	4b9f      	ldr	r3, [pc, #636]	; (80060a0 <_printf_float+0x2dc>)
 8005e22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	f7fa fe87 	bl	8000b3c <__aeabi_dcmpun>
 8005e2e:	bb88      	cbnz	r0, 8005e94 <_printf_float+0xd0>
 8005e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e34:	4b9a      	ldr	r3, [pc, #616]	; (80060a0 <_printf_float+0x2dc>)
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3a:	f7fa fe61 	bl	8000b00 <__aeabi_dcmple>
 8005e3e:	bb48      	cbnz	r0, 8005e94 <_printf_float+0xd0>
 8005e40:	2200      	movs	r2, #0
 8005e42:	2300      	movs	r3, #0
 8005e44:	4640      	mov	r0, r8
 8005e46:	4649      	mov	r1, r9
 8005e48:	f7fa fe50 	bl	8000aec <__aeabi_dcmplt>
 8005e4c:	b110      	cbz	r0, 8005e54 <_printf_float+0x90>
 8005e4e:	232d      	movs	r3, #45	; 0x2d
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e54:	4b93      	ldr	r3, [pc, #588]	; (80060a4 <_printf_float+0x2e0>)
 8005e56:	4894      	ldr	r0, [pc, #592]	; (80060a8 <_printf_float+0x2e4>)
 8005e58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e5c:	bf94      	ite	ls
 8005e5e:	4698      	movls	r8, r3
 8005e60:	4680      	movhi	r8, r0
 8005e62:	2303      	movs	r3, #3
 8005e64:	6123      	str	r3, [r4, #16]
 8005e66:	9b05      	ldr	r3, [sp, #20]
 8005e68:	f023 0204 	bic.w	r2, r3, #4
 8005e6c:	6022      	str	r2, [r4, #0]
 8005e6e:	f04f 0900 	mov.w	r9, #0
 8005e72:	9700      	str	r7, [sp, #0]
 8005e74:	4633      	mov	r3, r6
 8005e76:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 f9d8 	bl	8006230 <_printf_common>
 8005e80:	3001      	adds	r0, #1
 8005e82:	f040 8090 	bne.w	8005fa6 <_printf_float+0x1e2>
 8005e86:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8a:	b00d      	add	sp, #52	; 0x34
 8005e8c:	ecbd 8b02 	vpop	{d8}
 8005e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	4642      	mov	r2, r8
 8005e96:	464b      	mov	r3, r9
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa fe4e 	bl	8000b3c <__aeabi_dcmpun>
 8005ea0:	b140      	cbz	r0, 8005eb4 <_printf_float+0xf0>
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbc      	itt	lt
 8005ea8:	232d      	movlt	r3, #45	; 0x2d
 8005eaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005eae:	487f      	ldr	r0, [pc, #508]	; (80060ac <_printf_float+0x2e8>)
 8005eb0:	4b7f      	ldr	r3, [pc, #508]	; (80060b0 <_printf_float+0x2ec>)
 8005eb2:	e7d1      	b.n	8005e58 <_printf_float+0x94>
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005eba:	9206      	str	r2, [sp, #24]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	d13f      	bne.n	8005f40 <_printf_float+0x17c>
 8005ec0:	2306      	movs	r3, #6
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	9b05      	ldr	r3, [sp, #20]
 8005ec6:	6861      	ldr	r1, [r4, #4]
 8005ec8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ed2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ed6:	ab09      	add	r3, sp, #36	; 0x24
 8005ed8:	ec49 8b10 	vmov	d0, r8, r9
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	6022      	str	r2, [r4, #0]
 8005ee0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	f7ff fecd 	bl	8005c84 <__cvt>
 8005eea:	9b06      	ldr	r3, [sp, #24]
 8005eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eee:	2b47      	cmp	r3, #71	; 0x47
 8005ef0:	4680      	mov	r8, r0
 8005ef2:	d108      	bne.n	8005f06 <_printf_float+0x142>
 8005ef4:	1cc8      	adds	r0, r1, #3
 8005ef6:	db02      	blt.n	8005efe <_printf_float+0x13a>
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	4299      	cmp	r1, r3
 8005efc:	dd41      	ble.n	8005f82 <_printf_float+0x1be>
 8005efe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f02:	fa5f fb8b 	uxtb.w	fp, fp
 8005f06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f0a:	d820      	bhi.n	8005f4e <_printf_float+0x18a>
 8005f0c:	3901      	subs	r1, #1
 8005f0e:	465a      	mov	r2, fp
 8005f10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f14:	9109      	str	r1, [sp, #36]	; 0x24
 8005f16:	f7ff ff17 	bl	8005d48 <__exponent>
 8005f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1c:	1813      	adds	r3, r2, r0
 8005f1e:	2a01      	cmp	r2, #1
 8005f20:	4681      	mov	r9, r0
 8005f22:	6123      	str	r3, [r4, #16]
 8005f24:	dc02      	bgt.n	8005f2c <_printf_float+0x168>
 8005f26:	6822      	ldr	r2, [r4, #0]
 8005f28:	07d2      	lsls	r2, r2, #31
 8005f2a:	d501      	bpl.n	8005f30 <_printf_float+0x16c>
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d09c      	beq.n	8005e72 <_printf_float+0xae>
 8005f38:	232d      	movs	r3, #45	; 0x2d
 8005f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f3e:	e798      	b.n	8005e72 <_printf_float+0xae>
 8005f40:	9a06      	ldr	r2, [sp, #24]
 8005f42:	2a47      	cmp	r2, #71	; 0x47
 8005f44:	d1be      	bne.n	8005ec4 <_printf_float+0x100>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1bc      	bne.n	8005ec4 <_printf_float+0x100>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e7b9      	b.n	8005ec2 <_printf_float+0xfe>
 8005f4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f52:	d118      	bne.n	8005f86 <_printf_float+0x1c2>
 8005f54:	2900      	cmp	r1, #0
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	dd0b      	ble.n	8005f72 <_printf_float+0x1ae>
 8005f5a:	6121      	str	r1, [r4, #16]
 8005f5c:	b913      	cbnz	r3, 8005f64 <_printf_float+0x1a0>
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	07d0      	lsls	r0, r2, #31
 8005f62:	d502      	bpl.n	8005f6a <_printf_float+0x1a6>
 8005f64:	3301      	adds	r3, #1
 8005f66:	440b      	add	r3, r1
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f6c:	f04f 0900 	mov.w	r9, #0
 8005f70:	e7de      	b.n	8005f30 <_printf_float+0x16c>
 8005f72:	b913      	cbnz	r3, 8005f7a <_printf_float+0x1b6>
 8005f74:	6822      	ldr	r2, [r4, #0]
 8005f76:	07d2      	lsls	r2, r2, #31
 8005f78:	d501      	bpl.n	8005f7e <_printf_float+0x1ba>
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	e7f4      	b.n	8005f68 <_printf_float+0x1a4>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7f2      	b.n	8005f68 <_printf_float+0x1a4>
 8005f82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	db05      	blt.n	8005f98 <_printf_float+0x1d4>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	6121      	str	r1, [r4, #16]
 8005f90:	07d8      	lsls	r0, r3, #31
 8005f92:	d5ea      	bpl.n	8005f6a <_printf_float+0x1a6>
 8005f94:	1c4b      	adds	r3, r1, #1
 8005f96:	e7e7      	b.n	8005f68 <_printf_float+0x1a4>
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	bfd4      	ite	le
 8005f9c:	f1c1 0202 	rsble	r2, r1, #2
 8005fa0:	2201      	movgt	r2, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	e7e0      	b.n	8005f68 <_printf_float+0x1a4>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	055a      	lsls	r2, r3, #21
 8005faa:	d407      	bmi.n	8005fbc <_printf_float+0x1f8>
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	4642      	mov	r2, r8
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	47b8      	blx	r7
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d12c      	bne.n	8006014 <_printf_float+0x250>
 8005fba:	e764      	b.n	8005e86 <_printf_float+0xc2>
 8005fbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fc0:	f240 80e0 	bls.w	8006184 <_printf_float+0x3c0>
 8005fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f7fa fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d034      	beq.n	800603e <_printf_float+0x27a>
 8005fd4:	4a37      	ldr	r2, [pc, #220]	; (80060b4 <_printf_float+0x2f0>)
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4628      	mov	r0, r5
 8005fdc:	47b8      	blx	r7
 8005fde:	3001      	adds	r0, #1
 8005fe0:	f43f af51 	beq.w	8005e86 <_printf_float+0xc2>
 8005fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	db02      	blt.n	8005ff2 <_printf_float+0x22e>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	07d8      	lsls	r0, r3, #31
 8005ff0:	d510      	bpl.n	8006014 <_printf_float+0x250>
 8005ff2:	ee18 3a10 	vmov	r3, s16
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f af41 	beq.w	8005e86 <_printf_float+0xc2>
 8006004:	f04f 0800 	mov.w	r8, #0
 8006008:	f104 091a 	add.w	r9, r4, #26
 800600c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600e:	3b01      	subs	r3, #1
 8006010:	4543      	cmp	r3, r8
 8006012:	dc09      	bgt.n	8006028 <_printf_float+0x264>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	079b      	lsls	r3, r3, #30
 8006018:	f100 8105 	bmi.w	8006226 <_printf_float+0x462>
 800601c:	68e0      	ldr	r0, [r4, #12]
 800601e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006020:	4298      	cmp	r0, r3
 8006022:	bfb8      	it	lt
 8006024:	4618      	movlt	r0, r3
 8006026:	e730      	b.n	8005e8a <_printf_float+0xc6>
 8006028:	2301      	movs	r3, #1
 800602a:	464a      	mov	r2, r9
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f af27 	beq.w	8005e86 <_printf_float+0xc2>
 8006038:	f108 0801 	add.w	r8, r8, #1
 800603c:	e7e6      	b.n	800600c <_printf_float+0x248>
 800603e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	dc39      	bgt.n	80060b8 <_printf_float+0x2f4>
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <_printf_float+0x2f0>)
 8006046:	2301      	movs	r3, #1
 8006048:	4631      	mov	r1, r6
 800604a:	4628      	mov	r0, r5
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	f43f af19 	beq.w	8005e86 <_printf_float+0xc2>
 8006054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006058:	4313      	orrs	r3, r2
 800605a:	d102      	bne.n	8006062 <_printf_float+0x29e>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	07d9      	lsls	r1, r3, #31
 8006060:	d5d8      	bpl.n	8006014 <_printf_float+0x250>
 8006062:	ee18 3a10 	vmov	r3, s16
 8006066:	4652      	mov	r2, sl
 8006068:	4631      	mov	r1, r6
 800606a:	4628      	mov	r0, r5
 800606c:	47b8      	blx	r7
 800606e:	3001      	adds	r0, #1
 8006070:	f43f af09 	beq.w	8005e86 <_printf_float+0xc2>
 8006074:	f04f 0900 	mov.w	r9, #0
 8006078:	f104 0a1a 	add.w	sl, r4, #26
 800607c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800607e:	425b      	negs	r3, r3
 8006080:	454b      	cmp	r3, r9
 8006082:	dc01      	bgt.n	8006088 <_printf_float+0x2c4>
 8006084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006086:	e792      	b.n	8005fae <_printf_float+0x1ea>
 8006088:	2301      	movs	r3, #1
 800608a:	4652      	mov	r2, sl
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f aef7 	beq.w	8005e86 <_printf_float+0xc2>
 8006098:	f109 0901 	add.w	r9, r9, #1
 800609c:	e7ee      	b.n	800607c <_printf_float+0x2b8>
 800609e:	bf00      	nop
 80060a0:	7fefffff 	.word	0x7fefffff
 80060a4:	0800ab24 	.word	0x0800ab24
 80060a8:	0800ab28 	.word	0x0800ab28
 80060ac:	0800ab30 	.word	0x0800ab30
 80060b0:	0800ab2c 	.word	0x0800ab2c
 80060b4:	0800ab34 	.word	0x0800ab34
 80060b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060bc:	429a      	cmp	r2, r3
 80060be:	bfa8      	it	ge
 80060c0:	461a      	movge	r2, r3
 80060c2:	2a00      	cmp	r2, #0
 80060c4:	4691      	mov	r9, r2
 80060c6:	dc37      	bgt.n	8006138 <_printf_float+0x374>
 80060c8:	f04f 0b00 	mov.w	fp, #0
 80060cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060d0:	f104 021a 	add.w	r2, r4, #26
 80060d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060d6:	9305      	str	r3, [sp, #20]
 80060d8:	eba3 0309 	sub.w	r3, r3, r9
 80060dc:	455b      	cmp	r3, fp
 80060de:	dc33      	bgt.n	8006148 <_printf_float+0x384>
 80060e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060e4:	429a      	cmp	r2, r3
 80060e6:	db3b      	blt.n	8006160 <_printf_float+0x39c>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	07da      	lsls	r2, r3, #31
 80060ec:	d438      	bmi.n	8006160 <_printf_float+0x39c>
 80060ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060f0:	9b05      	ldr	r3, [sp, #20]
 80060f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	eba2 0901 	sub.w	r9, r2, r1
 80060fa:	4599      	cmp	r9, r3
 80060fc:	bfa8      	it	ge
 80060fe:	4699      	movge	r9, r3
 8006100:	f1b9 0f00 	cmp.w	r9, #0
 8006104:	dc35      	bgt.n	8006172 <_printf_float+0x3ae>
 8006106:	f04f 0800 	mov.w	r8, #0
 800610a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800610e:	f104 0a1a 	add.w	sl, r4, #26
 8006112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	eba3 0309 	sub.w	r3, r3, r9
 800611c:	4543      	cmp	r3, r8
 800611e:	f77f af79 	ble.w	8006014 <_printf_float+0x250>
 8006122:	2301      	movs	r3, #1
 8006124:	4652      	mov	r2, sl
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f aeaa 	beq.w	8005e86 <_printf_float+0xc2>
 8006132:	f108 0801 	add.w	r8, r8, #1
 8006136:	e7ec      	b.n	8006112 <_printf_float+0x34e>
 8006138:	4613      	mov	r3, r2
 800613a:	4631      	mov	r1, r6
 800613c:	4642      	mov	r2, r8
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	d1c0      	bne.n	80060c8 <_printf_float+0x304>
 8006146:	e69e      	b.n	8005e86 <_printf_float+0xc2>
 8006148:	2301      	movs	r3, #1
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	9205      	str	r2, [sp, #20]
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f ae97 	beq.w	8005e86 <_printf_float+0xc2>
 8006158:	9a05      	ldr	r2, [sp, #20]
 800615a:	f10b 0b01 	add.w	fp, fp, #1
 800615e:	e7b9      	b.n	80060d4 <_printf_float+0x310>
 8006160:	ee18 3a10 	vmov	r3, s16
 8006164:	4652      	mov	r2, sl
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	d1be      	bne.n	80060ee <_printf_float+0x32a>
 8006170:	e689      	b.n	8005e86 <_printf_float+0xc2>
 8006172:	9a05      	ldr	r2, [sp, #20]
 8006174:	464b      	mov	r3, r9
 8006176:	4442      	add	r2, r8
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	47b8      	blx	r7
 800617e:	3001      	adds	r0, #1
 8006180:	d1c1      	bne.n	8006106 <_printf_float+0x342>
 8006182:	e680      	b.n	8005e86 <_printf_float+0xc2>
 8006184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006186:	2a01      	cmp	r2, #1
 8006188:	dc01      	bgt.n	800618e <_printf_float+0x3ca>
 800618a:	07db      	lsls	r3, r3, #31
 800618c:	d538      	bpl.n	8006200 <_printf_float+0x43c>
 800618e:	2301      	movs	r3, #1
 8006190:	4642      	mov	r2, r8
 8006192:	4631      	mov	r1, r6
 8006194:	4628      	mov	r0, r5
 8006196:	47b8      	blx	r7
 8006198:	3001      	adds	r0, #1
 800619a:	f43f ae74 	beq.w	8005e86 <_printf_float+0xc2>
 800619e:	ee18 3a10 	vmov	r3, s16
 80061a2:	4652      	mov	r2, sl
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f ae6b 	beq.w	8005e86 <_printf_float+0xc2>
 80061b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	f7fa fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80061bc:	b9d8      	cbnz	r0, 80061f6 <_printf_float+0x432>
 80061be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c0:	f108 0201 	add.w	r2, r8, #1
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	d10e      	bne.n	80061ee <_printf_float+0x42a>
 80061d0:	e659      	b.n	8005e86 <_printf_float+0xc2>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4652      	mov	r2, sl
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f ae52 	beq.w	8005e86 <_printf_float+0xc2>
 80061e2:	f108 0801 	add.w	r8, r8, #1
 80061e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e8:	3b01      	subs	r3, #1
 80061ea:	4543      	cmp	r3, r8
 80061ec:	dcf1      	bgt.n	80061d2 <_printf_float+0x40e>
 80061ee:	464b      	mov	r3, r9
 80061f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061f4:	e6dc      	b.n	8005fb0 <_printf_float+0x1ec>
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	f104 0a1a 	add.w	sl, r4, #26
 80061fe:	e7f2      	b.n	80061e6 <_printf_float+0x422>
 8006200:	2301      	movs	r3, #1
 8006202:	4642      	mov	r2, r8
 8006204:	e7df      	b.n	80061c6 <_printf_float+0x402>
 8006206:	2301      	movs	r3, #1
 8006208:	464a      	mov	r2, r9
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	f43f ae38 	beq.w	8005e86 <_printf_float+0xc2>
 8006216:	f108 0801 	add.w	r8, r8, #1
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800621e:	1a5b      	subs	r3, r3, r1
 8006220:	4543      	cmp	r3, r8
 8006222:	dcf0      	bgt.n	8006206 <_printf_float+0x442>
 8006224:	e6fa      	b.n	800601c <_printf_float+0x258>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	f104 0919 	add.w	r9, r4, #25
 800622e:	e7f4      	b.n	800621a <_printf_float+0x456>

08006230 <_printf_common>:
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	4616      	mov	r6, r2
 8006236:	4699      	mov	r9, r3
 8006238:	688a      	ldr	r2, [r1, #8]
 800623a:	690b      	ldr	r3, [r1, #16]
 800623c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006240:	4293      	cmp	r3, r2
 8006242:	bfb8      	it	lt
 8006244:	4613      	movlt	r3, r2
 8006246:	6033      	str	r3, [r6, #0]
 8006248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800624c:	4607      	mov	r7, r0
 800624e:	460c      	mov	r4, r1
 8006250:	b10a      	cbz	r2, 8006256 <_printf_common+0x26>
 8006252:	3301      	adds	r3, #1
 8006254:	6033      	str	r3, [r6, #0]
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	0699      	lsls	r1, r3, #26
 800625a:	bf42      	ittt	mi
 800625c:	6833      	ldrmi	r3, [r6, #0]
 800625e:	3302      	addmi	r3, #2
 8006260:	6033      	strmi	r3, [r6, #0]
 8006262:	6825      	ldr	r5, [r4, #0]
 8006264:	f015 0506 	ands.w	r5, r5, #6
 8006268:	d106      	bne.n	8006278 <_printf_common+0x48>
 800626a:	f104 0a19 	add.w	sl, r4, #25
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	6832      	ldr	r2, [r6, #0]
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	42ab      	cmp	r3, r5
 8006276:	dc26      	bgt.n	80062c6 <_printf_common+0x96>
 8006278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800627c:	1e13      	subs	r3, r2, #0
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	bf18      	it	ne
 8006282:	2301      	movne	r3, #1
 8006284:	0692      	lsls	r2, r2, #26
 8006286:	d42b      	bmi.n	80062e0 <_printf_common+0xb0>
 8006288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800628c:	4649      	mov	r1, r9
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	3001      	adds	r0, #1
 8006294:	d01e      	beq.n	80062d4 <_printf_common+0xa4>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	68e5      	ldr	r5, [r4, #12]
 800629a:	6832      	ldr	r2, [r6, #0]
 800629c:	f003 0306 	and.w	r3, r3, #6
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	bf08      	it	eq
 80062a4:	1aad      	subeq	r5, r5, r2
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	6922      	ldr	r2, [r4, #16]
 80062aa:	bf0c      	ite	eq
 80062ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b0:	2500      	movne	r5, #0
 80062b2:	4293      	cmp	r3, r2
 80062b4:	bfc4      	itt	gt
 80062b6:	1a9b      	subgt	r3, r3, r2
 80062b8:	18ed      	addgt	r5, r5, r3
 80062ba:	2600      	movs	r6, #0
 80062bc:	341a      	adds	r4, #26
 80062be:	42b5      	cmp	r5, r6
 80062c0:	d11a      	bne.n	80062f8 <_printf_common+0xc8>
 80062c2:	2000      	movs	r0, #0
 80062c4:	e008      	b.n	80062d8 <_printf_common+0xa8>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4652      	mov	r2, sl
 80062ca:	4649      	mov	r1, r9
 80062cc:	4638      	mov	r0, r7
 80062ce:	47c0      	blx	r8
 80062d0:	3001      	adds	r0, #1
 80062d2:	d103      	bne.n	80062dc <_printf_common+0xac>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	3501      	adds	r5, #1
 80062de:	e7c6      	b.n	800626e <_printf_common+0x3e>
 80062e0:	18e1      	adds	r1, r4, r3
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	2030      	movs	r0, #48	; 0x30
 80062e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ea:	4422      	add	r2, r4
 80062ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f4:	3302      	adds	r3, #2
 80062f6:	e7c7      	b.n	8006288 <_printf_common+0x58>
 80062f8:	2301      	movs	r3, #1
 80062fa:	4622      	mov	r2, r4
 80062fc:	4649      	mov	r1, r9
 80062fe:	4638      	mov	r0, r7
 8006300:	47c0      	blx	r8
 8006302:	3001      	adds	r0, #1
 8006304:	d0e6      	beq.n	80062d4 <_printf_common+0xa4>
 8006306:	3601      	adds	r6, #1
 8006308:	e7d9      	b.n	80062be <_printf_common+0x8e>
	...

0800630c <_printf_i>:
 800630c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	460c      	mov	r4, r1
 8006312:	4691      	mov	r9, r2
 8006314:	7e27      	ldrb	r7, [r4, #24]
 8006316:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006318:	2f78      	cmp	r7, #120	; 0x78
 800631a:	4680      	mov	r8, r0
 800631c:	469a      	mov	sl, r3
 800631e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006322:	d807      	bhi.n	8006334 <_printf_i+0x28>
 8006324:	2f62      	cmp	r7, #98	; 0x62
 8006326:	d80a      	bhi.n	800633e <_printf_i+0x32>
 8006328:	2f00      	cmp	r7, #0
 800632a:	f000 80d8 	beq.w	80064de <_printf_i+0x1d2>
 800632e:	2f58      	cmp	r7, #88	; 0x58
 8006330:	f000 80a3 	beq.w	800647a <_printf_i+0x16e>
 8006334:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800633c:	e03a      	b.n	80063b4 <_printf_i+0xa8>
 800633e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006342:	2b15      	cmp	r3, #21
 8006344:	d8f6      	bhi.n	8006334 <_printf_i+0x28>
 8006346:	a001      	add	r0, pc, #4	; (adr r0, 800634c <_printf_i+0x40>)
 8006348:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800634c:	080063a5 	.word	0x080063a5
 8006350:	080063b9 	.word	0x080063b9
 8006354:	08006335 	.word	0x08006335
 8006358:	08006335 	.word	0x08006335
 800635c:	08006335 	.word	0x08006335
 8006360:	08006335 	.word	0x08006335
 8006364:	080063b9 	.word	0x080063b9
 8006368:	08006335 	.word	0x08006335
 800636c:	08006335 	.word	0x08006335
 8006370:	08006335 	.word	0x08006335
 8006374:	08006335 	.word	0x08006335
 8006378:	080064c5 	.word	0x080064c5
 800637c:	080063e9 	.word	0x080063e9
 8006380:	080064a7 	.word	0x080064a7
 8006384:	08006335 	.word	0x08006335
 8006388:	08006335 	.word	0x08006335
 800638c:	080064e7 	.word	0x080064e7
 8006390:	08006335 	.word	0x08006335
 8006394:	080063e9 	.word	0x080063e9
 8006398:	08006335 	.word	0x08006335
 800639c:	08006335 	.word	0x08006335
 80063a0:	080064af 	.word	0x080064af
 80063a4:	680b      	ldr	r3, [r1, #0]
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	600a      	str	r2, [r1, #0]
 80063ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0a3      	b.n	8006500 <_printf_i+0x1f4>
 80063b8:	6825      	ldr	r5, [r4, #0]
 80063ba:	6808      	ldr	r0, [r1, #0]
 80063bc:	062e      	lsls	r6, r5, #24
 80063be:	f100 0304 	add.w	r3, r0, #4
 80063c2:	d50a      	bpl.n	80063da <_printf_i+0xce>
 80063c4:	6805      	ldr	r5, [r0, #0]
 80063c6:	600b      	str	r3, [r1, #0]
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	da03      	bge.n	80063d4 <_printf_i+0xc8>
 80063cc:	232d      	movs	r3, #45	; 0x2d
 80063ce:	426d      	negs	r5, r5
 80063d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d4:	485e      	ldr	r0, [pc, #376]	; (8006550 <_printf_i+0x244>)
 80063d6:	230a      	movs	r3, #10
 80063d8:	e019      	b.n	800640e <_printf_i+0x102>
 80063da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063de:	6805      	ldr	r5, [r0, #0]
 80063e0:	600b      	str	r3, [r1, #0]
 80063e2:	bf18      	it	ne
 80063e4:	b22d      	sxthne	r5, r5
 80063e6:	e7ef      	b.n	80063c8 <_printf_i+0xbc>
 80063e8:	680b      	ldr	r3, [r1, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	1d18      	adds	r0, r3, #4
 80063ee:	6008      	str	r0, [r1, #0]
 80063f0:	0628      	lsls	r0, r5, #24
 80063f2:	d501      	bpl.n	80063f8 <_printf_i+0xec>
 80063f4:	681d      	ldr	r5, [r3, #0]
 80063f6:	e002      	b.n	80063fe <_printf_i+0xf2>
 80063f8:	0669      	lsls	r1, r5, #25
 80063fa:	d5fb      	bpl.n	80063f4 <_printf_i+0xe8>
 80063fc:	881d      	ldrh	r5, [r3, #0]
 80063fe:	4854      	ldr	r0, [pc, #336]	; (8006550 <_printf_i+0x244>)
 8006400:	2f6f      	cmp	r7, #111	; 0x6f
 8006402:	bf0c      	ite	eq
 8006404:	2308      	moveq	r3, #8
 8006406:	230a      	movne	r3, #10
 8006408:	2100      	movs	r1, #0
 800640a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800640e:	6866      	ldr	r6, [r4, #4]
 8006410:	60a6      	str	r6, [r4, #8]
 8006412:	2e00      	cmp	r6, #0
 8006414:	bfa2      	ittt	ge
 8006416:	6821      	ldrge	r1, [r4, #0]
 8006418:	f021 0104 	bicge.w	r1, r1, #4
 800641c:	6021      	strge	r1, [r4, #0]
 800641e:	b90d      	cbnz	r5, 8006424 <_printf_i+0x118>
 8006420:	2e00      	cmp	r6, #0
 8006422:	d04d      	beq.n	80064c0 <_printf_i+0x1b4>
 8006424:	4616      	mov	r6, r2
 8006426:	fbb5 f1f3 	udiv	r1, r5, r3
 800642a:	fb03 5711 	mls	r7, r3, r1, r5
 800642e:	5dc7      	ldrb	r7, [r0, r7]
 8006430:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006434:	462f      	mov	r7, r5
 8006436:	42bb      	cmp	r3, r7
 8006438:	460d      	mov	r5, r1
 800643a:	d9f4      	bls.n	8006426 <_printf_i+0x11a>
 800643c:	2b08      	cmp	r3, #8
 800643e:	d10b      	bne.n	8006458 <_printf_i+0x14c>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	07df      	lsls	r7, r3, #31
 8006444:	d508      	bpl.n	8006458 <_printf_i+0x14c>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	6861      	ldr	r1, [r4, #4]
 800644a:	4299      	cmp	r1, r3
 800644c:	bfde      	ittt	le
 800644e:	2330      	movle	r3, #48	; 0x30
 8006450:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006454:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006458:	1b92      	subs	r2, r2, r6
 800645a:	6122      	str	r2, [r4, #16]
 800645c:	f8cd a000 	str.w	sl, [sp]
 8006460:	464b      	mov	r3, r9
 8006462:	aa03      	add	r2, sp, #12
 8006464:	4621      	mov	r1, r4
 8006466:	4640      	mov	r0, r8
 8006468:	f7ff fee2 	bl	8006230 <_printf_common>
 800646c:	3001      	adds	r0, #1
 800646e:	d14c      	bne.n	800650a <_printf_i+0x1fe>
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	b004      	add	sp, #16
 8006476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647a:	4835      	ldr	r0, [pc, #212]	; (8006550 <_printf_i+0x244>)
 800647c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	680e      	ldr	r6, [r1, #0]
 8006484:	061f      	lsls	r7, r3, #24
 8006486:	f856 5b04 	ldr.w	r5, [r6], #4
 800648a:	600e      	str	r6, [r1, #0]
 800648c:	d514      	bpl.n	80064b8 <_printf_i+0x1ac>
 800648e:	07d9      	lsls	r1, r3, #31
 8006490:	bf44      	itt	mi
 8006492:	f043 0320 	orrmi.w	r3, r3, #32
 8006496:	6023      	strmi	r3, [r4, #0]
 8006498:	b91d      	cbnz	r5, 80064a2 <_printf_i+0x196>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	f023 0320 	bic.w	r3, r3, #32
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	2310      	movs	r3, #16
 80064a4:	e7b0      	b.n	8006408 <_printf_i+0xfc>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	f043 0320 	orr.w	r3, r3, #32
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	2378      	movs	r3, #120	; 0x78
 80064b0:	4828      	ldr	r0, [pc, #160]	; (8006554 <_printf_i+0x248>)
 80064b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064b6:	e7e3      	b.n	8006480 <_printf_i+0x174>
 80064b8:	065e      	lsls	r6, r3, #25
 80064ba:	bf48      	it	mi
 80064bc:	b2ad      	uxthmi	r5, r5
 80064be:	e7e6      	b.n	800648e <_printf_i+0x182>
 80064c0:	4616      	mov	r6, r2
 80064c2:	e7bb      	b.n	800643c <_printf_i+0x130>
 80064c4:	680b      	ldr	r3, [r1, #0]
 80064c6:	6826      	ldr	r6, [r4, #0]
 80064c8:	6960      	ldr	r0, [r4, #20]
 80064ca:	1d1d      	adds	r5, r3, #4
 80064cc:	600d      	str	r5, [r1, #0]
 80064ce:	0635      	lsls	r5, r6, #24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	d501      	bpl.n	80064d8 <_printf_i+0x1cc>
 80064d4:	6018      	str	r0, [r3, #0]
 80064d6:	e002      	b.n	80064de <_printf_i+0x1d2>
 80064d8:	0671      	lsls	r1, r6, #25
 80064da:	d5fb      	bpl.n	80064d4 <_printf_i+0x1c8>
 80064dc:	8018      	strh	r0, [r3, #0]
 80064de:	2300      	movs	r3, #0
 80064e0:	6123      	str	r3, [r4, #16]
 80064e2:	4616      	mov	r6, r2
 80064e4:	e7ba      	b.n	800645c <_printf_i+0x150>
 80064e6:	680b      	ldr	r3, [r1, #0]
 80064e8:	1d1a      	adds	r2, r3, #4
 80064ea:	600a      	str	r2, [r1, #0]
 80064ec:	681e      	ldr	r6, [r3, #0]
 80064ee:	6862      	ldr	r2, [r4, #4]
 80064f0:	2100      	movs	r1, #0
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7f9 fe7c 	bl	80001f0 <memchr>
 80064f8:	b108      	cbz	r0, 80064fe <_printf_i+0x1f2>
 80064fa:	1b80      	subs	r0, r0, r6
 80064fc:	6060      	str	r0, [r4, #4]
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	2300      	movs	r3, #0
 8006504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006508:	e7a8      	b.n	800645c <_printf_i+0x150>
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	4632      	mov	r2, r6
 800650e:	4649      	mov	r1, r9
 8006510:	4640      	mov	r0, r8
 8006512:	47d0      	blx	sl
 8006514:	3001      	adds	r0, #1
 8006516:	d0ab      	beq.n	8006470 <_printf_i+0x164>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	079b      	lsls	r3, r3, #30
 800651c:	d413      	bmi.n	8006546 <_printf_i+0x23a>
 800651e:	68e0      	ldr	r0, [r4, #12]
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	4298      	cmp	r0, r3
 8006524:	bfb8      	it	lt
 8006526:	4618      	movlt	r0, r3
 8006528:	e7a4      	b.n	8006474 <_printf_i+0x168>
 800652a:	2301      	movs	r3, #1
 800652c:	4632      	mov	r2, r6
 800652e:	4649      	mov	r1, r9
 8006530:	4640      	mov	r0, r8
 8006532:	47d0      	blx	sl
 8006534:	3001      	adds	r0, #1
 8006536:	d09b      	beq.n	8006470 <_printf_i+0x164>
 8006538:	3501      	adds	r5, #1
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	9903      	ldr	r1, [sp, #12]
 800653e:	1a5b      	subs	r3, r3, r1
 8006540:	42ab      	cmp	r3, r5
 8006542:	dcf2      	bgt.n	800652a <_printf_i+0x21e>
 8006544:	e7eb      	b.n	800651e <_printf_i+0x212>
 8006546:	2500      	movs	r5, #0
 8006548:	f104 0619 	add.w	r6, r4, #25
 800654c:	e7f5      	b.n	800653a <_printf_i+0x22e>
 800654e:	bf00      	nop
 8006550:	0800ab36 	.word	0x0800ab36
 8006554:	0800ab47 	.word	0x0800ab47

08006558 <_scanf_float>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	b087      	sub	sp, #28
 800655e:	4617      	mov	r7, r2
 8006560:	9303      	str	r3, [sp, #12]
 8006562:	688b      	ldr	r3, [r1, #8]
 8006564:	1e5a      	subs	r2, r3, #1
 8006566:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800656a:	bf83      	ittte	hi
 800656c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006570:	195b      	addhi	r3, r3, r5
 8006572:	9302      	strhi	r3, [sp, #8]
 8006574:	2300      	movls	r3, #0
 8006576:	bf86      	itte	hi
 8006578:	f240 135d 	movwhi	r3, #349	; 0x15d
 800657c:	608b      	strhi	r3, [r1, #8]
 800657e:	9302      	strls	r3, [sp, #8]
 8006580:	680b      	ldr	r3, [r1, #0]
 8006582:	468b      	mov	fp, r1
 8006584:	2500      	movs	r5, #0
 8006586:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800658a:	f84b 3b1c 	str.w	r3, [fp], #28
 800658e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006592:	4680      	mov	r8, r0
 8006594:	460c      	mov	r4, r1
 8006596:	465e      	mov	r6, fp
 8006598:	46aa      	mov	sl, r5
 800659a:	46a9      	mov	r9, r5
 800659c:	9501      	str	r5, [sp, #4]
 800659e:	68a2      	ldr	r2, [r4, #8]
 80065a0:	b152      	cbz	r2, 80065b8 <_scanf_float+0x60>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b4e      	cmp	r3, #78	; 0x4e
 80065a8:	d864      	bhi.n	8006674 <_scanf_float+0x11c>
 80065aa:	2b40      	cmp	r3, #64	; 0x40
 80065ac:	d83c      	bhi.n	8006628 <_scanf_float+0xd0>
 80065ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065b2:	b2c8      	uxtb	r0, r1
 80065b4:	280e      	cmp	r0, #14
 80065b6:	d93a      	bls.n	800662e <_scanf_float+0xd6>
 80065b8:	f1b9 0f00 	cmp.w	r9, #0
 80065bc:	d003      	beq.n	80065c6 <_scanf_float+0x6e>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ca:	f1ba 0f01 	cmp.w	sl, #1
 80065ce:	f200 8113 	bhi.w	80067f8 <_scanf_float+0x2a0>
 80065d2:	455e      	cmp	r6, fp
 80065d4:	f200 8105 	bhi.w	80067e2 <_scanf_float+0x28a>
 80065d8:	2501      	movs	r5, #1
 80065da:	4628      	mov	r0, r5
 80065dc:	b007      	add	sp, #28
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80065e6:	2a0d      	cmp	r2, #13
 80065e8:	d8e6      	bhi.n	80065b8 <_scanf_float+0x60>
 80065ea:	a101      	add	r1, pc, #4	; (adr r1, 80065f0 <_scanf_float+0x98>)
 80065ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065f0:	0800672f 	.word	0x0800672f
 80065f4:	080065b9 	.word	0x080065b9
 80065f8:	080065b9 	.word	0x080065b9
 80065fc:	080065b9 	.word	0x080065b9
 8006600:	0800678f 	.word	0x0800678f
 8006604:	08006767 	.word	0x08006767
 8006608:	080065b9 	.word	0x080065b9
 800660c:	080065b9 	.word	0x080065b9
 8006610:	0800673d 	.word	0x0800673d
 8006614:	080065b9 	.word	0x080065b9
 8006618:	080065b9 	.word	0x080065b9
 800661c:	080065b9 	.word	0x080065b9
 8006620:	080065b9 	.word	0x080065b9
 8006624:	080066f5 	.word	0x080066f5
 8006628:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800662c:	e7db      	b.n	80065e6 <_scanf_float+0x8e>
 800662e:	290e      	cmp	r1, #14
 8006630:	d8c2      	bhi.n	80065b8 <_scanf_float+0x60>
 8006632:	a001      	add	r0, pc, #4	; (adr r0, 8006638 <_scanf_float+0xe0>)
 8006634:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006638:	080066e7 	.word	0x080066e7
 800663c:	080065b9 	.word	0x080065b9
 8006640:	080066e7 	.word	0x080066e7
 8006644:	0800677b 	.word	0x0800677b
 8006648:	080065b9 	.word	0x080065b9
 800664c:	08006695 	.word	0x08006695
 8006650:	080066d1 	.word	0x080066d1
 8006654:	080066d1 	.word	0x080066d1
 8006658:	080066d1 	.word	0x080066d1
 800665c:	080066d1 	.word	0x080066d1
 8006660:	080066d1 	.word	0x080066d1
 8006664:	080066d1 	.word	0x080066d1
 8006668:	080066d1 	.word	0x080066d1
 800666c:	080066d1 	.word	0x080066d1
 8006670:	080066d1 	.word	0x080066d1
 8006674:	2b6e      	cmp	r3, #110	; 0x6e
 8006676:	d809      	bhi.n	800668c <_scanf_float+0x134>
 8006678:	2b60      	cmp	r3, #96	; 0x60
 800667a:	d8b2      	bhi.n	80065e2 <_scanf_float+0x8a>
 800667c:	2b54      	cmp	r3, #84	; 0x54
 800667e:	d077      	beq.n	8006770 <_scanf_float+0x218>
 8006680:	2b59      	cmp	r3, #89	; 0x59
 8006682:	d199      	bne.n	80065b8 <_scanf_float+0x60>
 8006684:	2d07      	cmp	r5, #7
 8006686:	d197      	bne.n	80065b8 <_scanf_float+0x60>
 8006688:	2508      	movs	r5, #8
 800668a:	e029      	b.n	80066e0 <_scanf_float+0x188>
 800668c:	2b74      	cmp	r3, #116	; 0x74
 800668e:	d06f      	beq.n	8006770 <_scanf_float+0x218>
 8006690:	2b79      	cmp	r3, #121	; 0x79
 8006692:	e7f6      	b.n	8006682 <_scanf_float+0x12a>
 8006694:	6821      	ldr	r1, [r4, #0]
 8006696:	05c8      	lsls	r0, r1, #23
 8006698:	d51a      	bpl.n	80066d0 <_scanf_float+0x178>
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066a0:	6021      	str	r1, [r4, #0]
 80066a2:	f109 0901 	add.w	r9, r9, #1
 80066a6:	b11b      	cbz	r3, 80066b0 <_scanf_float+0x158>
 80066a8:	3b01      	subs	r3, #1
 80066aa:	3201      	adds	r2, #1
 80066ac:	9302      	str	r3, [sp, #8]
 80066ae:	60a2      	str	r2, [r4, #8]
 80066b0:	68a3      	ldr	r3, [r4, #8]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	60a3      	str	r3, [r4, #8]
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	6123      	str	r3, [r4, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3b01      	subs	r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	607b      	str	r3, [r7, #4]
 80066c4:	f340 8084 	ble.w	80067d0 <_scanf_float+0x278>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	603b      	str	r3, [r7, #0]
 80066ce:	e766      	b.n	800659e <_scanf_float+0x46>
 80066d0:	eb1a 0f05 	cmn.w	sl, r5
 80066d4:	f47f af70 	bne.w	80065b8 <_scanf_float+0x60>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80066de:	6022      	str	r2, [r4, #0]
 80066e0:	f806 3b01 	strb.w	r3, [r6], #1
 80066e4:	e7e4      	b.n	80066b0 <_scanf_float+0x158>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	0610      	lsls	r0, r2, #24
 80066ea:	f57f af65 	bpl.w	80065b8 <_scanf_float+0x60>
 80066ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f2:	e7f4      	b.n	80066de <_scanf_float+0x186>
 80066f4:	f1ba 0f00 	cmp.w	sl, #0
 80066f8:	d10e      	bne.n	8006718 <_scanf_float+0x1c0>
 80066fa:	f1b9 0f00 	cmp.w	r9, #0
 80066fe:	d10e      	bne.n	800671e <_scanf_float+0x1c6>
 8006700:	6822      	ldr	r2, [r4, #0]
 8006702:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006706:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800670a:	d108      	bne.n	800671e <_scanf_float+0x1c6>
 800670c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006710:	6022      	str	r2, [r4, #0]
 8006712:	f04f 0a01 	mov.w	sl, #1
 8006716:	e7e3      	b.n	80066e0 <_scanf_float+0x188>
 8006718:	f1ba 0f02 	cmp.w	sl, #2
 800671c:	d055      	beq.n	80067ca <_scanf_float+0x272>
 800671e:	2d01      	cmp	r5, #1
 8006720:	d002      	beq.n	8006728 <_scanf_float+0x1d0>
 8006722:	2d04      	cmp	r5, #4
 8006724:	f47f af48 	bne.w	80065b8 <_scanf_float+0x60>
 8006728:	3501      	adds	r5, #1
 800672a:	b2ed      	uxtb	r5, r5
 800672c:	e7d8      	b.n	80066e0 <_scanf_float+0x188>
 800672e:	f1ba 0f01 	cmp.w	sl, #1
 8006732:	f47f af41 	bne.w	80065b8 <_scanf_float+0x60>
 8006736:	f04f 0a02 	mov.w	sl, #2
 800673a:	e7d1      	b.n	80066e0 <_scanf_float+0x188>
 800673c:	b97d      	cbnz	r5, 800675e <_scanf_float+0x206>
 800673e:	f1b9 0f00 	cmp.w	r9, #0
 8006742:	f47f af3c 	bne.w	80065be <_scanf_float+0x66>
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800674c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006750:	f47f af39 	bne.w	80065c6 <_scanf_float+0x6e>
 8006754:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	2501      	movs	r5, #1
 800675c:	e7c0      	b.n	80066e0 <_scanf_float+0x188>
 800675e:	2d03      	cmp	r5, #3
 8006760:	d0e2      	beq.n	8006728 <_scanf_float+0x1d0>
 8006762:	2d05      	cmp	r5, #5
 8006764:	e7de      	b.n	8006724 <_scanf_float+0x1cc>
 8006766:	2d02      	cmp	r5, #2
 8006768:	f47f af26 	bne.w	80065b8 <_scanf_float+0x60>
 800676c:	2503      	movs	r5, #3
 800676e:	e7b7      	b.n	80066e0 <_scanf_float+0x188>
 8006770:	2d06      	cmp	r5, #6
 8006772:	f47f af21 	bne.w	80065b8 <_scanf_float+0x60>
 8006776:	2507      	movs	r5, #7
 8006778:	e7b2      	b.n	80066e0 <_scanf_float+0x188>
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	0591      	lsls	r1, r2, #22
 800677e:	f57f af1b 	bpl.w	80065b8 <_scanf_float+0x60>
 8006782:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006786:	6022      	str	r2, [r4, #0]
 8006788:	f8cd 9004 	str.w	r9, [sp, #4]
 800678c:	e7a8      	b.n	80066e0 <_scanf_float+0x188>
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006794:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006798:	d006      	beq.n	80067a8 <_scanf_float+0x250>
 800679a:	0550      	lsls	r0, r2, #21
 800679c:	f57f af0c 	bpl.w	80065b8 <_scanf_float+0x60>
 80067a0:	f1b9 0f00 	cmp.w	r9, #0
 80067a4:	f43f af0f 	beq.w	80065c6 <_scanf_float+0x6e>
 80067a8:	0591      	lsls	r1, r2, #22
 80067aa:	bf58      	it	pl
 80067ac:	9901      	ldrpl	r1, [sp, #4]
 80067ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067b2:	bf58      	it	pl
 80067b4:	eba9 0101 	subpl.w	r1, r9, r1
 80067b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067bc:	bf58      	it	pl
 80067be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067c2:	6022      	str	r2, [r4, #0]
 80067c4:	f04f 0900 	mov.w	r9, #0
 80067c8:	e78a      	b.n	80066e0 <_scanf_float+0x188>
 80067ca:	f04f 0a03 	mov.w	sl, #3
 80067ce:	e787      	b.n	80066e0 <_scanf_float+0x188>
 80067d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067d4:	4639      	mov	r1, r7
 80067d6:	4640      	mov	r0, r8
 80067d8:	4798      	blx	r3
 80067da:	2800      	cmp	r0, #0
 80067dc:	f43f aedf 	beq.w	800659e <_scanf_float+0x46>
 80067e0:	e6ea      	b.n	80065b8 <_scanf_float+0x60>
 80067e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067ea:	463a      	mov	r2, r7
 80067ec:	4640      	mov	r0, r8
 80067ee:	4798      	blx	r3
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	e6ec      	b.n	80065d2 <_scanf_float+0x7a>
 80067f8:	1e6b      	subs	r3, r5, #1
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	d825      	bhi.n	800684a <_scanf_float+0x2f2>
 80067fe:	2d02      	cmp	r5, #2
 8006800:	d836      	bhi.n	8006870 <_scanf_float+0x318>
 8006802:	455e      	cmp	r6, fp
 8006804:	f67f aee8 	bls.w	80065d8 <_scanf_float+0x80>
 8006808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800680c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006810:	463a      	mov	r2, r7
 8006812:	4640      	mov	r0, r8
 8006814:	4798      	blx	r3
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	3b01      	subs	r3, #1
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	e7f1      	b.n	8006802 <_scanf_float+0x2aa>
 800681e:	9802      	ldr	r0, [sp, #8]
 8006820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006824:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006828:	9002      	str	r0, [sp, #8]
 800682a:	463a      	mov	r2, r7
 800682c:	4640      	mov	r0, r8
 800682e:	4798      	blx	r3
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	3b01      	subs	r3, #1
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800683a:	fa5f fa8a 	uxtb.w	sl, sl
 800683e:	f1ba 0f02 	cmp.w	sl, #2
 8006842:	d1ec      	bne.n	800681e <_scanf_float+0x2c6>
 8006844:	3d03      	subs	r5, #3
 8006846:	b2ed      	uxtb	r5, r5
 8006848:	1b76      	subs	r6, r6, r5
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	05da      	lsls	r2, r3, #23
 800684e:	d52f      	bpl.n	80068b0 <_scanf_float+0x358>
 8006850:	055b      	lsls	r3, r3, #21
 8006852:	d510      	bpl.n	8006876 <_scanf_float+0x31e>
 8006854:	455e      	cmp	r6, fp
 8006856:	f67f aebf 	bls.w	80065d8 <_scanf_float+0x80>
 800685a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800685e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006862:	463a      	mov	r2, r7
 8006864:	4640      	mov	r0, r8
 8006866:	4798      	blx	r3
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	3b01      	subs	r3, #1
 800686c:	6123      	str	r3, [r4, #16]
 800686e:	e7f1      	b.n	8006854 <_scanf_float+0x2fc>
 8006870:	46aa      	mov	sl, r5
 8006872:	9602      	str	r6, [sp, #8]
 8006874:	e7df      	b.n	8006836 <_scanf_float+0x2de>
 8006876:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800687a:	6923      	ldr	r3, [r4, #16]
 800687c:	2965      	cmp	r1, #101	; 0x65
 800687e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006882:	f106 35ff 	add.w	r5, r6, #4294967295
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	d00c      	beq.n	80068a4 <_scanf_float+0x34c>
 800688a:	2945      	cmp	r1, #69	; 0x45
 800688c:	d00a      	beq.n	80068a4 <_scanf_float+0x34c>
 800688e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006892:	463a      	mov	r2, r7
 8006894:	4640      	mov	r0, r8
 8006896:	4798      	blx	r3
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800689e:	3b01      	subs	r3, #1
 80068a0:	1eb5      	subs	r5, r6, #2
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068a8:	463a      	mov	r2, r7
 80068aa:	4640      	mov	r0, r8
 80068ac:	4798      	blx	r3
 80068ae:	462e      	mov	r6, r5
 80068b0:	6825      	ldr	r5, [r4, #0]
 80068b2:	f015 0510 	ands.w	r5, r5, #16
 80068b6:	d158      	bne.n	800696a <_scanf_float+0x412>
 80068b8:	7035      	strb	r5, [r6, #0]
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c4:	d11c      	bne.n	8006900 <_scanf_float+0x3a8>
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	454b      	cmp	r3, r9
 80068ca:	eba3 0209 	sub.w	r2, r3, r9
 80068ce:	d124      	bne.n	800691a <_scanf_float+0x3c2>
 80068d0:	2200      	movs	r2, #0
 80068d2:	4659      	mov	r1, fp
 80068d4:	4640      	mov	r0, r8
 80068d6:	f000 fe9d 	bl	8007614 <_strtod_r>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	6821      	ldr	r1, [r4, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f011 0f02 	tst.w	r1, #2
 80068e4:	ec57 6b10 	vmov	r6, r7, d0
 80068e8:	f103 0204 	add.w	r2, r3, #4
 80068ec:	d020      	beq.n	8006930 <_scanf_float+0x3d8>
 80068ee:	9903      	ldr	r1, [sp, #12]
 80068f0:	600a      	str	r2, [r1, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	e9c3 6700 	strd	r6, r7, [r3]
 80068f8:	68e3      	ldr	r3, [r4, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60e3      	str	r3, [r4, #12]
 80068fe:	e66c      	b.n	80065da <_scanf_float+0x82>
 8006900:	9b04      	ldr	r3, [sp, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0e4      	beq.n	80068d0 <_scanf_float+0x378>
 8006906:	9905      	ldr	r1, [sp, #20]
 8006908:	230a      	movs	r3, #10
 800690a:	462a      	mov	r2, r5
 800690c:	3101      	adds	r1, #1
 800690e:	4640      	mov	r0, r8
 8006910:	f000 ff0a 	bl	8007728 <_strtol_r>
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	9e05      	ldr	r6, [sp, #20]
 8006918:	1ac2      	subs	r2, r0, r3
 800691a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800691e:	429e      	cmp	r6, r3
 8006920:	bf28      	it	cs
 8006922:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006926:	4912      	ldr	r1, [pc, #72]	; (8006970 <_scanf_float+0x418>)
 8006928:	4630      	mov	r0, r6
 800692a:	f000 f82b 	bl	8006984 <siprintf>
 800692e:	e7cf      	b.n	80068d0 <_scanf_float+0x378>
 8006930:	f011 0f04 	tst.w	r1, #4
 8006934:	9903      	ldr	r1, [sp, #12]
 8006936:	600a      	str	r2, [r1, #0]
 8006938:	d1db      	bne.n	80068f2 <_scanf_float+0x39a>
 800693a:	f8d3 8000 	ldr.w	r8, [r3]
 800693e:	ee10 2a10 	vmov	r2, s0
 8006942:	ee10 0a10 	vmov	r0, s0
 8006946:	463b      	mov	r3, r7
 8006948:	4639      	mov	r1, r7
 800694a:	f7fa f8f7 	bl	8000b3c <__aeabi_dcmpun>
 800694e:	b128      	cbz	r0, 800695c <_scanf_float+0x404>
 8006950:	4808      	ldr	r0, [pc, #32]	; (8006974 <_scanf_float+0x41c>)
 8006952:	f000 f811 	bl	8006978 <nanf>
 8006956:	ed88 0a00 	vstr	s0, [r8]
 800695a:	e7cd      	b.n	80068f8 <_scanf_float+0x3a0>
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	f7fa f94a 	bl	8000bf8 <__aeabi_d2f>
 8006964:	f8c8 0000 	str.w	r0, [r8]
 8006968:	e7c6      	b.n	80068f8 <_scanf_float+0x3a0>
 800696a:	2500      	movs	r5, #0
 800696c:	e635      	b.n	80065da <_scanf_float+0x82>
 800696e:	bf00      	nop
 8006970:	0800ab58 	.word	0x0800ab58
 8006974:	0800af70 	.word	0x0800af70

08006978 <nanf>:
 8006978:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006980 <nanf+0x8>
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	7fc00000 	.word	0x7fc00000

08006984 <siprintf>:
 8006984:	b40e      	push	{r1, r2, r3}
 8006986:	b500      	push	{lr}
 8006988:	b09c      	sub	sp, #112	; 0x70
 800698a:	ab1d      	add	r3, sp, #116	; 0x74
 800698c:	9002      	str	r0, [sp, #8]
 800698e:	9006      	str	r0, [sp, #24]
 8006990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006994:	4809      	ldr	r0, [pc, #36]	; (80069bc <siprintf+0x38>)
 8006996:	9107      	str	r1, [sp, #28]
 8006998:	9104      	str	r1, [sp, #16]
 800699a:	4909      	ldr	r1, [pc, #36]	; (80069c0 <siprintf+0x3c>)
 800699c:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a0:	9105      	str	r1, [sp, #20]
 80069a2:	6800      	ldr	r0, [r0, #0]
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	a902      	add	r1, sp, #8
 80069a8:	f002 fea6 	bl	80096f8 <_svfiprintf_r>
 80069ac:	9b02      	ldr	r3, [sp, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	b01c      	add	sp, #112	; 0x70
 80069b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b8:	b003      	add	sp, #12
 80069ba:	4770      	bx	lr
 80069bc:	20000010 	.word	0x20000010
 80069c0:	ffff0208 	.word	0xffff0208

080069c4 <sulp>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	4604      	mov	r4, r0
 80069c8:	460d      	mov	r5, r1
 80069ca:	ec45 4b10 	vmov	d0, r4, r5
 80069ce:	4616      	mov	r6, r2
 80069d0:	f002 fc2e 	bl	8009230 <__ulp>
 80069d4:	ec51 0b10 	vmov	r0, r1, d0
 80069d8:	b17e      	cbz	r6, 80069fa <sulp+0x36>
 80069da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80069de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dd09      	ble.n	80069fa <sulp+0x36>
 80069e6:	051b      	lsls	r3, r3, #20
 80069e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80069ec:	2400      	movs	r4, #0
 80069ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80069f2:	4622      	mov	r2, r4
 80069f4:	462b      	mov	r3, r5
 80069f6:	f7f9 fe07 	bl	8000608 <__aeabi_dmul>
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	0000      	movs	r0, r0
	...

08006a00 <_strtod_l>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	b0a3      	sub	sp, #140	; 0x8c
 8006a06:	461f      	mov	r7, r3
 8006a08:	2300      	movs	r3, #0
 8006a0a:	931e      	str	r3, [sp, #120]	; 0x78
 8006a0c:	4ba4      	ldr	r3, [pc, #656]	; (8006ca0 <_strtod_l+0x2a0>)
 8006a0e:	9219      	str	r2, [sp, #100]	; 0x64
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	9307      	str	r3, [sp, #28]
 8006a14:	4604      	mov	r4, r0
 8006a16:	4618      	mov	r0, r3
 8006a18:	4688      	mov	r8, r1
 8006a1a:	f7f9 fbe1 	bl	80001e0 <strlen>
 8006a1e:	f04f 0a00 	mov.w	sl, #0
 8006a22:	4605      	mov	r5, r0
 8006a24:	f04f 0b00 	mov.w	fp, #0
 8006a28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	2a2b      	cmp	r2, #43	; 0x2b
 8006a32:	d04c      	beq.n	8006ace <_strtod_l+0xce>
 8006a34:	d839      	bhi.n	8006aaa <_strtod_l+0xaa>
 8006a36:	2a0d      	cmp	r2, #13
 8006a38:	d832      	bhi.n	8006aa0 <_strtod_l+0xa0>
 8006a3a:	2a08      	cmp	r2, #8
 8006a3c:	d832      	bhi.n	8006aa4 <_strtod_l+0xa4>
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	d03c      	beq.n	8006abc <_strtod_l+0xbc>
 8006a42:	2300      	movs	r3, #0
 8006a44:	930e      	str	r3, [sp, #56]	; 0x38
 8006a46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006a48:	7833      	ldrb	r3, [r6, #0]
 8006a4a:	2b30      	cmp	r3, #48	; 0x30
 8006a4c:	f040 80b4 	bne.w	8006bb8 <_strtod_l+0x1b8>
 8006a50:	7873      	ldrb	r3, [r6, #1]
 8006a52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a56:	2b58      	cmp	r3, #88	; 0x58
 8006a58:	d16c      	bne.n	8006b34 <_strtod_l+0x134>
 8006a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	ab1e      	add	r3, sp, #120	; 0x78
 8006a60:	9702      	str	r7, [sp, #8]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4a8f      	ldr	r2, [pc, #572]	; (8006ca4 <_strtod_l+0x2a4>)
 8006a66:	ab1f      	add	r3, sp, #124	; 0x7c
 8006a68:	a91d      	add	r1, sp, #116	; 0x74
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f001 fd40 	bl	80084f0 <__gethex>
 8006a70:	f010 0707 	ands.w	r7, r0, #7
 8006a74:	4605      	mov	r5, r0
 8006a76:	d005      	beq.n	8006a84 <_strtod_l+0x84>
 8006a78:	2f06      	cmp	r7, #6
 8006a7a:	d12a      	bne.n	8006ad2 <_strtod_l+0xd2>
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	2300      	movs	r3, #0
 8006a80:	961d      	str	r6, [sp, #116]	; 0x74
 8006a82:	930e      	str	r3, [sp, #56]	; 0x38
 8006a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f040 8596 	bne.w	80075b8 <_strtod_l+0xbb8>
 8006a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a8e:	b1db      	cbz	r3, 8006ac8 <_strtod_l+0xc8>
 8006a90:	4652      	mov	r2, sl
 8006a92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a96:	ec43 2b10 	vmov	d0, r2, r3
 8006a9a:	b023      	add	sp, #140	; 0x8c
 8006a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa0:	2a20      	cmp	r2, #32
 8006aa2:	d1ce      	bne.n	8006a42 <_strtod_l+0x42>
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	931d      	str	r3, [sp, #116]	; 0x74
 8006aa8:	e7c0      	b.n	8006a2c <_strtod_l+0x2c>
 8006aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8006aac:	d1c9      	bne.n	8006a42 <_strtod_l+0x42>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	920e      	str	r2, [sp, #56]	; 0x38
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	921d      	str	r2, [sp, #116]	; 0x74
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1c4      	bne.n	8006a46 <_strtod_l+0x46>
 8006abc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006abe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 8576 	bne.w	80075b4 <_strtod_l+0xbb4>
 8006ac8:	4652      	mov	r2, sl
 8006aca:	465b      	mov	r3, fp
 8006acc:	e7e3      	b.n	8006a96 <_strtod_l+0x96>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	e7ee      	b.n	8006ab0 <_strtod_l+0xb0>
 8006ad2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ad4:	b13a      	cbz	r2, 8006ae6 <_strtod_l+0xe6>
 8006ad6:	2135      	movs	r1, #53	; 0x35
 8006ad8:	a820      	add	r0, sp, #128	; 0x80
 8006ada:	f002 fcb4 	bl	8009446 <__copybits>
 8006ade:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f002 f879 	bl	8008bd8 <_Bfree>
 8006ae6:	3f01      	subs	r7, #1
 8006ae8:	2f05      	cmp	r7, #5
 8006aea:	d807      	bhi.n	8006afc <_strtod_l+0xfc>
 8006aec:	e8df f007 	tbb	[pc, r7]
 8006af0:	1d180b0e 	.word	0x1d180b0e
 8006af4:	030e      	.short	0x030e
 8006af6:	f04f 0b00 	mov.w	fp, #0
 8006afa:	46da      	mov	sl, fp
 8006afc:	0728      	lsls	r0, r5, #28
 8006afe:	d5c1      	bpl.n	8006a84 <_strtod_l+0x84>
 8006b00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b04:	e7be      	b.n	8006a84 <_strtod_l+0x84>
 8006b06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006b0a:	e7f7      	b.n	8006afc <_strtod_l+0xfc>
 8006b0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006b10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006b12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b1e:	e7ed      	b.n	8006afc <_strtod_l+0xfc>
 8006b20:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006ca8 <_strtod_l+0x2a8>
 8006b24:	f04f 0a00 	mov.w	sl, #0
 8006b28:	e7e8      	b.n	8006afc <_strtod_l+0xfc>
 8006b2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006b2e:	f04f 3aff 	mov.w	sl, #4294967295
 8006b32:	e7e3      	b.n	8006afc <_strtod_l+0xfc>
 8006b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	921d      	str	r2, [sp, #116]	; 0x74
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b30      	cmp	r3, #48	; 0x30
 8006b3e:	d0f9      	beq.n	8006b34 <_strtod_l+0x134>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d09f      	beq.n	8006a84 <_strtod_l+0x84>
 8006b44:	2301      	movs	r3, #1
 8006b46:	f04f 0900 	mov.w	r9, #0
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b54:	464f      	mov	r7, r9
 8006b56:	220a      	movs	r2, #10
 8006b58:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006b5a:	7806      	ldrb	r6, [r0, #0]
 8006b5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b60:	b2d9      	uxtb	r1, r3
 8006b62:	2909      	cmp	r1, #9
 8006b64:	d92a      	bls.n	8006bbc <_strtod_l+0x1bc>
 8006b66:	9907      	ldr	r1, [sp, #28]
 8006b68:	462a      	mov	r2, r5
 8006b6a:	f002 fedd 	bl	8009928 <strncmp>
 8006b6e:	b398      	cbz	r0, 8006bd8 <_strtod_l+0x1d8>
 8006b70:	2000      	movs	r0, #0
 8006b72:	4633      	mov	r3, r6
 8006b74:	463d      	mov	r5, r7
 8006b76:	9007      	str	r0, [sp, #28]
 8006b78:	4602      	mov	r2, r0
 8006b7a:	2b65      	cmp	r3, #101	; 0x65
 8006b7c:	d001      	beq.n	8006b82 <_strtod_l+0x182>
 8006b7e:	2b45      	cmp	r3, #69	; 0x45
 8006b80:	d118      	bne.n	8006bb4 <_strtod_l+0x1b4>
 8006b82:	b91d      	cbnz	r5, 8006b8c <_strtod_l+0x18c>
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	4303      	orrs	r3, r0
 8006b88:	d098      	beq.n	8006abc <_strtod_l+0xbc>
 8006b8a:	2500      	movs	r5, #0
 8006b8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006b90:	f108 0301 	add.w	r3, r8, #1
 8006b94:	931d      	str	r3, [sp, #116]	; 0x74
 8006b96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006b9a:	2b2b      	cmp	r3, #43	; 0x2b
 8006b9c:	d075      	beq.n	8006c8a <_strtod_l+0x28a>
 8006b9e:	2b2d      	cmp	r3, #45	; 0x2d
 8006ba0:	d07b      	beq.n	8006c9a <_strtod_l+0x29a>
 8006ba2:	f04f 0c00 	mov.w	ip, #0
 8006ba6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006baa:	2909      	cmp	r1, #9
 8006bac:	f240 8082 	bls.w	8006cb4 <_strtod_l+0x2b4>
 8006bb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	e09d      	b.n	8006cf4 <_strtod_l+0x2f4>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e7c4      	b.n	8006b46 <_strtod_l+0x146>
 8006bbc:	2f08      	cmp	r7, #8
 8006bbe:	bfd8      	it	le
 8006bc0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006bc2:	f100 0001 	add.w	r0, r0, #1
 8006bc6:	bfda      	itte	le
 8006bc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bcc:	9309      	strle	r3, [sp, #36]	; 0x24
 8006bce:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006bd2:	3701      	adds	r7, #1
 8006bd4:	901d      	str	r0, [sp, #116]	; 0x74
 8006bd6:	e7bf      	b.n	8006b58 <_strtod_l+0x158>
 8006bd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bda:	195a      	adds	r2, r3, r5
 8006bdc:	921d      	str	r2, [sp, #116]	; 0x74
 8006bde:	5d5b      	ldrb	r3, [r3, r5]
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	d037      	beq.n	8006c54 <_strtod_l+0x254>
 8006be4:	9007      	str	r0, [sp, #28]
 8006be6:	463d      	mov	r5, r7
 8006be8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006bec:	2a09      	cmp	r2, #9
 8006bee:	d912      	bls.n	8006c16 <_strtod_l+0x216>
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	e7c2      	b.n	8006b7a <_strtod_l+0x17a>
 8006bf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	921d      	str	r2, [sp, #116]	; 0x74
 8006bfa:	785b      	ldrb	r3, [r3, #1]
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	2b30      	cmp	r3, #48	; 0x30
 8006c00:	d0f8      	beq.n	8006bf4 <_strtod_l+0x1f4>
 8006c02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006c06:	2a08      	cmp	r2, #8
 8006c08:	f200 84db 	bhi.w	80075c2 <_strtod_l+0xbc2>
 8006c0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006c0e:	9007      	str	r0, [sp, #28]
 8006c10:	2000      	movs	r0, #0
 8006c12:	920a      	str	r2, [sp, #40]	; 0x28
 8006c14:	4605      	mov	r5, r0
 8006c16:	3b30      	subs	r3, #48	; 0x30
 8006c18:	f100 0201 	add.w	r2, r0, #1
 8006c1c:	d014      	beq.n	8006c48 <_strtod_l+0x248>
 8006c1e:	9907      	ldr	r1, [sp, #28]
 8006c20:	4411      	add	r1, r2
 8006c22:	9107      	str	r1, [sp, #28]
 8006c24:	462a      	mov	r2, r5
 8006c26:	eb00 0e05 	add.w	lr, r0, r5
 8006c2a:	210a      	movs	r1, #10
 8006c2c:	4572      	cmp	r2, lr
 8006c2e:	d113      	bne.n	8006c58 <_strtod_l+0x258>
 8006c30:	182a      	adds	r2, r5, r0
 8006c32:	2a08      	cmp	r2, #8
 8006c34:	f105 0501 	add.w	r5, r5, #1
 8006c38:	4405      	add	r5, r0
 8006c3a:	dc1c      	bgt.n	8006c76 <_strtod_l+0x276>
 8006c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c3e:	220a      	movs	r2, #10
 8006c40:	fb02 3301 	mla	r3, r2, r1, r3
 8006c44:	9309      	str	r3, [sp, #36]	; 0x24
 8006c46:	2200      	movs	r2, #0
 8006c48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c4a:	1c59      	adds	r1, r3, #1
 8006c4c:	911d      	str	r1, [sp, #116]	; 0x74
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	4610      	mov	r0, r2
 8006c52:	e7c9      	b.n	8006be8 <_strtod_l+0x1e8>
 8006c54:	4638      	mov	r0, r7
 8006c56:	e7d2      	b.n	8006bfe <_strtod_l+0x1fe>
 8006c58:	2a08      	cmp	r2, #8
 8006c5a:	dc04      	bgt.n	8006c66 <_strtod_l+0x266>
 8006c5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c5e:	434e      	muls	r6, r1
 8006c60:	9609      	str	r6, [sp, #36]	; 0x24
 8006c62:	3201      	adds	r2, #1
 8006c64:	e7e2      	b.n	8006c2c <_strtod_l+0x22c>
 8006c66:	f102 0c01 	add.w	ip, r2, #1
 8006c6a:	f1bc 0f10 	cmp.w	ip, #16
 8006c6e:	bfd8      	it	le
 8006c70:	fb01 f909 	mulle.w	r9, r1, r9
 8006c74:	e7f5      	b.n	8006c62 <_strtod_l+0x262>
 8006c76:	2d10      	cmp	r5, #16
 8006c78:	bfdc      	itt	le
 8006c7a:	220a      	movle	r2, #10
 8006c7c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006c80:	e7e1      	b.n	8006c46 <_strtod_l+0x246>
 8006c82:	2300      	movs	r3, #0
 8006c84:	9307      	str	r3, [sp, #28]
 8006c86:	2201      	movs	r2, #1
 8006c88:	e77c      	b.n	8006b84 <_strtod_l+0x184>
 8006c8a:	f04f 0c00 	mov.w	ip, #0
 8006c8e:	f108 0302 	add.w	r3, r8, #2
 8006c92:	931d      	str	r3, [sp, #116]	; 0x74
 8006c94:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006c98:	e785      	b.n	8006ba6 <_strtod_l+0x1a6>
 8006c9a:	f04f 0c01 	mov.w	ip, #1
 8006c9e:	e7f6      	b.n	8006c8e <_strtod_l+0x28e>
 8006ca0:	0800adb0 	.word	0x0800adb0
 8006ca4:	0800ab60 	.word	0x0800ab60
 8006ca8:	7ff00000 	.word	0x7ff00000
 8006cac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cae:	1c59      	adds	r1, r3, #1
 8006cb0:	911d      	str	r1, [sp, #116]	; 0x74
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	2b30      	cmp	r3, #48	; 0x30
 8006cb6:	d0f9      	beq.n	8006cac <_strtod_l+0x2ac>
 8006cb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006cbc:	2908      	cmp	r1, #8
 8006cbe:	f63f af79 	bhi.w	8006bb4 <_strtod_l+0x1b4>
 8006cc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006cc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cc8:	9308      	str	r3, [sp, #32]
 8006cca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ccc:	1c59      	adds	r1, r3, #1
 8006cce:	911d      	str	r1, [sp, #116]	; 0x74
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006cd6:	2e09      	cmp	r6, #9
 8006cd8:	d937      	bls.n	8006d4a <_strtod_l+0x34a>
 8006cda:	9e08      	ldr	r6, [sp, #32]
 8006cdc:	1b89      	subs	r1, r1, r6
 8006cde:	2908      	cmp	r1, #8
 8006ce0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006ce4:	dc02      	bgt.n	8006cec <_strtod_l+0x2ec>
 8006ce6:	4576      	cmp	r6, lr
 8006ce8:	bfa8      	it	ge
 8006cea:	4676      	movge	r6, lr
 8006cec:	f1bc 0f00 	cmp.w	ip, #0
 8006cf0:	d000      	beq.n	8006cf4 <_strtod_l+0x2f4>
 8006cf2:	4276      	negs	r6, r6
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	d14f      	bne.n	8006d98 <_strtod_l+0x398>
 8006cf8:	9904      	ldr	r1, [sp, #16]
 8006cfa:	4301      	orrs	r1, r0
 8006cfc:	f47f aec2 	bne.w	8006a84 <_strtod_l+0x84>
 8006d00:	2a00      	cmp	r2, #0
 8006d02:	f47f aedb 	bne.w	8006abc <_strtod_l+0xbc>
 8006d06:	2b69      	cmp	r3, #105	; 0x69
 8006d08:	d027      	beq.n	8006d5a <_strtod_l+0x35a>
 8006d0a:	dc24      	bgt.n	8006d56 <_strtod_l+0x356>
 8006d0c:	2b49      	cmp	r3, #73	; 0x49
 8006d0e:	d024      	beq.n	8006d5a <_strtod_l+0x35a>
 8006d10:	2b4e      	cmp	r3, #78	; 0x4e
 8006d12:	f47f aed3 	bne.w	8006abc <_strtod_l+0xbc>
 8006d16:	499e      	ldr	r1, [pc, #632]	; (8006f90 <_strtod_l+0x590>)
 8006d18:	a81d      	add	r0, sp, #116	; 0x74
 8006d1a:	f001 fe41 	bl	80089a0 <__match>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f43f aecc 	beq.w	8006abc <_strtod_l+0xbc>
 8006d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b28      	cmp	r3, #40	; 0x28
 8006d2a:	d12d      	bne.n	8006d88 <_strtod_l+0x388>
 8006d2c:	4999      	ldr	r1, [pc, #612]	; (8006f94 <_strtod_l+0x594>)
 8006d2e:	aa20      	add	r2, sp, #128	; 0x80
 8006d30:	a81d      	add	r0, sp, #116	; 0x74
 8006d32:	f001 fe49 	bl	80089c8 <__hexnan>
 8006d36:	2805      	cmp	r0, #5
 8006d38:	d126      	bne.n	8006d88 <_strtod_l+0x388>
 8006d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006d40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d48:	e69c      	b.n	8006a84 <_strtod_l+0x84>
 8006d4a:	210a      	movs	r1, #10
 8006d4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006d50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d54:	e7b9      	b.n	8006cca <_strtod_l+0x2ca>
 8006d56:	2b6e      	cmp	r3, #110	; 0x6e
 8006d58:	e7db      	b.n	8006d12 <_strtod_l+0x312>
 8006d5a:	498f      	ldr	r1, [pc, #572]	; (8006f98 <_strtod_l+0x598>)
 8006d5c:	a81d      	add	r0, sp, #116	; 0x74
 8006d5e:	f001 fe1f 	bl	80089a0 <__match>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	f43f aeaa 	beq.w	8006abc <_strtod_l+0xbc>
 8006d68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d6a:	498c      	ldr	r1, [pc, #560]	; (8006f9c <_strtod_l+0x59c>)
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	a81d      	add	r0, sp, #116	; 0x74
 8006d70:	931d      	str	r3, [sp, #116]	; 0x74
 8006d72:	f001 fe15 	bl	80089a0 <__match>
 8006d76:	b910      	cbnz	r0, 8006d7e <_strtod_l+0x37e>
 8006d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	931d      	str	r3, [sp, #116]	; 0x74
 8006d7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006fac <_strtod_l+0x5ac>
 8006d82:	f04f 0a00 	mov.w	sl, #0
 8006d86:	e67d      	b.n	8006a84 <_strtod_l+0x84>
 8006d88:	4885      	ldr	r0, [pc, #532]	; (8006fa0 <_strtod_l+0x5a0>)
 8006d8a:	f002 fdb5 	bl	80098f8 <nan>
 8006d8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006d92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006d96:	e675      	b.n	8006a84 <_strtod_l+0x84>
 8006d98:	9b07      	ldr	r3, [sp, #28]
 8006d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9c:	1af3      	subs	r3, r6, r3
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	bf08      	it	eq
 8006da2:	462f      	moveq	r7, r5
 8006da4:	2d10      	cmp	r5, #16
 8006da6:	9308      	str	r3, [sp, #32]
 8006da8:	46a8      	mov	r8, r5
 8006daa:	bfa8      	it	ge
 8006dac:	f04f 0810 	movge.w	r8, #16
 8006db0:	f7f9 fbb0 	bl	8000514 <__aeabi_ui2d>
 8006db4:	2d09      	cmp	r5, #9
 8006db6:	4682      	mov	sl, r0
 8006db8:	468b      	mov	fp, r1
 8006dba:	dd13      	ble.n	8006de4 <_strtod_l+0x3e4>
 8006dbc:	4b79      	ldr	r3, [pc, #484]	; (8006fa4 <_strtod_l+0x5a4>)
 8006dbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006dc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006dc6:	f7f9 fc1f 	bl	8000608 <__aeabi_dmul>
 8006dca:	4682      	mov	sl, r0
 8006dcc:	4648      	mov	r0, r9
 8006dce:	468b      	mov	fp, r1
 8006dd0:	f7f9 fba0 	bl	8000514 <__aeabi_ui2d>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4650      	mov	r0, sl
 8006dda:	4659      	mov	r1, fp
 8006ddc:	f7f9 fa5e 	bl	800029c <__adddf3>
 8006de0:	4682      	mov	sl, r0
 8006de2:	468b      	mov	fp, r1
 8006de4:	2d0f      	cmp	r5, #15
 8006de6:	dc38      	bgt.n	8006e5a <_strtod_l+0x45a>
 8006de8:	9b08      	ldr	r3, [sp, #32]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f43f ae4a 	beq.w	8006a84 <_strtod_l+0x84>
 8006df0:	dd24      	ble.n	8006e3c <_strtod_l+0x43c>
 8006df2:	2b16      	cmp	r3, #22
 8006df4:	dc0b      	bgt.n	8006e0e <_strtod_l+0x40e>
 8006df6:	4d6b      	ldr	r5, [pc, #428]	; (8006fa4 <_strtod_l+0x5a4>)
 8006df8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006dfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e00:	4652      	mov	r2, sl
 8006e02:	465b      	mov	r3, fp
 8006e04:	f7f9 fc00 	bl	8000608 <__aeabi_dmul>
 8006e08:	4682      	mov	sl, r0
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	e63a      	b.n	8006a84 <_strtod_l+0x84>
 8006e0e:	9a08      	ldr	r2, [sp, #32]
 8006e10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e14:	4293      	cmp	r3, r2
 8006e16:	db20      	blt.n	8006e5a <_strtod_l+0x45a>
 8006e18:	4c62      	ldr	r4, [pc, #392]	; (8006fa4 <_strtod_l+0x5a4>)
 8006e1a:	f1c5 050f 	rsb	r5, r5, #15
 8006e1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e22:	4652      	mov	r2, sl
 8006e24:	465b      	mov	r3, fp
 8006e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e2a:	f7f9 fbed 	bl	8000608 <__aeabi_dmul>
 8006e2e:	9b08      	ldr	r3, [sp, #32]
 8006e30:	1b5d      	subs	r5, r3, r5
 8006e32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e3a:	e7e3      	b.n	8006e04 <_strtod_l+0x404>
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	3316      	adds	r3, #22
 8006e40:	db0b      	blt.n	8006e5a <_strtod_l+0x45a>
 8006e42:	9b07      	ldr	r3, [sp, #28]
 8006e44:	4a57      	ldr	r2, [pc, #348]	; (8006fa4 <_strtod_l+0x5a4>)
 8006e46:	1b9e      	subs	r6, r3, r6
 8006e48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006e4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e50:	4650      	mov	r0, sl
 8006e52:	4659      	mov	r1, fp
 8006e54:	f7f9 fd02 	bl	800085c <__aeabi_ddiv>
 8006e58:	e7d6      	b.n	8006e08 <_strtod_l+0x408>
 8006e5a:	9b08      	ldr	r3, [sp, #32]
 8006e5c:	eba5 0808 	sub.w	r8, r5, r8
 8006e60:	4498      	add	r8, r3
 8006e62:	f1b8 0f00 	cmp.w	r8, #0
 8006e66:	dd71      	ble.n	8006f4c <_strtod_l+0x54c>
 8006e68:	f018 030f 	ands.w	r3, r8, #15
 8006e6c:	d00a      	beq.n	8006e84 <_strtod_l+0x484>
 8006e6e:	494d      	ldr	r1, [pc, #308]	; (8006fa4 <_strtod_l+0x5a4>)
 8006e70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e74:	4652      	mov	r2, sl
 8006e76:	465b      	mov	r3, fp
 8006e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e7c:	f7f9 fbc4 	bl	8000608 <__aeabi_dmul>
 8006e80:	4682      	mov	sl, r0
 8006e82:	468b      	mov	fp, r1
 8006e84:	f038 080f 	bics.w	r8, r8, #15
 8006e88:	d04d      	beq.n	8006f26 <_strtod_l+0x526>
 8006e8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006e8e:	dd22      	ble.n	8006ed6 <_strtod_l+0x4d6>
 8006e90:	2500      	movs	r5, #0
 8006e92:	462e      	mov	r6, r5
 8006e94:	9509      	str	r5, [sp, #36]	; 0x24
 8006e96:	9507      	str	r5, [sp, #28]
 8006e98:	2322      	movs	r3, #34	; 0x22
 8006e9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006fac <_strtod_l+0x5ac>
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	f04f 0a00 	mov.w	sl, #0
 8006ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f43f adec 	beq.w	8006a84 <_strtod_l+0x84>
 8006eac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f001 fe92 	bl	8008bd8 <_Bfree>
 8006eb4:	9907      	ldr	r1, [sp, #28]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f001 fe8e 	bl	8008bd8 <_Bfree>
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f001 fe8a 	bl	8008bd8 <_Bfree>
 8006ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f001 fe86 	bl	8008bd8 <_Bfree>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f001 fe82 	bl	8008bd8 <_Bfree>
 8006ed4:	e5d6      	b.n	8006a84 <_strtod_l+0x84>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006edc:	4650      	mov	r0, sl
 8006ede:	4659      	mov	r1, fp
 8006ee0:	4699      	mov	r9, r3
 8006ee2:	f1b8 0f01 	cmp.w	r8, #1
 8006ee6:	dc21      	bgt.n	8006f2c <_strtod_l+0x52c>
 8006ee8:	b10b      	cbz	r3, 8006eee <_strtod_l+0x4ee>
 8006eea:	4682      	mov	sl, r0
 8006eec:	468b      	mov	fp, r1
 8006eee:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <_strtod_l+0x5a8>)
 8006ef0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006ef4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006ef8:	4652      	mov	r2, sl
 8006efa:	465b      	mov	r3, fp
 8006efc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f00:	f7f9 fb82 	bl	8000608 <__aeabi_dmul>
 8006f04:	4b29      	ldr	r3, [pc, #164]	; (8006fac <_strtod_l+0x5ac>)
 8006f06:	460a      	mov	r2, r1
 8006f08:	400b      	ands	r3, r1
 8006f0a:	4929      	ldr	r1, [pc, #164]	; (8006fb0 <_strtod_l+0x5b0>)
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	4682      	mov	sl, r0
 8006f10:	d8be      	bhi.n	8006e90 <_strtod_l+0x490>
 8006f12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f16:	428b      	cmp	r3, r1
 8006f18:	bf86      	itte	hi
 8006f1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006fb4 <_strtod_l+0x5b4>
 8006f1e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f26:	2300      	movs	r3, #0
 8006f28:	9304      	str	r3, [sp, #16]
 8006f2a:	e081      	b.n	8007030 <_strtod_l+0x630>
 8006f2c:	f018 0f01 	tst.w	r8, #1
 8006f30:	d007      	beq.n	8006f42 <_strtod_l+0x542>
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <_strtod_l+0x5a8>)
 8006f34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f7f9 fb64 	bl	8000608 <__aeabi_dmul>
 8006f40:	2301      	movs	r3, #1
 8006f42:	f109 0901 	add.w	r9, r9, #1
 8006f46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f4a:	e7ca      	b.n	8006ee2 <_strtod_l+0x4e2>
 8006f4c:	d0eb      	beq.n	8006f26 <_strtod_l+0x526>
 8006f4e:	f1c8 0800 	rsb	r8, r8, #0
 8006f52:	f018 020f 	ands.w	r2, r8, #15
 8006f56:	d00a      	beq.n	8006f6e <_strtod_l+0x56e>
 8006f58:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <_strtod_l+0x5a4>)
 8006f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5e:	4650      	mov	r0, sl
 8006f60:	4659      	mov	r1, fp
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 fc79 	bl	800085c <__aeabi_ddiv>
 8006f6a:	4682      	mov	sl, r0
 8006f6c:	468b      	mov	fp, r1
 8006f6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006f72:	d0d8      	beq.n	8006f26 <_strtod_l+0x526>
 8006f74:	f1b8 0f1f 	cmp.w	r8, #31
 8006f78:	dd1e      	ble.n	8006fb8 <_strtod_l+0x5b8>
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	462e      	mov	r6, r5
 8006f7e:	9509      	str	r5, [sp, #36]	; 0x24
 8006f80:	9507      	str	r5, [sp, #28]
 8006f82:	2322      	movs	r3, #34	; 0x22
 8006f84:	f04f 0a00 	mov.w	sl, #0
 8006f88:	f04f 0b00 	mov.w	fp, #0
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	e789      	b.n	8006ea4 <_strtod_l+0x4a4>
 8006f90:	0800ab31 	.word	0x0800ab31
 8006f94:	0800ab74 	.word	0x0800ab74
 8006f98:	0800ab29 	.word	0x0800ab29
 8006f9c:	0800acb4 	.word	0x0800acb4
 8006fa0:	0800af70 	.word	0x0800af70
 8006fa4:	0800ae50 	.word	0x0800ae50
 8006fa8:	0800ae28 	.word	0x0800ae28
 8006fac:	7ff00000 	.word	0x7ff00000
 8006fb0:	7ca00000 	.word	0x7ca00000
 8006fb4:	7fefffff 	.word	0x7fefffff
 8006fb8:	f018 0310 	ands.w	r3, r8, #16
 8006fbc:	bf18      	it	ne
 8006fbe:	236a      	movne	r3, #106	; 0x6a
 8006fc0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007378 <_strtod_l+0x978>
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	4650      	mov	r0, sl
 8006fc8:	4659      	mov	r1, fp
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f018 0f01 	tst.w	r8, #1
 8006fd0:	d004      	beq.n	8006fdc <_strtod_l+0x5dc>
 8006fd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006fd6:	f7f9 fb17 	bl	8000608 <__aeabi_dmul>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006fe0:	f109 0908 	add.w	r9, r9, #8
 8006fe4:	d1f2      	bne.n	8006fcc <_strtod_l+0x5cc>
 8006fe6:	b10b      	cbz	r3, 8006fec <_strtod_l+0x5ec>
 8006fe8:	4682      	mov	sl, r0
 8006fea:	468b      	mov	fp, r1
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	b1bb      	cbz	r3, 8007020 <_strtod_l+0x620>
 8006ff0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006ff4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	4659      	mov	r1, fp
 8006ffc:	dd10      	ble.n	8007020 <_strtod_l+0x620>
 8006ffe:	2b1f      	cmp	r3, #31
 8007000:	f340 8128 	ble.w	8007254 <_strtod_l+0x854>
 8007004:	2b34      	cmp	r3, #52	; 0x34
 8007006:	bfde      	ittt	le
 8007008:	3b20      	suble	r3, #32
 800700a:	f04f 32ff 	movle.w	r2, #4294967295
 800700e:	fa02 f303 	lslle.w	r3, r2, r3
 8007012:	f04f 0a00 	mov.w	sl, #0
 8007016:	bfcc      	ite	gt
 8007018:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800701c:	ea03 0b01 	andle.w	fp, r3, r1
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4650      	mov	r0, sl
 8007026:	4659      	mov	r1, fp
 8007028:	f7f9 fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800702c:	2800      	cmp	r0, #0
 800702e:	d1a4      	bne.n	8006f7a <_strtod_l+0x57a>
 8007030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007036:	462b      	mov	r3, r5
 8007038:	463a      	mov	r2, r7
 800703a:	4620      	mov	r0, r4
 800703c:	f001 fe38 	bl	8008cb0 <__s2b>
 8007040:	9009      	str	r0, [sp, #36]	; 0x24
 8007042:	2800      	cmp	r0, #0
 8007044:	f43f af24 	beq.w	8006e90 <_strtod_l+0x490>
 8007048:	9b07      	ldr	r3, [sp, #28]
 800704a:	1b9e      	subs	r6, r3, r6
 800704c:	9b08      	ldr	r3, [sp, #32]
 800704e:	2b00      	cmp	r3, #0
 8007050:	bfb4      	ite	lt
 8007052:	4633      	movlt	r3, r6
 8007054:	2300      	movge	r3, #0
 8007056:	9310      	str	r3, [sp, #64]	; 0x40
 8007058:	9b08      	ldr	r3, [sp, #32]
 800705a:	2500      	movs	r5, #0
 800705c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007060:	9318      	str	r3, [sp, #96]	; 0x60
 8007062:	462e      	mov	r6, r5
 8007064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007066:	4620      	mov	r0, r4
 8007068:	6859      	ldr	r1, [r3, #4]
 800706a:	f001 fd75 	bl	8008b58 <_Balloc>
 800706e:	9007      	str	r0, [sp, #28]
 8007070:	2800      	cmp	r0, #0
 8007072:	f43f af11 	beq.w	8006e98 <_strtod_l+0x498>
 8007076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	3202      	adds	r2, #2
 800707c:	f103 010c 	add.w	r1, r3, #12
 8007080:	0092      	lsls	r2, r2, #2
 8007082:	300c      	adds	r0, #12
 8007084:	f001 fd5a 	bl	8008b3c <memcpy>
 8007088:	ec4b ab10 	vmov	d0, sl, fp
 800708c:	aa20      	add	r2, sp, #128	; 0x80
 800708e:	a91f      	add	r1, sp, #124	; 0x7c
 8007090:	4620      	mov	r0, r4
 8007092:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007096:	f002 f947 	bl	8009328 <__d2b>
 800709a:	901e      	str	r0, [sp, #120]	; 0x78
 800709c:	2800      	cmp	r0, #0
 800709e:	f43f aefb 	beq.w	8006e98 <_strtod_l+0x498>
 80070a2:	2101      	movs	r1, #1
 80070a4:	4620      	mov	r0, r4
 80070a6:	f001 fe9d 	bl	8008de4 <__i2b>
 80070aa:	4606      	mov	r6, r0
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f43f aef3 	beq.w	8006e98 <_strtod_l+0x498>
 80070b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070b4:	9904      	ldr	r1, [sp, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bfab      	itete	ge
 80070ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80070bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80070be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80070c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80070c4:	bfac      	ite	ge
 80070c6:	eb03 0902 	addge.w	r9, r3, r2
 80070ca:	1ad7      	sublt	r7, r2, r3
 80070cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070ce:	eba3 0801 	sub.w	r8, r3, r1
 80070d2:	4490      	add	r8, r2
 80070d4:	4ba3      	ldr	r3, [pc, #652]	; (8007364 <_strtod_l+0x964>)
 80070d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80070da:	4598      	cmp	r8, r3
 80070dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80070e0:	f280 80cc 	bge.w	800727c <_strtod_l+0x87c>
 80070e4:	eba3 0308 	sub.w	r3, r3, r8
 80070e8:	2b1f      	cmp	r3, #31
 80070ea:	eba2 0203 	sub.w	r2, r2, r3
 80070ee:	f04f 0101 	mov.w	r1, #1
 80070f2:	f300 80b6 	bgt.w	8007262 <_strtod_l+0x862>
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	9311      	str	r3, [sp, #68]	; 0x44
 80070fc:	2300      	movs	r3, #0
 80070fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007100:	eb09 0802 	add.w	r8, r9, r2
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	45c1      	cmp	r9, r8
 8007108:	4417      	add	r7, r2
 800710a:	441f      	add	r7, r3
 800710c:	464b      	mov	r3, r9
 800710e:	bfa8      	it	ge
 8007110:	4643      	movge	r3, r8
 8007112:	42bb      	cmp	r3, r7
 8007114:	bfa8      	it	ge
 8007116:	463b      	movge	r3, r7
 8007118:	2b00      	cmp	r3, #0
 800711a:	bfc2      	ittt	gt
 800711c:	eba8 0803 	subgt.w	r8, r8, r3
 8007120:	1aff      	subgt	r7, r7, r3
 8007122:	eba9 0903 	subgt.w	r9, r9, r3
 8007126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	dd17      	ble.n	800715c <_strtod_l+0x75c>
 800712c:	4631      	mov	r1, r6
 800712e:	461a      	mov	r2, r3
 8007130:	4620      	mov	r0, r4
 8007132:	f001 ff13 	bl	8008f5c <__pow5mult>
 8007136:	4606      	mov	r6, r0
 8007138:	2800      	cmp	r0, #0
 800713a:	f43f aead 	beq.w	8006e98 <_strtod_l+0x498>
 800713e:	4601      	mov	r1, r0
 8007140:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007142:	4620      	mov	r0, r4
 8007144:	f001 fe64 	bl	8008e10 <__multiply>
 8007148:	900f      	str	r0, [sp, #60]	; 0x3c
 800714a:	2800      	cmp	r0, #0
 800714c:	f43f aea4 	beq.w	8006e98 <_strtod_l+0x498>
 8007150:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007152:	4620      	mov	r0, r4
 8007154:	f001 fd40 	bl	8008bd8 <_Bfree>
 8007158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800715a:	931e      	str	r3, [sp, #120]	; 0x78
 800715c:	f1b8 0f00 	cmp.w	r8, #0
 8007160:	f300 8091 	bgt.w	8007286 <_strtod_l+0x886>
 8007164:	9b08      	ldr	r3, [sp, #32]
 8007166:	2b00      	cmp	r3, #0
 8007168:	dd08      	ble.n	800717c <_strtod_l+0x77c>
 800716a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800716c:	9907      	ldr	r1, [sp, #28]
 800716e:	4620      	mov	r0, r4
 8007170:	f001 fef4 	bl	8008f5c <__pow5mult>
 8007174:	9007      	str	r0, [sp, #28]
 8007176:	2800      	cmp	r0, #0
 8007178:	f43f ae8e 	beq.w	8006e98 <_strtod_l+0x498>
 800717c:	2f00      	cmp	r7, #0
 800717e:	dd08      	ble.n	8007192 <_strtod_l+0x792>
 8007180:	9907      	ldr	r1, [sp, #28]
 8007182:	463a      	mov	r2, r7
 8007184:	4620      	mov	r0, r4
 8007186:	f001 ff43 	bl	8009010 <__lshift>
 800718a:	9007      	str	r0, [sp, #28]
 800718c:	2800      	cmp	r0, #0
 800718e:	f43f ae83 	beq.w	8006e98 <_strtod_l+0x498>
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	dd08      	ble.n	80071aa <_strtod_l+0x7aa>
 8007198:	4631      	mov	r1, r6
 800719a:	464a      	mov	r2, r9
 800719c:	4620      	mov	r0, r4
 800719e:	f001 ff37 	bl	8009010 <__lshift>
 80071a2:	4606      	mov	r6, r0
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f43f ae77 	beq.w	8006e98 <_strtod_l+0x498>
 80071aa:	9a07      	ldr	r2, [sp, #28]
 80071ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 ffb6 	bl	8009120 <__mdiff>
 80071b4:	4605      	mov	r5, r0
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f43f ae6e 	beq.w	8006e98 <_strtod_l+0x498>
 80071bc:	68c3      	ldr	r3, [r0, #12]
 80071be:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c0:	2300      	movs	r3, #0
 80071c2:	60c3      	str	r3, [r0, #12]
 80071c4:	4631      	mov	r1, r6
 80071c6:	f001 ff8f 	bl	80090e8 <__mcmp>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	da65      	bge.n	800729a <_strtod_l+0x89a>
 80071ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d0:	ea53 030a 	orrs.w	r3, r3, sl
 80071d4:	f040 8087 	bne.w	80072e6 <_strtod_l+0x8e6>
 80071d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f040 8082 	bne.w	80072e6 <_strtod_l+0x8e6>
 80071e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071e6:	0d1b      	lsrs	r3, r3, #20
 80071e8:	051b      	lsls	r3, r3, #20
 80071ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80071ee:	d97a      	bls.n	80072e6 <_strtod_l+0x8e6>
 80071f0:	696b      	ldr	r3, [r5, #20]
 80071f2:	b913      	cbnz	r3, 80071fa <_strtod_l+0x7fa>
 80071f4:	692b      	ldr	r3, [r5, #16]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	dd75      	ble.n	80072e6 <_strtod_l+0x8e6>
 80071fa:	4629      	mov	r1, r5
 80071fc:	2201      	movs	r2, #1
 80071fe:	4620      	mov	r0, r4
 8007200:	f001 ff06 	bl	8009010 <__lshift>
 8007204:	4631      	mov	r1, r6
 8007206:	4605      	mov	r5, r0
 8007208:	f001 ff6e 	bl	80090e8 <__mcmp>
 800720c:	2800      	cmp	r0, #0
 800720e:	dd6a      	ble.n	80072e6 <_strtod_l+0x8e6>
 8007210:	9904      	ldr	r1, [sp, #16]
 8007212:	4a55      	ldr	r2, [pc, #340]	; (8007368 <_strtod_l+0x968>)
 8007214:	465b      	mov	r3, fp
 8007216:	2900      	cmp	r1, #0
 8007218:	f000 8085 	beq.w	8007326 <_strtod_l+0x926>
 800721c:	ea02 010b 	and.w	r1, r2, fp
 8007220:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007224:	dc7f      	bgt.n	8007326 <_strtod_l+0x926>
 8007226:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800722a:	f77f aeaa 	ble.w	8006f82 <_strtod_l+0x582>
 800722e:	4a4f      	ldr	r2, [pc, #316]	; (800736c <_strtod_l+0x96c>)
 8007230:	2300      	movs	r3, #0
 8007232:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007236:	4650      	mov	r0, sl
 8007238:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800723c:	4659      	mov	r1, fp
 800723e:	f7f9 f9e3 	bl	8000608 <__aeabi_dmul>
 8007242:	460b      	mov	r3, r1
 8007244:	4303      	orrs	r3, r0
 8007246:	bf08      	it	eq
 8007248:	2322      	moveq	r3, #34	; 0x22
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	bf08      	it	eq
 8007250:	6023      	streq	r3, [r4, #0]
 8007252:	e62b      	b.n	8006eac <_strtod_l+0x4ac>
 8007254:	f04f 32ff 	mov.w	r2, #4294967295
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	ea03 0a0a 	and.w	sl, r3, sl
 8007260:	e6de      	b.n	8007020 <_strtod_l+0x620>
 8007262:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007266:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800726a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800726e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007272:	fa01 f308 	lsl.w	r3, r1, r8
 8007276:	930c      	str	r3, [sp, #48]	; 0x30
 8007278:	9111      	str	r1, [sp, #68]	; 0x44
 800727a:	e741      	b.n	8007100 <_strtod_l+0x700>
 800727c:	2300      	movs	r3, #0
 800727e:	930c      	str	r3, [sp, #48]	; 0x30
 8007280:	2301      	movs	r3, #1
 8007282:	9311      	str	r3, [sp, #68]	; 0x44
 8007284:	e73c      	b.n	8007100 <_strtod_l+0x700>
 8007286:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007288:	4642      	mov	r2, r8
 800728a:	4620      	mov	r0, r4
 800728c:	f001 fec0 	bl	8009010 <__lshift>
 8007290:	901e      	str	r0, [sp, #120]	; 0x78
 8007292:	2800      	cmp	r0, #0
 8007294:	f47f af66 	bne.w	8007164 <_strtod_l+0x764>
 8007298:	e5fe      	b.n	8006e98 <_strtod_l+0x498>
 800729a:	465f      	mov	r7, fp
 800729c:	d16e      	bne.n	800737c <_strtod_l+0x97c>
 800729e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072a4:	b342      	cbz	r2, 80072f8 <_strtod_l+0x8f8>
 80072a6:	4a32      	ldr	r2, [pc, #200]	; (8007370 <_strtod_l+0x970>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d128      	bne.n	80072fe <_strtod_l+0x8fe>
 80072ac:	9b04      	ldr	r3, [sp, #16]
 80072ae:	4650      	mov	r0, sl
 80072b0:	b1eb      	cbz	r3, 80072ee <_strtod_l+0x8ee>
 80072b2:	4a2d      	ldr	r2, [pc, #180]	; (8007368 <_strtod_l+0x968>)
 80072b4:	403a      	ands	r2, r7
 80072b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80072ba:	f04f 31ff 	mov.w	r1, #4294967295
 80072be:	d819      	bhi.n	80072f4 <_strtod_l+0x8f4>
 80072c0:	0d12      	lsrs	r2, r2, #20
 80072c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072c6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ca:	4298      	cmp	r0, r3
 80072cc:	d117      	bne.n	80072fe <_strtod_l+0x8fe>
 80072ce:	4b29      	ldr	r3, [pc, #164]	; (8007374 <_strtod_l+0x974>)
 80072d0:	429f      	cmp	r7, r3
 80072d2:	d102      	bne.n	80072da <_strtod_l+0x8da>
 80072d4:	3001      	adds	r0, #1
 80072d6:	f43f addf 	beq.w	8006e98 <_strtod_l+0x498>
 80072da:	4b23      	ldr	r3, [pc, #140]	; (8007368 <_strtod_l+0x968>)
 80072dc:	403b      	ands	r3, r7
 80072de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80072e2:	f04f 0a00 	mov.w	sl, #0
 80072e6:	9b04      	ldr	r3, [sp, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1a0      	bne.n	800722e <_strtod_l+0x82e>
 80072ec:	e5de      	b.n	8006eac <_strtod_l+0x4ac>
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295
 80072f2:	e7ea      	b.n	80072ca <_strtod_l+0x8ca>
 80072f4:	460b      	mov	r3, r1
 80072f6:	e7e8      	b.n	80072ca <_strtod_l+0x8ca>
 80072f8:	ea53 030a 	orrs.w	r3, r3, sl
 80072fc:	d088      	beq.n	8007210 <_strtod_l+0x810>
 80072fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007300:	b1db      	cbz	r3, 800733a <_strtod_l+0x93a>
 8007302:	423b      	tst	r3, r7
 8007304:	d0ef      	beq.n	80072e6 <_strtod_l+0x8e6>
 8007306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007308:	9a04      	ldr	r2, [sp, #16]
 800730a:	4650      	mov	r0, sl
 800730c:	4659      	mov	r1, fp
 800730e:	b1c3      	cbz	r3, 8007342 <_strtod_l+0x942>
 8007310:	f7ff fb58 	bl	80069c4 <sulp>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800731c:	f7f8 ffbe 	bl	800029c <__adddf3>
 8007320:	4682      	mov	sl, r0
 8007322:	468b      	mov	fp, r1
 8007324:	e7df      	b.n	80072e6 <_strtod_l+0x8e6>
 8007326:	4013      	ands	r3, r2
 8007328:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800732c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007330:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007334:	f04f 3aff 	mov.w	sl, #4294967295
 8007338:	e7d5      	b.n	80072e6 <_strtod_l+0x8e6>
 800733a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800733c:	ea13 0f0a 	tst.w	r3, sl
 8007340:	e7e0      	b.n	8007304 <_strtod_l+0x904>
 8007342:	f7ff fb3f 	bl	80069c4 <sulp>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800734e:	f7f8 ffa3 	bl	8000298 <__aeabi_dsub>
 8007352:	2200      	movs	r2, #0
 8007354:	2300      	movs	r3, #0
 8007356:	4682      	mov	sl, r0
 8007358:	468b      	mov	fp, r1
 800735a:	f7f9 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800735e:	2800      	cmp	r0, #0
 8007360:	d0c1      	beq.n	80072e6 <_strtod_l+0x8e6>
 8007362:	e60e      	b.n	8006f82 <_strtod_l+0x582>
 8007364:	fffffc02 	.word	0xfffffc02
 8007368:	7ff00000 	.word	0x7ff00000
 800736c:	39500000 	.word	0x39500000
 8007370:	000fffff 	.word	0x000fffff
 8007374:	7fefffff 	.word	0x7fefffff
 8007378:	0800ab88 	.word	0x0800ab88
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	f002 f82e 	bl	80093e0 <__ratio>
 8007384:	ec59 8b10 	vmov	r8, r9, d0
 8007388:	ee10 0a10 	vmov	r0, s0
 800738c:	2200      	movs	r2, #0
 800738e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007392:	4649      	mov	r1, r9
 8007394:	f7f9 fbb4 	bl	8000b00 <__aeabi_dcmple>
 8007398:	2800      	cmp	r0, #0
 800739a:	d07c      	beq.n	8007496 <_strtod_l+0xa96>
 800739c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d04c      	beq.n	800743c <_strtod_l+0xa3c>
 80073a2:	4b95      	ldr	r3, [pc, #596]	; (80075f8 <_strtod_l+0xbf8>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80075f8 <_strtod_l+0xbf8>
 80073ae:	f04f 0800 	mov.w	r8, #0
 80073b2:	4b92      	ldr	r3, [pc, #584]	; (80075fc <_strtod_l+0xbfc>)
 80073b4:	403b      	ands	r3, r7
 80073b6:	9311      	str	r3, [sp, #68]	; 0x44
 80073b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80073ba:	4b91      	ldr	r3, [pc, #580]	; (8007600 <_strtod_l+0xc00>)
 80073bc:	429a      	cmp	r2, r3
 80073be:	f040 80b2 	bne.w	8007526 <_strtod_l+0xb26>
 80073c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80073ce:	ec4b ab10 	vmov	d0, sl, fp
 80073d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80073d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073da:	f001 ff29 	bl	8009230 <__ulp>
 80073de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073e2:	ec53 2b10 	vmov	r2, r3, d0
 80073e6:	f7f9 f90f 	bl	8000608 <__aeabi_dmul>
 80073ea:	4652      	mov	r2, sl
 80073ec:	465b      	mov	r3, fp
 80073ee:	f7f8 ff55 	bl	800029c <__adddf3>
 80073f2:	460b      	mov	r3, r1
 80073f4:	4981      	ldr	r1, [pc, #516]	; (80075fc <_strtod_l+0xbfc>)
 80073f6:	4a83      	ldr	r2, [pc, #524]	; (8007604 <_strtod_l+0xc04>)
 80073f8:	4019      	ands	r1, r3
 80073fa:	4291      	cmp	r1, r2
 80073fc:	4682      	mov	sl, r0
 80073fe:	d95e      	bls.n	80074be <_strtod_l+0xabe>
 8007400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007402:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007406:	4293      	cmp	r3, r2
 8007408:	d103      	bne.n	8007412 <_strtod_l+0xa12>
 800740a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740c:	3301      	adds	r3, #1
 800740e:	f43f ad43 	beq.w	8006e98 <_strtod_l+0x498>
 8007412:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007610 <_strtod_l+0xc10>
 8007416:	f04f 3aff 	mov.w	sl, #4294967295
 800741a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800741c:	4620      	mov	r0, r4
 800741e:	f001 fbdb 	bl	8008bd8 <_Bfree>
 8007422:	9907      	ldr	r1, [sp, #28]
 8007424:	4620      	mov	r0, r4
 8007426:	f001 fbd7 	bl	8008bd8 <_Bfree>
 800742a:	4631      	mov	r1, r6
 800742c:	4620      	mov	r0, r4
 800742e:	f001 fbd3 	bl	8008bd8 <_Bfree>
 8007432:	4629      	mov	r1, r5
 8007434:	4620      	mov	r0, r4
 8007436:	f001 fbcf 	bl	8008bd8 <_Bfree>
 800743a:	e613      	b.n	8007064 <_strtod_l+0x664>
 800743c:	f1ba 0f00 	cmp.w	sl, #0
 8007440:	d11b      	bne.n	800747a <_strtod_l+0xa7a>
 8007442:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007446:	b9f3      	cbnz	r3, 8007486 <_strtod_l+0xa86>
 8007448:	4b6b      	ldr	r3, [pc, #428]	; (80075f8 <_strtod_l+0xbf8>)
 800744a:	2200      	movs	r2, #0
 800744c:	4640      	mov	r0, r8
 800744e:	4649      	mov	r1, r9
 8007450:	f7f9 fb4c 	bl	8000aec <__aeabi_dcmplt>
 8007454:	b9d0      	cbnz	r0, 800748c <_strtod_l+0xa8c>
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	4b6b      	ldr	r3, [pc, #428]	; (8007608 <_strtod_l+0xc08>)
 800745c:	2200      	movs	r2, #0
 800745e:	f7f9 f8d3 	bl	8000608 <__aeabi_dmul>
 8007462:	4680      	mov	r8, r0
 8007464:	4689      	mov	r9, r1
 8007466:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800746a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800746e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007470:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007474:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007478:	e79b      	b.n	80073b2 <_strtod_l+0x9b2>
 800747a:	f1ba 0f01 	cmp.w	sl, #1
 800747e:	d102      	bne.n	8007486 <_strtod_l+0xa86>
 8007480:	2f00      	cmp	r7, #0
 8007482:	f43f ad7e 	beq.w	8006f82 <_strtod_l+0x582>
 8007486:	4b61      	ldr	r3, [pc, #388]	; (800760c <_strtod_l+0xc0c>)
 8007488:	2200      	movs	r2, #0
 800748a:	e78c      	b.n	80073a6 <_strtod_l+0x9a6>
 800748c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007608 <_strtod_l+0xc08>
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	e7e7      	b.n	8007466 <_strtod_l+0xa66>
 8007496:	4b5c      	ldr	r3, [pc, #368]	; (8007608 <_strtod_l+0xc08>)
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	2200      	movs	r2, #0
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074a4:	4680      	mov	r8, r0
 80074a6:	4689      	mov	r9, r1
 80074a8:	b933      	cbnz	r3, 80074b8 <_strtod_l+0xab8>
 80074aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074ae:	9012      	str	r0, [sp, #72]	; 0x48
 80074b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80074b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80074b6:	e7dd      	b.n	8007474 <_strtod_l+0xa74>
 80074b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80074bc:	e7f9      	b.n	80074b2 <_strtod_l+0xab2>
 80074be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80074c2:	9b04      	ldr	r3, [sp, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1a8      	bne.n	800741a <_strtod_l+0xa1a>
 80074c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074ce:	0d1b      	lsrs	r3, r3, #20
 80074d0:	051b      	lsls	r3, r3, #20
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d1a1      	bne.n	800741a <_strtod_l+0xa1a>
 80074d6:	4640      	mov	r0, r8
 80074d8:	4649      	mov	r1, r9
 80074da:	f7f9 fbdd 	bl	8000c98 <__aeabi_d2lz>
 80074de:	f7f9 f865 	bl	80005ac <__aeabi_l2d>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4640      	mov	r0, r8
 80074e8:	4649      	mov	r1, r9
 80074ea:	f7f8 fed5 	bl	8000298 <__aeabi_dsub>
 80074ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074f4:	ea43 030a 	orr.w	r3, r3, sl
 80074f8:	4313      	orrs	r3, r2
 80074fa:	4680      	mov	r8, r0
 80074fc:	4689      	mov	r9, r1
 80074fe:	d053      	beq.n	80075a8 <_strtod_l+0xba8>
 8007500:	a335      	add	r3, pc, #212	; (adr r3, 80075d8 <_strtod_l+0xbd8>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 faf1 	bl	8000aec <__aeabi_dcmplt>
 800750a:	2800      	cmp	r0, #0
 800750c:	f47f acce 	bne.w	8006eac <_strtod_l+0x4ac>
 8007510:	a333      	add	r3, pc, #204	; (adr r3, 80075e0 <_strtod_l+0xbe0>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	4640      	mov	r0, r8
 8007518:	4649      	mov	r1, r9
 800751a:	f7f9 fb05 	bl	8000b28 <__aeabi_dcmpgt>
 800751e:	2800      	cmp	r0, #0
 8007520:	f43f af7b 	beq.w	800741a <_strtod_l+0xa1a>
 8007524:	e4c2      	b.n	8006eac <_strtod_l+0x4ac>
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	b333      	cbz	r3, 8007578 <_strtod_l+0xb78>
 800752a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800752c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007530:	d822      	bhi.n	8007578 <_strtod_l+0xb78>
 8007532:	a32d      	add	r3, pc, #180	; (adr r3, 80075e8 <_strtod_l+0xbe8>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	4640      	mov	r0, r8
 800753a:	4649      	mov	r1, r9
 800753c:	f7f9 fae0 	bl	8000b00 <__aeabi_dcmple>
 8007540:	b1a0      	cbz	r0, 800756c <_strtod_l+0xb6c>
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	f7f9 fb37 	bl	8000bb8 <__aeabi_d2uiz>
 800754a:	2801      	cmp	r0, #1
 800754c:	bf38      	it	cc
 800754e:	2001      	movcc	r0, #1
 8007550:	f7f8 ffe0 	bl	8000514 <__aeabi_ui2d>
 8007554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007556:	4680      	mov	r8, r0
 8007558:	4689      	mov	r9, r1
 800755a:	bb13      	cbnz	r3, 80075a2 <_strtod_l+0xba2>
 800755c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007560:	9014      	str	r0, [sp, #80]	; 0x50
 8007562:	9315      	str	r3, [sp, #84]	; 0x54
 8007564:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007568:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800756c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800756e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007570:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	930d      	str	r3, [sp, #52]	; 0x34
 8007578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800757c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007580:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007584:	f001 fe54 	bl	8009230 <__ulp>
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800758c:	ec53 2b10 	vmov	r2, r3, d0
 8007590:	f7f9 f83a 	bl	8000608 <__aeabi_dmul>
 8007594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007598:	f7f8 fe80 	bl	800029c <__adddf3>
 800759c:	4682      	mov	sl, r0
 800759e:	468b      	mov	fp, r1
 80075a0:	e78f      	b.n	80074c2 <_strtod_l+0xac2>
 80075a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80075a6:	e7dd      	b.n	8007564 <_strtod_l+0xb64>
 80075a8:	a311      	add	r3, pc, #68	; (adr r3, 80075f0 <_strtod_l+0xbf0>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	f7f9 fa9d 	bl	8000aec <__aeabi_dcmplt>
 80075b2:	e7b4      	b.n	800751e <_strtod_l+0xb1e>
 80075b4:	2300      	movs	r3, #0
 80075b6:	930e      	str	r3, [sp, #56]	; 0x38
 80075b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	f7ff ba65 	b.w	8006a8c <_strtod_l+0x8c>
 80075c2:	2b65      	cmp	r3, #101	; 0x65
 80075c4:	f43f ab5d 	beq.w	8006c82 <_strtod_l+0x282>
 80075c8:	2b45      	cmp	r3, #69	; 0x45
 80075ca:	f43f ab5a 	beq.w	8006c82 <_strtod_l+0x282>
 80075ce:	2201      	movs	r2, #1
 80075d0:	f7ff bb92 	b.w	8006cf8 <_strtod_l+0x2f8>
 80075d4:	f3af 8000 	nop.w
 80075d8:	94a03595 	.word	0x94a03595
 80075dc:	3fdfffff 	.word	0x3fdfffff
 80075e0:	35afe535 	.word	0x35afe535
 80075e4:	3fe00000 	.word	0x3fe00000
 80075e8:	ffc00000 	.word	0xffc00000
 80075ec:	41dfffff 	.word	0x41dfffff
 80075f0:	94a03595 	.word	0x94a03595
 80075f4:	3fcfffff 	.word	0x3fcfffff
 80075f8:	3ff00000 	.word	0x3ff00000
 80075fc:	7ff00000 	.word	0x7ff00000
 8007600:	7fe00000 	.word	0x7fe00000
 8007604:	7c9fffff 	.word	0x7c9fffff
 8007608:	3fe00000 	.word	0x3fe00000
 800760c:	bff00000 	.word	0xbff00000
 8007610:	7fefffff 	.word	0x7fefffff

08007614 <_strtod_r>:
 8007614:	4b01      	ldr	r3, [pc, #4]	; (800761c <_strtod_r+0x8>)
 8007616:	f7ff b9f3 	b.w	8006a00 <_strtod_l>
 800761a:	bf00      	nop
 800761c:	20000078 	.word	0x20000078

08007620 <_strtol_l.isra.0>:
 8007620:	2b01      	cmp	r3, #1
 8007622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007626:	d001      	beq.n	800762c <_strtol_l.isra.0+0xc>
 8007628:	2b24      	cmp	r3, #36	; 0x24
 800762a:	d906      	bls.n	800763a <_strtol_l.isra.0+0x1a>
 800762c:	f7fe faf8 	bl	8005c20 <__errno>
 8007630:	2316      	movs	r3, #22
 8007632:	6003      	str	r3, [r0, #0]
 8007634:	2000      	movs	r0, #0
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	4f3a      	ldr	r7, [pc, #232]	; (8007724 <_strtol_l.isra.0+0x104>)
 800763c:	468e      	mov	lr, r1
 800763e:	4676      	mov	r6, lr
 8007640:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007644:	5de5      	ldrb	r5, [r4, r7]
 8007646:	f015 0508 	ands.w	r5, r5, #8
 800764a:	d1f8      	bne.n	800763e <_strtol_l.isra.0+0x1e>
 800764c:	2c2d      	cmp	r4, #45	; 0x2d
 800764e:	d134      	bne.n	80076ba <_strtol_l.isra.0+0x9a>
 8007650:	f89e 4000 	ldrb.w	r4, [lr]
 8007654:	f04f 0801 	mov.w	r8, #1
 8007658:	f106 0e02 	add.w	lr, r6, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d05c      	beq.n	800771a <_strtol_l.isra.0+0xfa>
 8007660:	2b10      	cmp	r3, #16
 8007662:	d10c      	bne.n	800767e <_strtol_l.isra.0+0x5e>
 8007664:	2c30      	cmp	r4, #48	; 0x30
 8007666:	d10a      	bne.n	800767e <_strtol_l.isra.0+0x5e>
 8007668:	f89e 4000 	ldrb.w	r4, [lr]
 800766c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007670:	2c58      	cmp	r4, #88	; 0x58
 8007672:	d14d      	bne.n	8007710 <_strtol_l.isra.0+0xf0>
 8007674:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007678:	2310      	movs	r3, #16
 800767a:	f10e 0e02 	add.w	lr, lr, #2
 800767e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007682:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007686:	2600      	movs	r6, #0
 8007688:	fbbc f9f3 	udiv	r9, ip, r3
 800768c:	4635      	mov	r5, r6
 800768e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007692:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007696:	2f09      	cmp	r7, #9
 8007698:	d818      	bhi.n	80076cc <_strtol_l.isra.0+0xac>
 800769a:	463c      	mov	r4, r7
 800769c:	42a3      	cmp	r3, r4
 800769e:	dd24      	ble.n	80076ea <_strtol_l.isra.0+0xca>
 80076a0:	2e00      	cmp	r6, #0
 80076a2:	db1f      	blt.n	80076e4 <_strtol_l.isra.0+0xc4>
 80076a4:	45a9      	cmp	r9, r5
 80076a6:	d31d      	bcc.n	80076e4 <_strtol_l.isra.0+0xc4>
 80076a8:	d101      	bne.n	80076ae <_strtol_l.isra.0+0x8e>
 80076aa:	45a2      	cmp	sl, r4
 80076ac:	db1a      	blt.n	80076e4 <_strtol_l.isra.0+0xc4>
 80076ae:	fb05 4503 	mla	r5, r5, r3, r4
 80076b2:	2601      	movs	r6, #1
 80076b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80076b8:	e7eb      	b.n	8007692 <_strtol_l.isra.0+0x72>
 80076ba:	2c2b      	cmp	r4, #43	; 0x2b
 80076bc:	bf08      	it	eq
 80076be:	f89e 4000 	ldrbeq.w	r4, [lr]
 80076c2:	46a8      	mov	r8, r5
 80076c4:	bf08      	it	eq
 80076c6:	f106 0e02 	addeq.w	lr, r6, #2
 80076ca:	e7c7      	b.n	800765c <_strtol_l.isra.0+0x3c>
 80076cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80076d0:	2f19      	cmp	r7, #25
 80076d2:	d801      	bhi.n	80076d8 <_strtol_l.isra.0+0xb8>
 80076d4:	3c37      	subs	r4, #55	; 0x37
 80076d6:	e7e1      	b.n	800769c <_strtol_l.isra.0+0x7c>
 80076d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80076dc:	2f19      	cmp	r7, #25
 80076de:	d804      	bhi.n	80076ea <_strtol_l.isra.0+0xca>
 80076e0:	3c57      	subs	r4, #87	; 0x57
 80076e2:	e7db      	b.n	800769c <_strtol_l.isra.0+0x7c>
 80076e4:	f04f 36ff 	mov.w	r6, #4294967295
 80076e8:	e7e4      	b.n	80076b4 <_strtol_l.isra.0+0x94>
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	da05      	bge.n	80076fa <_strtol_l.isra.0+0xda>
 80076ee:	2322      	movs	r3, #34	; 0x22
 80076f0:	6003      	str	r3, [r0, #0]
 80076f2:	4665      	mov	r5, ip
 80076f4:	b942      	cbnz	r2, 8007708 <_strtol_l.isra.0+0xe8>
 80076f6:	4628      	mov	r0, r5
 80076f8:	e79d      	b.n	8007636 <_strtol_l.isra.0+0x16>
 80076fa:	f1b8 0f00 	cmp.w	r8, #0
 80076fe:	d000      	beq.n	8007702 <_strtol_l.isra.0+0xe2>
 8007700:	426d      	negs	r5, r5
 8007702:	2a00      	cmp	r2, #0
 8007704:	d0f7      	beq.n	80076f6 <_strtol_l.isra.0+0xd6>
 8007706:	b10e      	cbz	r6, 800770c <_strtol_l.isra.0+0xec>
 8007708:	f10e 31ff 	add.w	r1, lr, #4294967295
 800770c:	6011      	str	r1, [r2, #0]
 800770e:	e7f2      	b.n	80076f6 <_strtol_l.isra.0+0xd6>
 8007710:	2430      	movs	r4, #48	; 0x30
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1b3      	bne.n	800767e <_strtol_l.isra.0+0x5e>
 8007716:	2308      	movs	r3, #8
 8007718:	e7b1      	b.n	800767e <_strtol_l.isra.0+0x5e>
 800771a:	2c30      	cmp	r4, #48	; 0x30
 800771c:	d0a4      	beq.n	8007668 <_strtol_l.isra.0+0x48>
 800771e:	230a      	movs	r3, #10
 8007720:	e7ad      	b.n	800767e <_strtol_l.isra.0+0x5e>
 8007722:	bf00      	nop
 8007724:	0800abb1 	.word	0x0800abb1

08007728 <_strtol_r>:
 8007728:	f7ff bf7a 	b.w	8007620 <_strtol_l.isra.0>

0800772c <quorem>:
 800772c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	6903      	ldr	r3, [r0, #16]
 8007732:	690c      	ldr	r4, [r1, #16]
 8007734:	42a3      	cmp	r3, r4
 8007736:	4607      	mov	r7, r0
 8007738:	f2c0 8081 	blt.w	800783e <quorem+0x112>
 800773c:	3c01      	subs	r4, #1
 800773e:	f101 0814 	add.w	r8, r1, #20
 8007742:	f100 0514 	add.w	r5, r0, #20
 8007746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007754:	3301      	adds	r3, #1
 8007756:	429a      	cmp	r2, r3
 8007758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800775c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007760:	fbb2 f6f3 	udiv	r6, r2, r3
 8007764:	d331      	bcc.n	80077ca <quorem+0x9e>
 8007766:	f04f 0e00 	mov.w	lr, #0
 800776a:	4640      	mov	r0, r8
 800776c:	46ac      	mov	ip, r5
 800776e:	46f2      	mov	sl, lr
 8007770:	f850 2b04 	ldr.w	r2, [r0], #4
 8007774:	b293      	uxth	r3, r2
 8007776:	fb06 e303 	mla	r3, r6, r3, lr
 800777a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800777e:	b29b      	uxth	r3, r3
 8007780:	ebaa 0303 	sub.w	r3, sl, r3
 8007784:	0c12      	lsrs	r2, r2, #16
 8007786:	f8dc a000 	ldr.w	sl, [ip]
 800778a:	fb06 e202 	mla	r2, r6, r2, lr
 800778e:	fa13 f38a 	uxtah	r3, r3, sl
 8007792:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007796:	fa1f fa82 	uxth.w	sl, r2
 800779a:	f8dc 2000 	ldr.w	r2, [ip]
 800779e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077ac:	4581      	cmp	r9, r0
 80077ae:	f84c 3b04 	str.w	r3, [ip], #4
 80077b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077b6:	d2db      	bcs.n	8007770 <quorem+0x44>
 80077b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80077bc:	b92b      	cbnz	r3, 80077ca <quorem+0x9e>
 80077be:	9b01      	ldr	r3, [sp, #4]
 80077c0:	3b04      	subs	r3, #4
 80077c2:	429d      	cmp	r5, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	d32e      	bcc.n	8007826 <quorem+0xfa>
 80077c8:	613c      	str	r4, [r7, #16]
 80077ca:	4638      	mov	r0, r7
 80077cc:	f001 fc8c 	bl	80090e8 <__mcmp>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	db24      	blt.n	800781e <quorem+0xf2>
 80077d4:	3601      	adds	r6, #1
 80077d6:	4628      	mov	r0, r5
 80077d8:	f04f 0c00 	mov.w	ip, #0
 80077dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80077e0:	f8d0 e000 	ldr.w	lr, [r0]
 80077e4:	b293      	uxth	r3, r2
 80077e6:	ebac 0303 	sub.w	r3, ip, r3
 80077ea:	0c12      	lsrs	r2, r2, #16
 80077ec:	fa13 f38e 	uxtah	r3, r3, lr
 80077f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fe:	45c1      	cmp	r9, r8
 8007800:	f840 3b04 	str.w	r3, [r0], #4
 8007804:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007808:	d2e8      	bcs.n	80077dc <quorem+0xb0>
 800780a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800780e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007812:	b922      	cbnz	r2, 800781e <quorem+0xf2>
 8007814:	3b04      	subs	r3, #4
 8007816:	429d      	cmp	r5, r3
 8007818:	461a      	mov	r2, r3
 800781a:	d30a      	bcc.n	8007832 <quorem+0x106>
 800781c:	613c      	str	r4, [r7, #16]
 800781e:	4630      	mov	r0, r6
 8007820:	b003      	add	sp, #12
 8007822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	3b04      	subs	r3, #4
 800782a:	2a00      	cmp	r2, #0
 800782c:	d1cc      	bne.n	80077c8 <quorem+0x9c>
 800782e:	3c01      	subs	r4, #1
 8007830:	e7c7      	b.n	80077c2 <quorem+0x96>
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	3b04      	subs	r3, #4
 8007836:	2a00      	cmp	r2, #0
 8007838:	d1f0      	bne.n	800781c <quorem+0xf0>
 800783a:	3c01      	subs	r4, #1
 800783c:	e7eb      	b.n	8007816 <quorem+0xea>
 800783e:	2000      	movs	r0, #0
 8007840:	e7ee      	b.n	8007820 <quorem+0xf4>
 8007842:	0000      	movs	r0, r0
 8007844:	0000      	movs	r0, r0
	...

08007848 <_dtoa_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	ed2d 8b02 	vpush	{d8}
 8007850:	ec57 6b10 	vmov	r6, r7, d0
 8007854:	b095      	sub	sp, #84	; 0x54
 8007856:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007858:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800785c:	9105      	str	r1, [sp, #20]
 800785e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007862:	4604      	mov	r4, r0
 8007864:	9209      	str	r2, [sp, #36]	; 0x24
 8007866:	930f      	str	r3, [sp, #60]	; 0x3c
 8007868:	b975      	cbnz	r5, 8007888 <_dtoa_r+0x40>
 800786a:	2010      	movs	r0, #16
 800786c:	f001 f94c 	bl	8008b08 <malloc>
 8007870:	4602      	mov	r2, r0
 8007872:	6260      	str	r0, [r4, #36]	; 0x24
 8007874:	b920      	cbnz	r0, 8007880 <_dtoa_r+0x38>
 8007876:	4bb2      	ldr	r3, [pc, #712]	; (8007b40 <_dtoa_r+0x2f8>)
 8007878:	21ea      	movs	r1, #234	; 0xea
 800787a:	48b2      	ldr	r0, [pc, #712]	; (8007b44 <_dtoa_r+0x2fc>)
 800787c:	f002 f874 	bl	8009968 <__assert_func>
 8007880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007884:	6005      	str	r5, [r0, #0]
 8007886:	60c5      	str	r5, [r0, #12]
 8007888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800788a:	6819      	ldr	r1, [r3, #0]
 800788c:	b151      	cbz	r1, 80078a4 <_dtoa_r+0x5c>
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	604a      	str	r2, [r1, #4]
 8007892:	2301      	movs	r3, #1
 8007894:	4093      	lsls	r3, r2
 8007896:	608b      	str	r3, [r1, #8]
 8007898:	4620      	mov	r0, r4
 800789a:	f001 f99d 	bl	8008bd8 <_Bfree>
 800789e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	1e3b      	subs	r3, r7, #0
 80078a6:	bfb9      	ittee	lt
 80078a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078ac:	9303      	strlt	r3, [sp, #12]
 80078ae:	2300      	movge	r3, #0
 80078b0:	f8c8 3000 	strge.w	r3, [r8]
 80078b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80078b8:	4ba3      	ldr	r3, [pc, #652]	; (8007b48 <_dtoa_r+0x300>)
 80078ba:	bfbc      	itt	lt
 80078bc:	2201      	movlt	r2, #1
 80078be:	f8c8 2000 	strlt.w	r2, [r8]
 80078c2:	ea33 0309 	bics.w	r3, r3, r9
 80078c6:	d11b      	bne.n	8007900 <_dtoa_r+0xb8>
 80078c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078d4:	4333      	orrs	r3, r6
 80078d6:	f000 857a 	beq.w	80083ce <_dtoa_r+0xb86>
 80078da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078dc:	b963      	cbnz	r3, 80078f8 <_dtoa_r+0xb0>
 80078de:	4b9b      	ldr	r3, [pc, #620]	; (8007b4c <_dtoa_r+0x304>)
 80078e0:	e024      	b.n	800792c <_dtoa_r+0xe4>
 80078e2:	4b9b      	ldr	r3, [pc, #620]	; (8007b50 <_dtoa_r+0x308>)
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	9800      	ldr	r0, [sp, #0]
 80078ee:	b015      	add	sp, #84	; 0x54
 80078f0:	ecbd 8b02 	vpop	{d8}
 80078f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f8:	4b94      	ldr	r3, [pc, #592]	; (8007b4c <_dtoa_r+0x304>)
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	3303      	adds	r3, #3
 80078fe:	e7f3      	b.n	80078e8 <_dtoa_r+0xa0>
 8007900:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	ec51 0b17 	vmov	r0, r1, d7
 800790a:	2300      	movs	r3, #0
 800790c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007910:	f7f9 f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007914:	4680      	mov	r8, r0
 8007916:	b158      	cbz	r0, 8007930 <_dtoa_r+0xe8>
 8007918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800791a:	2301      	movs	r3, #1
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8551 	beq.w	80083c8 <_dtoa_r+0xb80>
 8007926:	488b      	ldr	r0, [pc, #556]	; (8007b54 <_dtoa_r+0x30c>)
 8007928:	6018      	str	r0, [r3, #0]
 800792a:	1e43      	subs	r3, r0, #1
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	e7dd      	b.n	80078ec <_dtoa_r+0xa4>
 8007930:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007934:	aa12      	add	r2, sp, #72	; 0x48
 8007936:	a913      	add	r1, sp, #76	; 0x4c
 8007938:	4620      	mov	r0, r4
 800793a:	f001 fcf5 	bl	8009328 <__d2b>
 800793e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007942:	4683      	mov	fp, r0
 8007944:	2d00      	cmp	r5, #0
 8007946:	d07c      	beq.n	8007a42 <_dtoa_r+0x1fa>
 8007948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800794e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007952:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007956:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800795a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800795e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007962:	4b7d      	ldr	r3, [pc, #500]	; (8007b58 <_dtoa_r+0x310>)
 8007964:	2200      	movs	r2, #0
 8007966:	4630      	mov	r0, r6
 8007968:	4639      	mov	r1, r7
 800796a:	f7f8 fc95 	bl	8000298 <__aeabi_dsub>
 800796e:	a36e      	add	r3, pc, #440	; (adr r3, 8007b28 <_dtoa_r+0x2e0>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 fe48 	bl	8000608 <__aeabi_dmul>
 8007978:	a36d      	add	r3, pc, #436	; (adr r3, 8007b30 <_dtoa_r+0x2e8>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fc8d 	bl	800029c <__adddf3>
 8007982:	4606      	mov	r6, r0
 8007984:	4628      	mov	r0, r5
 8007986:	460f      	mov	r7, r1
 8007988:	f7f8 fdd4 	bl	8000534 <__aeabi_i2d>
 800798c:	a36a      	add	r3, pc, #424	; (adr r3, 8007b38 <_dtoa_r+0x2f0>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f7f8 fe39 	bl	8000608 <__aeabi_dmul>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4630      	mov	r0, r6
 800799c:	4639      	mov	r1, r7
 800799e:	f7f8 fc7d 	bl	800029c <__adddf3>
 80079a2:	4606      	mov	r6, r0
 80079a4:	460f      	mov	r7, r1
 80079a6:	f7f9 f8df 	bl	8000b68 <__aeabi_d2iz>
 80079aa:	2200      	movs	r2, #0
 80079ac:	4682      	mov	sl, r0
 80079ae:	2300      	movs	r3, #0
 80079b0:	4630      	mov	r0, r6
 80079b2:	4639      	mov	r1, r7
 80079b4:	f7f9 f89a 	bl	8000aec <__aeabi_dcmplt>
 80079b8:	b148      	cbz	r0, 80079ce <_dtoa_r+0x186>
 80079ba:	4650      	mov	r0, sl
 80079bc:	f7f8 fdba 	bl	8000534 <__aeabi_i2d>
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	f7f9 f888 	bl	8000ad8 <__aeabi_dcmpeq>
 80079c8:	b908      	cbnz	r0, 80079ce <_dtoa_r+0x186>
 80079ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ce:	f1ba 0f16 	cmp.w	sl, #22
 80079d2:	d854      	bhi.n	8007a7e <_dtoa_r+0x236>
 80079d4:	4b61      	ldr	r3, [pc, #388]	; (8007b5c <_dtoa_r+0x314>)
 80079d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079e2:	f7f9 f883 	bl	8000aec <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d04b      	beq.n	8007a82 <_dtoa_r+0x23a>
 80079ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ee:	2300      	movs	r3, #0
 80079f0:	930e      	str	r3, [sp, #56]	; 0x38
 80079f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079f4:	1b5d      	subs	r5, r3, r5
 80079f6:	1e6b      	subs	r3, r5, #1
 80079f8:	9304      	str	r3, [sp, #16]
 80079fa:	bf43      	ittte	mi
 80079fc:	2300      	movmi	r3, #0
 80079fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8007a02:	9304      	strmi	r3, [sp, #16]
 8007a04:	f04f 0800 	movpl.w	r8, #0
 8007a08:	f1ba 0f00 	cmp.w	sl, #0
 8007a0c:	db3b      	blt.n	8007a86 <_dtoa_r+0x23e>
 8007a0e:	9b04      	ldr	r3, [sp, #16]
 8007a10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007a14:	4453      	add	r3, sl
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9306      	str	r3, [sp, #24]
 8007a1c:	9b05      	ldr	r3, [sp, #20]
 8007a1e:	2b09      	cmp	r3, #9
 8007a20:	d869      	bhi.n	8007af6 <_dtoa_r+0x2ae>
 8007a22:	2b05      	cmp	r3, #5
 8007a24:	bfc4      	itt	gt
 8007a26:	3b04      	subgt	r3, #4
 8007a28:	9305      	strgt	r3, [sp, #20]
 8007a2a:	9b05      	ldr	r3, [sp, #20]
 8007a2c:	f1a3 0302 	sub.w	r3, r3, #2
 8007a30:	bfcc      	ite	gt
 8007a32:	2500      	movgt	r5, #0
 8007a34:	2501      	movle	r5, #1
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d869      	bhi.n	8007b0e <_dtoa_r+0x2c6>
 8007a3a:	e8df f003 	tbb	[pc, r3]
 8007a3e:	4e2c      	.short	0x4e2c
 8007a40:	5a4c      	.short	0x5a4c
 8007a42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a46:	441d      	add	r5, r3
 8007a48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	bfc1      	itttt	gt
 8007a50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a58:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a60:	bfda      	itte	le
 8007a62:	f1c3 0320 	rsble	r3, r3, #32
 8007a66:	fa06 f003 	lslle.w	r0, r6, r3
 8007a6a:	4318      	orrgt	r0, r3
 8007a6c:	f7f8 fd52 	bl	8000514 <__aeabi_ui2d>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4606      	mov	r6, r0
 8007a74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a78:	3d01      	subs	r5, #1
 8007a7a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a7c:	e771      	b.n	8007962 <_dtoa_r+0x11a>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e7b6      	b.n	80079f0 <_dtoa_r+0x1a8>
 8007a82:	900e      	str	r0, [sp, #56]	; 0x38
 8007a84:	e7b5      	b.n	80079f2 <_dtoa_r+0x1aa>
 8007a86:	f1ca 0300 	rsb	r3, sl, #0
 8007a8a:	9306      	str	r3, [sp, #24]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	eba8 080a 	sub.w	r8, r8, sl
 8007a92:	930d      	str	r3, [sp, #52]	; 0x34
 8007a94:	e7c2      	b.n	8007a1c <_dtoa_r+0x1d4>
 8007a96:	2300      	movs	r3, #0
 8007a98:	9308      	str	r3, [sp, #32]
 8007a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dc39      	bgt.n	8007b14 <_dtoa_r+0x2cc>
 8007aa0:	f04f 0901 	mov.w	r9, #1
 8007aa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007aae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	6042      	str	r2, [r0, #4]
 8007ab4:	2204      	movs	r2, #4
 8007ab6:	f102 0614 	add.w	r6, r2, #20
 8007aba:	429e      	cmp	r6, r3
 8007abc:	6841      	ldr	r1, [r0, #4]
 8007abe:	d92f      	bls.n	8007b20 <_dtoa_r+0x2d8>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 f849 	bl	8008b58 <_Balloc>
 8007ac6:	9000      	str	r0, [sp, #0]
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d14b      	bne.n	8007b64 <_dtoa_r+0x31c>
 8007acc:	4b24      	ldr	r3, [pc, #144]	; (8007b60 <_dtoa_r+0x318>)
 8007ace:	4602      	mov	r2, r0
 8007ad0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ad4:	e6d1      	b.n	800787a <_dtoa_r+0x32>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e7de      	b.n	8007a98 <_dtoa_r+0x250>
 8007ada:	2300      	movs	r3, #0
 8007adc:	9308      	str	r3, [sp, #32]
 8007ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae0:	eb0a 0903 	add.w	r9, sl, r3
 8007ae4:	f109 0301 	add.w	r3, r9, #1
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	bfb8      	it	lt
 8007aee:	2301      	movlt	r3, #1
 8007af0:	e7dd      	b.n	8007aae <_dtoa_r+0x266>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e7f2      	b.n	8007adc <_dtoa_r+0x294>
 8007af6:	2501      	movs	r5, #1
 8007af8:	2300      	movs	r3, #0
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	9508      	str	r5, [sp, #32]
 8007afe:	f04f 39ff 	mov.w	r9, #4294967295
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b08:	2312      	movs	r3, #18
 8007b0a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b0c:	e7cf      	b.n	8007aae <_dtoa_r+0x266>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	9308      	str	r3, [sp, #32]
 8007b12:	e7f4      	b.n	8007afe <_dtoa_r+0x2b6>
 8007b14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b18:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	e7c6      	b.n	8007aae <_dtoa_r+0x266>
 8007b20:	3101      	adds	r1, #1
 8007b22:	6041      	str	r1, [r0, #4]
 8007b24:	0052      	lsls	r2, r2, #1
 8007b26:	e7c6      	b.n	8007ab6 <_dtoa_r+0x26e>
 8007b28:	636f4361 	.word	0x636f4361
 8007b2c:	3fd287a7 	.word	0x3fd287a7
 8007b30:	8b60c8b3 	.word	0x8b60c8b3
 8007b34:	3fc68a28 	.word	0x3fc68a28
 8007b38:	509f79fb 	.word	0x509f79fb
 8007b3c:	3fd34413 	.word	0x3fd34413
 8007b40:	0800acbe 	.word	0x0800acbe
 8007b44:	0800acd5 	.word	0x0800acd5
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	0800acba 	.word	0x0800acba
 8007b50:	0800acb1 	.word	0x0800acb1
 8007b54:	0800ab35 	.word	0x0800ab35
 8007b58:	3ff80000 	.word	0x3ff80000
 8007b5c:	0800ae50 	.word	0x0800ae50
 8007b60:	0800ad34 	.word	0x0800ad34
 8007b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b66:	9a00      	ldr	r2, [sp, #0]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	2b0e      	cmp	r3, #14
 8007b6e:	f200 80ad 	bhi.w	8007ccc <_dtoa_r+0x484>
 8007b72:	2d00      	cmp	r5, #0
 8007b74:	f000 80aa 	beq.w	8007ccc <_dtoa_r+0x484>
 8007b78:	f1ba 0f00 	cmp.w	sl, #0
 8007b7c:	dd36      	ble.n	8007bec <_dtoa_r+0x3a4>
 8007b7e:	4ac3      	ldr	r2, [pc, #780]	; (8007e8c <_dtoa_r+0x644>)
 8007b80:	f00a 030f 	and.w	r3, sl, #15
 8007b84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b88:	ed93 7b00 	vldr	d7, [r3]
 8007b8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007b94:	eeb0 8a47 	vmov.f32	s16, s14
 8007b98:	eef0 8a67 	vmov.f32	s17, s15
 8007b9c:	d016      	beq.n	8007bcc <_dtoa_r+0x384>
 8007b9e:	4bbc      	ldr	r3, [pc, #752]	; (8007e90 <_dtoa_r+0x648>)
 8007ba0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba8:	f7f8 fe58 	bl	800085c <__aeabi_ddiv>
 8007bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb0:	f007 070f 	and.w	r7, r7, #15
 8007bb4:	2503      	movs	r5, #3
 8007bb6:	4eb6      	ldr	r6, [pc, #728]	; (8007e90 <_dtoa_r+0x648>)
 8007bb8:	b957      	cbnz	r7, 8007bd0 <_dtoa_r+0x388>
 8007bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bbe:	ec53 2b18 	vmov	r2, r3, d8
 8007bc2:	f7f8 fe4b 	bl	800085c <__aeabi_ddiv>
 8007bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bca:	e029      	b.n	8007c20 <_dtoa_r+0x3d8>
 8007bcc:	2502      	movs	r5, #2
 8007bce:	e7f2      	b.n	8007bb6 <_dtoa_r+0x36e>
 8007bd0:	07f9      	lsls	r1, r7, #31
 8007bd2:	d508      	bpl.n	8007be6 <_dtoa_r+0x39e>
 8007bd4:	ec51 0b18 	vmov	r0, r1, d8
 8007bd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bdc:	f7f8 fd14 	bl	8000608 <__aeabi_dmul>
 8007be0:	ec41 0b18 	vmov	d8, r0, r1
 8007be4:	3501      	adds	r5, #1
 8007be6:	107f      	asrs	r7, r7, #1
 8007be8:	3608      	adds	r6, #8
 8007bea:	e7e5      	b.n	8007bb8 <_dtoa_r+0x370>
 8007bec:	f000 80a6 	beq.w	8007d3c <_dtoa_r+0x4f4>
 8007bf0:	f1ca 0600 	rsb	r6, sl, #0
 8007bf4:	4ba5      	ldr	r3, [pc, #660]	; (8007e8c <_dtoa_r+0x644>)
 8007bf6:	4fa6      	ldr	r7, [pc, #664]	; (8007e90 <_dtoa_r+0x648>)
 8007bf8:	f006 020f 	and.w	r2, r6, #15
 8007bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c08:	f7f8 fcfe 	bl	8000608 <__aeabi_dmul>
 8007c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c10:	1136      	asrs	r6, r6, #4
 8007c12:	2300      	movs	r3, #0
 8007c14:	2502      	movs	r5, #2
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	f040 8085 	bne.w	8007d26 <_dtoa_r+0x4de>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1d2      	bne.n	8007bc6 <_dtoa_r+0x37e>
 8007c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 808c 	beq.w	8007d40 <_dtoa_r+0x4f8>
 8007c28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c2c:	4b99      	ldr	r3, [pc, #612]	; (8007e94 <_dtoa_r+0x64c>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	4630      	mov	r0, r6
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 ff5a 	bl	8000aec <__aeabi_dcmplt>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	f000 8081 	beq.w	8007d40 <_dtoa_r+0x4f8>
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d07d      	beq.n	8007d40 <_dtoa_r+0x4f8>
 8007c44:	f1b9 0f00 	cmp.w	r9, #0
 8007c48:	dd3c      	ble.n	8007cc4 <_dtoa_r+0x47c>
 8007c4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c4e:	9307      	str	r3, [sp, #28]
 8007c50:	2200      	movs	r2, #0
 8007c52:	4b91      	ldr	r3, [pc, #580]	; (8007e98 <_dtoa_r+0x650>)
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f7f8 fcd6 	bl	8000608 <__aeabi_dmul>
 8007c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c60:	3501      	adds	r5, #1
 8007c62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f7f8 fc62 	bl	8000534 <__aeabi_i2d>
 8007c70:	4632      	mov	r2, r6
 8007c72:	463b      	mov	r3, r7
 8007c74:	f7f8 fcc8 	bl	8000608 <__aeabi_dmul>
 8007c78:	4b88      	ldr	r3, [pc, #544]	; (8007e9c <_dtoa_r+0x654>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7f8 fb0e 	bl	800029c <__adddf3>
 8007c80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c88:	9303      	str	r3, [sp, #12]
 8007c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d15c      	bne.n	8007d4a <_dtoa_r+0x502>
 8007c90:	4b83      	ldr	r3, [pc, #524]	; (8007ea0 <_dtoa_r+0x658>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fafe 	bl	8000298 <__aeabi_dsub>
 8007c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	460f      	mov	r7, r1
 8007ca4:	f7f8 ff40 	bl	8000b28 <__aeabi_dcmpgt>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	f040 8296 	bne.w	80081da <_dtoa_r+0x992>
 8007cae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f7f8 ff17 	bl	8000aec <__aeabi_dcmplt>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	f040 8288 	bne.w	80081d4 <_dtoa_r+0x98c>
 8007cc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f2c0 8158 	blt.w	8007f84 <_dtoa_r+0x73c>
 8007cd4:	f1ba 0f0e 	cmp.w	sl, #14
 8007cd8:	f300 8154 	bgt.w	8007f84 <_dtoa_r+0x73c>
 8007cdc:	4b6b      	ldr	r3, [pc, #428]	; (8007e8c <_dtoa_r+0x644>)
 8007cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ce2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f280 80e3 	bge.w	8007eb4 <_dtoa_r+0x66c>
 8007cee:	9b01      	ldr	r3, [sp, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f300 80df 	bgt.w	8007eb4 <_dtoa_r+0x66c>
 8007cf6:	f040 826d 	bne.w	80081d4 <_dtoa_r+0x98c>
 8007cfa:	4b69      	ldr	r3, [pc, #420]	; (8007ea0 <_dtoa_r+0x658>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4640      	mov	r0, r8
 8007d00:	4649      	mov	r1, r9
 8007d02:	f7f8 fc81 	bl	8000608 <__aeabi_dmul>
 8007d06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d0a:	f7f8 ff03 	bl	8000b14 <__aeabi_dcmpge>
 8007d0e:	9e01      	ldr	r6, [sp, #4]
 8007d10:	4637      	mov	r7, r6
 8007d12:	2800      	cmp	r0, #0
 8007d14:	f040 8243 	bne.w	800819e <_dtoa_r+0x956>
 8007d18:	9d00      	ldr	r5, [sp, #0]
 8007d1a:	2331      	movs	r3, #49	; 0x31
 8007d1c:	f805 3b01 	strb.w	r3, [r5], #1
 8007d20:	f10a 0a01 	add.w	sl, sl, #1
 8007d24:	e23f      	b.n	80081a6 <_dtoa_r+0x95e>
 8007d26:	07f2      	lsls	r2, r6, #31
 8007d28:	d505      	bpl.n	8007d36 <_dtoa_r+0x4ee>
 8007d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d2e:	f7f8 fc6b 	bl	8000608 <__aeabi_dmul>
 8007d32:	3501      	adds	r5, #1
 8007d34:	2301      	movs	r3, #1
 8007d36:	1076      	asrs	r6, r6, #1
 8007d38:	3708      	adds	r7, #8
 8007d3a:	e76c      	b.n	8007c16 <_dtoa_r+0x3ce>
 8007d3c:	2502      	movs	r5, #2
 8007d3e:	e76f      	b.n	8007c20 <_dtoa_r+0x3d8>
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d46:	930c      	str	r3, [sp, #48]	; 0x30
 8007d48:	e78d      	b.n	8007c66 <_dtoa_r+0x41e>
 8007d4a:	9900      	ldr	r1, [sp, #0]
 8007d4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d50:	4b4e      	ldr	r3, [pc, #312]	; (8007e8c <_dtoa_r+0x644>)
 8007d52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d56:	4401      	add	r1, r0
 8007d58:	9102      	str	r1, [sp, #8]
 8007d5a:	9908      	ldr	r1, [sp, #32]
 8007d5c:	eeb0 8a47 	vmov.f32	s16, s14
 8007d60:	eef0 8a67 	vmov.f32	s17, s15
 8007d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d045      	beq.n	8007dfc <_dtoa_r+0x5b4>
 8007d70:	494c      	ldr	r1, [pc, #304]	; (8007ea4 <_dtoa_r+0x65c>)
 8007d72:	2000      	movs	r0, #0
 8007d74:	f7f8 fd72 	bl	800085c <__aeabi_ddiv>
 8007d78:	ec53 2b18 	vmov	r2, r3, d8
 8007d7c:	f7f8 fa8c 	bl	8000298 <__aeabi_dsub>
 8007d80:	9d00      	ldr	r5, [sp, #0]
 8007d82:	ec41 0b18 	vmov	d8, r0, r1
 8007d86:	4639      	mov	r1, r7
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7f8 feed 	bl	8000b68 <__aeabi_d2iz>
 8007d8e:	900c      	str	r0, [sp, #48]	; 0x30
 8007d90:	f7f8 fbd0 	bl	8000534 <__aeabi_i2d>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4630      	mov	r0, r6
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f7f8 fa7c 	bl	8000298 <__aeabi_dsub>
 8007da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007da2:	3330      	adds	r3, #48	; 0x30
 8007da4:	f805 3b01 	strb.w	r3, [r5], #1
 8007da8:	ec53 2b18 	vmov	r2, r3, d8
 8007dac:	4606      	mov	r6, r0
 8007dae:	460f      	mov	r7, r1
 8007db0:	f7f8 fe9c 	bl	8000aec <__aeabi_dcmplt>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d165      	bne.n	8007e84 <_dtoa_r+0x63c>
 8007db8:	4632      	mov	r2, r6
 8007dba:	463b      	mov	r3, r7
 8007dbc:	4935      	ldr	r1, [pc, #212]	; (8007e94 <_dtoa_r+0x64c>)
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f7f8 fa6a 	bl	8000298 <__aeabi_dsub>
 8007dc4:	ec53 2b18 	vmov	r2, r3, d8
 8007dc8:	f7f8 fe90 	bl	8000aec <__aeabi_dcmplt>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	f040 80b9 	bne.w	8007f44 <_dtoa_r+0x6fc>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	429d      	cmp	r5, r3
 8007dd6:	f43f af75 	beq.w	8007cc4 <_dtoa_r+0x47c>
 8007dda:	4b2f      	ldr	r3, [pc, #188]	; (8007e98 <_dtoa_r+0x650>)
 8007ddc:	ec51 0b18 	vmov	r0, r1, d8
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fc11 	bl	8000608 <__aeabi_dmul>
 8007de6:	4b2c      	ldr	r3, [pc, #176]	; (8007e98 <_dtoa_r+0x650>)
 8007de8:	ec41 0b18 	vmov	d8, r0, r1
 8007dec:	2200      	movs	r2, #0
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 fc09 	bl	8000608 <__aeabi_dmul>
 8007df6:	4606      	mov	r6, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	e7c4      	b.n	8007d86 <_dtoa_r+0x53e>
 8007dfc:	ec51 0b17 	vmov	r0, r1, d7
 8007e00:	f7f8 fc02 	bl	8000608 <__aeabi_dmul>
 8007e04:	9b02      	ldr	r3, [sp, #8]
 8007e06:	9d00      	ldr	r5, [sp, #0]
 8007e08:	930c      	str	r3, [sp, #48]	; 0x30
 8007e0a:	ec41 0b18 	vmov	d8, r0, r1
 8007e0e:	4639      	mov	r1, r7
 8007e10:	4630      	mov	r0, r6
 8007e12:	f7f8 fea9 	bl	8000b68 <__aeabi_d2iz>
 8007e16:	9011      	str	r0, [sp, #68]	; 0x44
 8007e18:	f7f8 fb8c 	bl	8000534 <__aeabi_i2d>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4630      	mov	r0, r6
 8007e22:	4639      	mov	r1, r7
 8007e24:	f7f8 fa38 	bl	8000298 <__aeabi_dsub>
 8007e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e2a:	3330      	adds	r3, #48	; 0x30
 8007e2c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	429d      	cmp	r5, r3
 8007e34:	4606      	mov	r6, r0
 8007e36:	460f      	mov	r7, r1
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	d134      	bne.n	8007ea8 <_dtoa_r+0x660>
 8007e3e:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <_dtoa_r+0x65c>)
 8007e40:	ec51 0b18 	vmov	r0, r1, d8
 8007e44:	f7f8 fa2a 	bl	800029c <__adddf3>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fe6a 	bl	8000b28 <__aeabi_dcmpgt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d175      	bne.n	8007f44 <_dtoa_r+0x6fc>
 8007e58:	ec53 2b18 	vmov	r2, r3, d8
 8007e5c:	4911      	ldr	r1, [pc, #68]	; (8007ea4 <_dtoa_r+0x65c>)
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f7f8 fa1a 	bl	8000298 <__aeabi_dsub>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fe3e 	bl	8000aec <__aeabi_dcmplt>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f43f af27 	beq.w	8007cc4 <_dtoa_r+0x47c>
 8007e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e78:	1e6b      	subs	r3, r5, #1
 8007e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e80:	2b30      	cmp	r3, #48	; 0x30
 8007e82:	d0f8      	beq.n	8007e76 <_dtoa_r+0x62e>
 8007e84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e88:	e04a      	b.n	8007f20 <_dtoa_r+0x6d8>
 8007e8a:	bf00      	nop
 8007e8c:	0800ae50 	.word	0x0800ae50
 8007e90:	0800ae28 	.word	0x0800ae28
 8007e94:	3ff00000 	.word	0x3ff00000
 8007e98:	40240000 	.word	0x40240000
 8007e9c:	401c0000 	.word	0x401c0000
 8007ea0:	40140000 	.word	0x40140000
 8007ea4:	3fe00000 	.word	0x3fe00000
 8007ea8:	4baf      	ldr	r3, [pc, #700]	; (8008168 <_dtoa_r+0x920>)
 8007eaa:	f7f8 fbad 	bl	8000608 <__aeabi_dmul>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	460f      	mov	r7, r1
 8007eb2:	e7ac      	b.n	8007e0e <_dtoa_r+0x5c6>
 8007eb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007eb8:	9d00      	ldr	r5, [sp, #0]
 8007eba:	4642      	mov	r2, r8
 8007ebc:	464b      	mov	r3, r9
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	f7f8 fccb 	bl	800085c <__aeabi_ddiv>
 8007ec6:	f7f8 fe4f 	bl	8000b68 <__aeabi_d2iz>
 8007eca:	9002      	str	r0, [sp, #8]
 8007ecc:	f7f8 fb32 	bl	8000534 <__aeabi_i2d>
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	464b      	mov	r3, r9
 8007ed4:	f7f8 fb98 	bl	8000608 <__aeabi_dmul>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4630      	mov	r0, r6
 8007ede:	4639      	mov	r1, r7
 8007ee0:	f7f8 f9da 	bl	8000298 <__aeabi_dsub>
 8007ee4:	9e02      	ldr	r6, [sp, #8]
 8007ee6:	9f01      	ldr	r7, [sp, #4]
 8007ee8:	3630      	adds	r6, #48	; 0x30
 8007eea:	f805 6b01 	strb.w	r6, [r5], #1
 8007eee:	9e00      	ldr	r6, [sp, #0]
 8007ef0:	1bae      	subs	r6, r5, r6
 8007ef2:	42b7      	cmp	r7, r6
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	d137      	bne.n	8007f6a <_dtoa_r+0x722>
 8007efa:	f7f8 f9cf 	bl	800029c <__adddf3>
 8007efe:	4642      	mov	r2, r8
 8007f00:	464b      	mov	r3, r9
 8007f02:	4606      	mov	r6, r0
 8007f04:	460f      	mov	r7, r1
 8007f06:	f7f8 fe0f 	bl	8000b28 <__aeabi_dcmpgt>
 8007f0a:	b9c8      	cbnz	r0, 8007f40 <_dtoa_r+0x6f8>
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	464b      	mov	r3, r9
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 fde0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f18:	b110      	cbz	r0, 8007f20 <_dtoa_r+0x6d8>
 8007f1a:	9b02      	ldr	r3, [sp, #8]
 8007f1c:	07d9      	lsls	r1, r3, #31
 8007f1e:	d40f      	bmi.n	8007f40 <_dtoa_r+0x6f8>
 8007f20:	4620      	mov	r0, r4
 8007f22:	4659      	mov	r1, fp
 8007f24:	f000 fe58 	bl	8008bd8 <_Bfree>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	702b      	strb	r3, [r5, #0]
 8007f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f2e:	f10a 0001 	add.w	r0, sl, #1
 8007f32:	6018      	str	r0, [r3, #0]
 8007f34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f43f acd8 	beq.w	80078ec <_dtoa_r+0xa4>
 8007f3c:	601d      	str	r5, [r3, #0]
 8007f3e:	e4d5      	b.n	80078ec <_dtoa_r+0xa4>
 8007f40:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f44:	462b      	mov	r3, r5
 8007f46:	461d      	mov	r5, r3
 8007f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f4c:	2a39      	cmp	r2, #57	; 0x39
 8007f4e:	d108      	bne.n	8007f62 <_dtoa_r+0x71a>
 8007f50:	9a00      	ldr	r2, [sp, #0]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d1f7      	bne.n	8007f46 <_dtoa_r+0x6fe>
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	9900      	ldr	r1, [sp, #0]
 8007f5a:	3201      	adds	r2, #1
 8007f5c:	9207      	str	r2, [sp, #28]
 8007f5e:	2230      	movs	r2, #48	; 0x30
 8007f60:	700a      	strb	r2, [r1, #0]
 8007f62:	781a      	ldrb	r2, [r3, #0]
 8007f64:	3201      	adds	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e78c      	b.n	8007e84 <_dtoa_r+0x63c>
 8007f6a:	4b7f      	ldr	r3, [pc, #508]	; (8008168 <_dtoa_r+0x920>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f7f8 fb4b 	bl	8000608 <__aeabi_dmul>
 8007f72:	2200      	movs	r2, #0
 8007f74:	2300      	movs	r3, #0
 8007f76:	4606      	mov	r6, r0
 8007f78:	460f      	mov	r7, r1
 8007f7a:	f7f8 fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d09b      	beq.n	8007eba <_dtoa_r+0x672>
 8007f82:	e7cd      	b.n	8007f20 <_dtoa_r+0x6d8>
 8007f84:	9a08      	ldr	r2, [sp, #32]
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	f000 80c4 	beq.w	8008114 <_dtoa_r+0x8cc>
 8007f8c:	9a05      	ldr	r2, [sp, #20]
 8007f8e:	2a01      	cmp	r2, #1
 8007f90:	f300 80a8 	bgt.w	80080e4 <_dtoa_r+0x89c>
 8007f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	f000 80a0 	beq.w	80080dc <_dtoa_r+0x894>
 8007f9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fa0:	9e06      	ldr	r6, [sp, #24]
 8007fa2:	4645      	mov	r5, r8
 8007fa4:	9a04      	ldr	r2, [sp, #16]
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	441a      	add	r2, r3
 8007faa:	4620      	mov	r0, r4
 8007fac:	4498      	add	r8, r3
 8007fae:	9204      	str	r2, [sp, #16]
 8007fb0:	f000 ff18 	bl	8008de4 <__i2b>
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	dd0b      	ble.n	8007fd2 <_dtoa_r+0x78a>
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd08      	ble.n	8007fd2 <_dtoa_r+0x78a>
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	9a04      	ldr	r2, [sp, #16]
 8007fc4:	bfa8      	it	ge
 8007fc6:	462b      	movge	r3, r5
 8007fc8:	eba8 0803 	sub.w	r8, r8, r3
 8007fcc:	1aed      	subs	r5, r5, r3
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	9304      	str	r3, [sp, #16]
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	b1fb      	cbz	r3, 8008016 <_dtoa_r+0x7ce>
 8007fd6:	9b08      	ldr	r3, [sp, #32]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 809f 	beq.w	800811c <_dtoa_r+0x8d4>
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	dd11      	ble.n	8008006 <_dtoa_r+0x7be>
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 ffb8 	bl	8008f5c <__pow5mult>
 8007fec:	465a      	mov	r2, fp
 8007fee:	4601      	mov	r1, r0
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 ff0c 	bl	8008e10 <__multiply>
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	9007      	str	r0, [sp, #28]
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fdeb 	bl	8008bd8 <_Bfree>
 8008002:	9b07      	ldr	r3, [sp, #28]
 8008004:	469b      	mov	fp, r3
 8008006:	9b06      	ldr	r3, [sp, #24]
 8008008:	1b9a      	subs	r2, r3, r6
 800800a:	d004      	beq.n	8008016 <_dtoa_r+0x7ce>
 800800c:	4659      	mov	r1, fp
 800800e:	4620      	mov	r0, r4
 8008010:	f000 ffa4 	bl	8008f5c <__pow5mult>
 8008014:	4683      	mov	fp, r0
 8008016:	2101      	movs	r1, #1
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fee3 	bl	8008de4 <__i2b>
 800801e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008020:	2b00      	cmp	r3, #0
 8008022:	4606      	mov	r6, r0
 8008024:	dd7c      	ble.n	8008120 <_dtoa_r+0x8d8>
 8008026:	461a      	mov	r2, r3
 8008028:	4601      	mov	r1, r0
 800802a:	4620      	mov	r0, r4
 800802c:	f000 ff96 	bl	8008f5c <__pow5mult>
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	2b01      	cmp	r3, #1
 8008034:	4606      	mov	r6, r0
 8008036:	dd76      	ble.n	8008126 <_dtoa_r+0x8de>
 8008038:	2300      	movs	r3, #0
 800803a:	9306      	str	r3, [sp, #24]
 800803c:	6933      	ldr	r3, [r6, #16]
 800803e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008042:	6918      	ldr	r0, [r3, #16]
 8008044:	f000 fe7e 	bl	8008d44 <__hi0bits>
 8008048:	f1c0 0020 	rsb	r0, r0, #32
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	4418      	add	r0, r3
 8008050:	f010 001f 	ands.w	r0, r0, #31
 8008054:	f000 8086 	beq.w	8008164 <_dtoa_r+0x91c>
 8008058:	f1c0 0320 	rsb	r3, r0, #32
 800805c:	2b04      	cmp	r3, #4
 800805e:	dd7f      	ble.n	8008160 <_dtoa_r+0x918>
 8008060:	f1c0 001c 	rsb	r0, r0, #28
 8008064:	9b04      	ldr	r3, [sp, #16]
 8008066:	4403      	add	r3, r0
 8008068:	4480      	add	r8, r0
 800806a:	4405      	add	r5, r0
 800806c:	9304      	str	r3, [sp, #16]
 800806e:	f1b8 0f00 	cmp.w	r8, #0
 8008072:	dd05      	ble.n	8008080 <_dtoa_r+0x838>
 8008074:	4659      	mov	r1, fp
 8008076:	4642      	mov	r2, r8
 8008078:	4620      	mov	r0, r4
 800807a:	f000 ffc9 	bl	8009010 <__lshift>
 800807e:	4683      	mov	fp, r0
 8008080:	9b04      	ldr	r3, [sp, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	dd05      	ble.n	8008092 <_dtoa_r+0x84a>
 8008086:	4631      	mov	r1, r6
 8008088:	461a      	mov	r2, r3
 800808a:	4620      	mov	r0, r4
 800808c:	f000 ffc0 	bl	8009010 <__lshift>
 8008090:	4606      	mov	r6, r0
 8008092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008094:	2b00      	cmp	r3, #0
 8008096:	d069      	beq.n	800816c <_dtoa_r+0x924>
 8008098:	4631      	mov	r1, r6
 800809a:	4658      	mov	r0, fp
 800809c:	f001 f824 	bl	80090e8 <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	da63      	bge.n	800816c <_dtoa_r+0x924>
 80080a4:	2300      	movs	r3, #0
 80080a6:	4659      	mov	r1, fp
 80080a8:	220a      	movs	r2, #10
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 fdb6 	bl	8008c1c <__multadd>
 80080b0:	9b08      	ldr	r3, [sp, #32]
 80080b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080b6:	4683      	mov	fp, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 818f 	beq.w	80083dc <_dtoa_r+0xb94>
 80080be:	4639      	mov	r1, r7
 80080c0:	2300      	movs	r3, #0
 80080c2:	220a      	movs	r2, #10
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fda9 	bl	8008c1c <__multadd>
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	4607      	mov	r7, r0
 80080d0:	f300 808e 	bgt.w	80081f0 <_dtoa_r+0x9a8>
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	dc50      	bgt.n	800817c <_dtoa_r+0x934>
 80080da:	e089      	b.n	80081f0 <_dtoa_r+0x9a8>
 80080dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080e2:	e75d      	b.n	8007fa0 <_dtoa_r+0x758>
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	1e5e      	subs	r6, r3, #1
 80080e8:	9b06      	ldr	r3, [sp, #24]
 80080ea:	42b3      	cmp	r3, r6
 80080ec:	bfbf      	itttt	lt
 80080ee:	9b06      	ldrlt	r3, [sp, #24]
 80080f0:	9606      	strlt	r6, [sp, #24]
 80080f2:	1af2      	sublt	r2, r6, r3
 80080f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80080f6:	bfb6      	itet	lt
 80080f8:	189b      	addlt	r3, r3, r2
 80080fa:	1b9e      	subge	r6, r3, r6
 80080fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	bfb8      	it	lt
 8008102:	2600      	movlt	r6, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	bfb5      	itete	lt
 8008108:	eba8 0503 	sublt.w	r5, r8, r3
 800810c:	9b01      	ldrge	r3, [sp, #4]
 800810e:	2300      	movlt	r3, #0
 8008110:	4645      	movge	r5, r8
 8008112:	e747      	b.n	8007fa4 <_dtoa_r+0x75c>
 8008114:	9e06      	ldr	r6, [sp, #24]
 8008116:	9f08      	ldr	r7, [sp, #32]
 8008118:	4645      	mov	r5, r8
 800811a:	e74c      	b.n	8007fb6 <_dtoa_r+0x76e>
 800811c:	9a06      	ldr	r2, [sp, #24]
 800811e:	e775      	b.n	800800c <_dtoa_r+0x7c4>
 8008120:	9b05      	ldr	r3, [sp, #20]
 8008122:	2b01      	cmp	r3, #1
 8008124:	dc18      	bgt.n	8008158 <_dtoa_r+0x910>
 8008126:	9b02      	ldr	r3, [sp, #8]
 8008128:	b9b3      	cbnz	r3, 8008158 <_dtoa_r+0x910>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008130:	b9a3      	cbnz	r3, 800815c <_dtoa_r+0x914>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008138:	0d1b      	lsrs	r3, r3, #20
 800813a:	051b      	lsls	r3, r3, #20
 800813c:	b12b      	cbz	r3, 800814a <_dtoa_r+0x902>
 800813e:	9b04      	ldr	r3, [sp, #16]
 8008140:	3301      	adds	r3, #1
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	f108 0801 	add.w	r8, r8, #1
 8008148:	2301      	movs	r3, #1
 800814a:	9306      	str	r3, [sp, #24]
 800814c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800814e:	2b00      	cmp	r3, #0
 8008150:	f47f af74 	bne.w	800803c <_dtoa_r+0x7f4>
 8008154:	2001      	movs	r0, #1
 8008156:	e779      	b.n	800804c <_dtoa_r+0x804>
 8008158:	2300      	movs	r3, #0
 800815a:	e7f6      	b.n	800814a <_dtoa_r+0x902>
 800815c:	9b02      	ldr	r3, [sp, #8]
 800815e:	e7f4      	b.n	800814a <_dtoa_r+0x902>
 8008160:	d085      	beq.n	800806e <_dtoa_r+0x826>
 8008162:	4618      	mov	r0, r3
 8008164:	301c      	adds	r0, #28
 8008166:	e77d      	b.n	8008064 <_dtoa_r+0x81c>
 8008168:	40240000 	.word	0x40240000
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	dc38      	bgt.n	80081e4 <_dtoa_r+0x99c>
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	2b02      	cmp	r3, #2
 8008176:	dd35      	ble.n	80081e4 <_dtoa_r+0x99c>
 8008178:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800817c:	f1b9 0f00 	cmp.w	r9, #0
 8008180:	d10d      	bne.n	800819e <_dtoa_r+0x956>
 8008182:	4631      	mov	r1, r6
 8008184:	464b      	mov	r3, r9
 8008186:	2205      	movs	r2, #5
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fd47 	bl	8008c1c <__multadd>
 800818e:	4601      	mov	r1, r0
 8008190:	4606      	mov	r6, r0
 8008192:	4658      	mov	r0, fp
 8008194:	f000 ffa8 	bl	80090e8 <__mcmp>
 8008198:	2800      	cmp	r0, #0
 800819a:	f73f adbd 	bgt.w	8007d18 <_dtoa_r+0x4d0>
 800819e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a0:	9d00      	ldr	r5, [sp, #0]
 80081a2:	ea6f 0a03 	mvn.w	sl, r3
 80081a6:	f04f 0800 	mov.w	r8, #0
 80081aa:	4631      	mov	r1, r6
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fd13 	bl	8008bd8 <_Bfree>
 80081b2:	2f00      	cmp	r7, #0
 80081b4:	f43f aeb4 	beq.w	8007f20 <_dtoa_r+0x6d8>
 80081b8:	f1b8 0f00 	cmp.w	r8, #0
 80081bc:	d005      	beq.n	80081ca <_dtoa_r+0x982>
 80081be:	45b8      	cmp	r8, r7
 80081c0:	d003      	beq.n	80081ca <_dtoa_r+0x982>
 80081c2:	4641      	mov	r1, r8
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fd07 	bl	8008bd8 <_Bfree>
 80081ca:	4639      	mov	r1, r7
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fd03 	bl	8008bd8 <_Bfree>
 80081d2:	e6a5      	b.n	8007f20 <_dtoa_r+0x6d8>
 80081d4:	2600      	movs	r6, #0
 80081d6:	4637      	mov	r7, r6
 80081d8:	e7e1      	b.n	800819e <_dtoa_r+0x956>
 80081da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80081dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80081e0:	4637      	mov	r7, r6
 80081e2:	e599      	b.n	8007d18 <_dtoa_r+0x4d0>
 80081e4:	9b08      	ldr	r3, [sp, #32]
 80081e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 80fd 	beq.w	80083ea <_dtoa_r+0xba2>
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	dd05      	ble.n	8008200 <_dtoa_r+0x9b8>
 80081f4:	4639      	mov	r1, r7
 80081f6:	462a      	mov	r2, r5
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 ff09 	bl	8009010 <__lshift>
 80081fe:	4607      	mov	r7, r0
 8008200:	9b06      	ldr	r3, [sp, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d05c      	beq.n	80082c0 <_dtoa_r+0xa78>
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fca5 	bl	8008b58 <_Balloc>
 800820e:	4605      	mov	r5, r0
 8008210:	b928      	cbnz	r0, 800821e <_dtoa_r+0x9d6>
 8008212:	4b80      	ldr	r3, [pc, #512]	; (8008414 <_dtoa_r+0xbcc>)
 8008214:	4602      	mov	r2, r0
 8008216:	f240 21ea 	movw	r1, #746	; 0x2ea
 800821a:	f7ff bb2e 	b.w	800787a <_dtoa_r+0x32>
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	3202      	adds	r2, #2
 8008222:	0092      	lsls	r2, r2, #2
 8008224:	f107 010c 	add.w	r1, r7, #12
 8008228:	300c      	adds	r0, #12
 800822a:	f000 fc87 	bl	8008b3c <memcpy>
 800822e:	2201      	movs	r2, #1
 8008230:	4629      	mov	r1, r5
 8008232:	4620      	mov	r0, r4
 8008234:	f000 feec 	bl	8009010 <__lshift>
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	9b00      	ldr	r3, [sp, #0]
 8008240:	444b      	add	r3, r9
 8008242:	9307      	str	r3, [sp, #28]
 8008244:	9b02      	ldr	r3, [sp, #8]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	46b8      	mov	r8, r7
 800824c:	9306      	str	r3, [sp, #24]
 800824e:	4607      	mov	r7, r0
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	4631      	mov	r1, r6
 8008254:	3b01      	subs	r3, #1
 8008256:	4658      	mov	r0, fp
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	f7ff fa67 	bl	800772c <quorem>
 800825e:	4603      	mov	r3, r0
 8008260:	3330      	adds	r3, #48	; 0x30
 8008262:	9004      	str	r0, [sp, #16]
 8008264:	4641      	mov	r1, r8
 8008266:	4658      	mov	r0, fp
 8008268:	9308      	str	r3, [sp, #32]
 800826a:	f000 ff3d 	bl	80090e8 <__mcmp>
 800826e:	463a      	mov	r2, r7
 8008270:	4681      	mov	r9, r0
 8008272:	4631      	mov	r1, r6
 8008274:	4620      	mov	r0, r4
 8008276:	f000 ff53 	bl	8009120 <__mdiff>
 800827a:	68c2      	ldr	r2, [r0, #12]
 800827c:	9b08      	ldr	r3, [sp, #32]
 800827e:	4605      	mov	r5, r0
 8008280:	bb02      	cbnz	r2, 80082c4 <_dtoa_r+0xa7c>
 8008282:	4601      	mov	r1, r0
 8008284:	4658      	mov	r0, fp
 8008286:	f000 ff2f 	bl	80090e8 <__mcmp>
 800828a:	9b08      	ldr	r3, [sp, #32]
 800828c:	4602      	mov	r2, r0
 800828e:	4629      	mov	r1, r5
 8008290:	4620      	mov	r0, r4
 8008292:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008296:	f000 fc9f 	bl	8008bd8 <_Bfree>
 800829a:	9b05      	ldr	r3, [sp, #20]
 800829c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829e:	9d01      	ldr	r5, [sp, #4]
 80082a0:	ea43 0102 	orr.w	r1, r3, r2
 80082a4:	9b06      	ldr	r3, [sp, #24]
 80082a6:	430b      	orrs	r3, r1
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	d10d      	bne.n	80082c8 <_dtoa_r+0xa80>
 80082ac:	2b39      	cmp	r3, #57	; 0x39
 80082ae:	d029      	beq.n	8008304 <_dtoa_r+0xabc>
 80082b0:	f1b9 0f00 	cmp.w	r9, #0
 80082b4:	dd01      	ble.n	80082ba <_dtoa_r+0xa72>
 80082b6:	9b04      	ldr	r3, [sp, #16]
 80082b8:	3331      	adds	r3, #49	; 0x31
 80082ba:	9a02      	ldr	r2, [sp, #8]
 80082bc:	7013      	strb	r3, [r2, #0]
 80082be:	e774      	b.n	80081aa <_dtoa_r+0x962>
 80082c0:	4638      	mov	r0, r7
 80082c2:	e7b9      	b.n	8008238 <_dtoa_r+0x9f0>
 80082c4:	2201      	movs	r2, #1
 80082c6:	e7e2      	b.n	800828e <_dtoa_r+0xa46>
 80082c8:	f1b9 0f00 	cmp.w	r9, #0
 80082cc:	db06      	blt.n	80082dc <_dtoa_r+0xa94>
 80082ce:	9905      	ldr	r1, [sp, #20]
 80082d0:	ea41 0909 	orr.w	r9, r1, r9
 80082d4:	9906      	ldr	r1, [sp, #24]
 80082d6:	ea59 0101 	orrs.w	r1, r9, r1
 80082da:	d120      	bne.n	800831e <_dtoa_r+0xad6>
 80082dc:	2a00      	cmp	r2, #0
 80082de:	ddec      	ble.n	80082ba <_dtoa_r+0xa72>
 80082e0:	4659      	mov	r1, fp
 80082e2:	2201      	movs	r2, #1
 80082e4:	4620      	mov	r0, r4
 80082e6:	9301      	str	r3, [sp, #4]
 80082e8:	f000 fe92 	bl	8009010 <__lshift>
 80082ec:	4631      	mov	r1, r6
 80082ee:	4683      	mov	fp, r0
 80082f0:	f000 fefa 	bl	80090e8 <__mcmp>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	dc02      	bgt.n	8008300 <_dtoa_r+0xab8>
 80082fa:	d1de      	bne.n	80082ba <_dtoa_r+0xa72>
 80082fc:	07da      	lsls	r2, r3, #31
 80082fe:	d5dc      	bpl.n	80082ba <_dtoa_r+0xa72>
 8008300:	2b39      	cmp	r3, #57	; 0x39
 8008302:	d1d8      	bne.n	80082b6 <_dtoa_r+0xa6e>
 8008304:	9a02      	ldr	r2, [sp, #8]
 8008306:	2339      	movs	r3, #57	; 0x39
 8008308:	7013      	strb	r3, [r2, #0]
 800830a:	462b      	mov	r3, r5
 800830c:	461d      	mov	r5, r3
 800830e:	3b01      	subs	r3, #1
 8008310:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008314:	2a39      	cmp	r2, #57	; 0x39
 8008316:	d050      	beq.n	80083ba <_dtoa_r+0xb72>
 8008318:	3201      	adds	r2, #1
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	e745      	b.n	80081aa <_dtoa_r+0x962>
 800831e:	2a00      	cmp	r2, #0
 8008320:	dd03      	ble.n	800832a <_dtoa_r+0xae2>
 8008322:	2b39      	cmp	r3, #57	; 0x39
 8008324:	d0ee      	beq.n	8008304 <_dtoa_r+0xabc>
 8008326:	3301      	adds	r3, #1
 8008328:	e7c7      	b.n	80082ba <_dtoa_r+0xa72>
 800832a:	9a01      	ldr	r2, [sp, #4]
 800832c:	9907      	ldr	r1, [sp, #28]
 800832e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008332:	428a      	cmp	r2, r1
 8008334:	d02a      	beq.n	800838c <_dtoa_r+0xb44>
 8008336:	4659      	mov	r1, fp
 8008338:	2300      	movs	r3, #0
 800833a:	220a      	movs	r2, #10
 800833c:	4620      	mov	r0, r4
 800833e:	f000 fc6d 	bl	8008c1c <__multadd>
 8008342:	45b8      	cmp	r8, r7
 8008344:	4683      	mov	fp, r0
 8008346:	f04f 0300 	mov.w	r3, #0
 800834a:	f04f 020a 	mov.w	r2, #10
 800834e:	4641      	mov	r1, r8
 8008350:	4620      	mov	r0, r4
 8008352:	d107      	bne.n	8008364 <_dtoa_r+0xb1c>
 8008354:	f000 fc62 	bl	8008c1c <__multadd>
 8008358:	4680      	mov	r8, r0
 800835a:	4607      	mov	r7, r0
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	3301      	adds	r3, #1
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	e775      	b.n	8008250 <_dtoa_r+0xa08>
 8008364:	f000 fc5a 	bl	8008c1c <__multadd>
 8008368:	4639      	mov	r1, r7
 800836a:	4680      	mov	r8, r0
 800836c:	2300      	movs	r3, #0
 800836e:	220a      	movs	r2, #10
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fc53 	bl	8008c1c <__multadd>
 8008376:	4607      	mov	r7, r0
 8008378:	e7f0      	b.n	800835c <_dtoa_r+0xb14>
 800837a:	f1b9 0f00 	cmp.w	r9, #0
 800837e:	9a00      	ldr	r2, [sp, #0]
 8008380:	bfcc      	ite	gt
 8008382:	464d      	movgt	r5, r9
 8008384:	2501      	movle	r5, #1
 8008386:	4415      	add	r5, r2
 8008388:	f04f 0800 	mov.w	r8, #0
 800838c:	4659      	mov	r1, fp
 800838e:	2201      	movs	r2, #1
 8008390:	4620      	mov	r0, r4
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	f000 fe3c 	bl	8009010 <__lshift>
 8008398:	4631      	mov	r1, r6
 800839a:	4683      	mov	fp, r0
 800839c:	f000 fea4 	bl	80090e8 <__mcmp>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	dcb2      	bgt.n	800830a <_dtoa_r+0xac2>
 80083a4:	d102      	bne.n	80083ac <_dtoa_r+0xb64>
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	07db      	lsls	r3, r3, #31
 80083aa:	d4ae      	bmi.n	800830a <_dtoa_r+0xac2>
 80083ac:	462b      	mov	r3, r5
 80083ae:	461d      	mov	r5, r3
 80083b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083b4:	2a30      	cmp	r2, #48	; 0x30
 80083b6:	d0fa      	beq.n	80083ae <_dtoa_r+0xb66>
 80083b8:	e6f7      	b.n	80081aa <_dtoa_r+0x962>
 80083ba:	9a00      	ldr	r2, [sp, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d1a5      	bne.n	800830c <_dtoa_r+0xac4>
 80083c0:	f10a 0a01 	add.w	sl, sl, #1
 80083c4:	2331      	movs	r3, #49	; 0x31
 80083c6:	e779      	b.n	80082bc <_dtoa_r+0xa74>
 80083c8:	4b13      	ldr	r3, [pc, #76]	; (8008418 <_dtoa_r+0xbd0>)
 80083ca:	f7ff baaf 	b.w	800792c <_dtoa_r+0xe4>
 80083ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f47f aa86 	bne.w	80078e2 <_dtoa_r+0x9a>
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <_dtoa_r+0xbd4>)
 80083d8:	f7ff baa8 	b.w	800792c <_dtoa_r+0xe4>
 80083dc:	f1b9 0f00 	cmp.w	r9, #0
 80083e0:	dc03      	bgt.n	80083ea <_dtoa_r+0xba2>
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	f73f aec9 	bgt.w	800817c <_dtoa_r+0x934>
 80083ea:	9d00      	ldr	r5, [sp, #0]
 80083ec:	4631      	mov	r1, r6
 80083ee:	4658      	mov	r0, fp
 80083f0:	f7ff f99c 	bl	800772c <quorem>
 80083f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80083f8:	f805 3b01 	strb.w	r3, [r5], #1
 80083fc:	9a00      	ldr	r2, [sp, #0]
 80083fe:	1aaa      	subs	r2, r5, r2
 8008400:	4591      	cmp	r9, r2
 8008402:	ddba      	ble.n	800837a <_dtoa_r+0xb32>
 8008404:	4659      	mov	r1, fp
 8008406:	2300      	movs	r3, #0
 8008408:	220a      	movs	r2, #10
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fc06 	bl	8008c1c <__multadd>
 8008410:	4683      	mov	fp, r0
 8008412:	e7eb      	b.n	80083ec <_dtoa_r+0xba4>
 8008414:	0800ad34 	.word	0x0800ad34
 8008418:	0800ab34 	.word	0x0800ab34
 800841c:	0800acb1 	.word	0x0800acb1

08008420 <rshift>:
 8008420:	6903      	ldr	r3, [r0, #16]
 8008422:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008426:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800842a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800842e:	f100 0414 	add.w	r4, r0, #20
 8008432:	dd45      	ble.n	80084c0 <rshift+0xa0>
 8008434:	f011 011f 	ands.w	r1, r1, #31
 8008438:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800843c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008440:	d10c      	bne.n	800845c <rshift+0x3c>
 8008442:	f100 0710 	add.w	r7, r0, #16
 8008446:	4629      	mov	r1, r5
 8008448:	42b1      	cmp	r1, r6
 800844a:	d334      	bcc.n	80084b6 <rshift+0x96>
 800844c:	1a9b      	subs	r3, r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	1eea      	subs	r2, r5, #3
 8008452:	4296      	cmp	r6, r2
 8008454:	bf38      	it	cc
 8008456:	2300      	movcc	r3, #0
 8008458:	4423      	add	r3, r4
 800845a:	e015      	b.n	8008488 <rshift+0x68>
 800845c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008460:	f1c1 0820 	rsb	r8, r1, #32
 8008464:	40cf      	lsrs	r7, r1
 8008466:	f105 0e04 	add.w	lr, r5, #4
 800846a:	46a1      	mov	r9, r4
 800846c:	4576      	cmp	r6, lr
 800846e:	46f4      	mov	ip, lr
 8008470:	d815      	bhi.n	800849e <rshift+0x7e>
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	009a      	lsls	r2, r3, #2
 8008476:	3a04      	subs	r2, #4
 8008478:	3501      	adds	r5, #1
 800847a:	42ae      	cmp	r6, r5
 800847c:	bf38      	it	cc
 800847e:	2200      	movcc	r2, #0
 8008480:	18a3      	adds	r3, r4, r2
 8008482:	50a7      	str	r7, [r4, r2]
 8008484:	b107      	cbz	r7, 8008488 <rshift+0x68>
 8008486:	3304      	adds	r3, #4
 8008488:	1b1a      	subs	r2, r3, r4
 800848a:	42a3      	cmp	r3, r4
 800848c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008490:	bf08      	it	eq
 8008492:	2300      	moveq	r3, #0
 8008494:	6102      	str	r2, [r0, #16]
 8008496:	bf08      	it	eq
 8008498:	6143      	streq	r3, [r0, #20]
 800849a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800849e:	f8dc c000 	ldr.w	ip, [ip]
 80084a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80084a6:	ea4c 0707 	orr.w	r7, ip, r7
 80084aa:	f849 7b04 	str.w	r7, [r9], #4
 80084ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084b2:	40cf      	lsrs	r7, r1
 80084b4:	e7da      	b.n	800846c <rshift+0x4c>
 80084b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80084ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80084be:	e7c3      	b.n	8008448 <rshift+0x28>
 80084c0:	4623      	mov	r3, r4
 80084c2:	e7e1      	b.n	8008488 <rshift+0x68>

080084c4 <__hexdig_fun>:
 80084c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084c8:	2b09      	cmp	r3, #9
 80084ca:	d802      	bhi.n	80084d2 <__hexdig_fun+0xe>
 80084cc:	3820      	subs	r0, #32
 80084ce:	b2c0      	uxtb	r0, r0
 80084d0:	4770      	bx	lr
 80084d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	d801      	bhi.n	80084de <__hexdig_fun+0x1a>
 80084da:	3847      	subs	r0, #71	; 0x47
 80084dc:	e7f7      	b.n	80084ce <__hexdig_fun+0xa>
 80084de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d801      	bhi.n	80084ea <__hexdig_fun+0x26>
 80084e6:	3827      	subs	r0, #39	; 0x27
 80084e8:	e7f1      	b.n	80084ce <__hexdig_fun+0xa>
 80084ea:	2000      	movs	r0, #0
 80084ec:	4770      	bx	lr
	...

080084f0 <__gethex>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	ed2d 8b02 	vpush	{d8}
 80084f8:	b089      	sub	sp, #36	; 0x24
 80084fa:	ee08 0a10 	vmov	s16, r0
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	4bbc      	ldr	r3, [pc, #752]	; (80087f4 <__gethex+0x304>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	4618      	mov	r0, r3
 8008508:	468b      	mov	fp, r1
 800850a:	4690      	mov	r8, r2
 800850c:	f7f7 fe68 	bl	80001e0 <strlen>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	f8db 2000 	ldr.w	r2, [fp]
 8008516:	4403      	add	r3, r0
 8008518:	4682      	mov	sl, r0
 800851a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800851e:	9305      	str	r3, [sp, #20]
 8008520:	1c93      	adds	r3, r2, #2
 8008522:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008526:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800852a:	32fe      	adds	r2, #254	; 0xfe
 800852c:	18d1      	adds	r1, r2, r3
 800852e:	461f      	mov	r7, r3
 8008530:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008534:	9100      	str	r1, [sp, #0]
 8008536:	2830      	cmp	r0, #48	; 0x30
 8008538:	d0f8      	beq.n	800852c <__gethex+0x3c>
 800853a:	f7ff ffc3 	bl	80084c4 <__hexdig_fun>
 800853e:	4604      	mov	r4, r0
 8008540:	2800      	cmp	r0, #0
 8008542:	d13a      	bne.n	80085ba <__gethex+0xca>
 8008544:	9901      	ldr	r1, [sp, #4]
 8008546:	4652      	mov	r2, sl
 8008548:	4638      	mov	r0, r7
 800854a:	f001 f9ed 	bl	8009928 <strncmp>
 800854e:	4605      	mov	r5, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	d168      	bne.n	8008626 <__gethex+0x136>
 8008554:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008558:	eb07 060a 	add.w	r6, r7, sl
 800855c:	f7ff ffb2 	bl	80084c4 <__hexdig_fun>
 8008560:	2800      	cmp	r0, #0
 8008562:	d062      	beq.n	800862a <__gethex+0x13a>
 8008564:	4633      	mov	r3, r6
 8008566:	7818      	ldrb	r0, [r3, #0]
 8008568:	2830      	cmp	r0, #48	; 0x30
 800856a:	461f      	mov	r7, r3
 800856c:	f103 0301 	add.w	r3, r3, #1
 8008570:	d0f9      	beq.n	8008566 <__gethex+0x76>
 8008572:	f7ff ffa7 	bl	80084c4 <__hexdig_fun>
 8008576:	2301      	movs	r3, #1
 8008578:	fab0 f480 	clz	r4, r0
 800857c:	0964      	lsrs	r4, r4, #5
 800857e:	4635      	mov	r5, r6
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	463a      	mov	r2, r7
 8008584:	4616      	mov	r6, r2
 8008586:	3201      	adds	r2, #1
 8008588:	7830      	ldrb	r0, [r6, #0]
 800858a:	f7ff ff9b 	bl	80084c4 <__hexdig_fun>
 800858e:	2800      	cmp	r0, #0
 8008590:	d1f8      	bne.n	8008584 <__gethex+0x94>
 8008592:	9901      	ldr	r1, [sp, #4]
 8008594:	4652      	mov	r2, sl
 8008596:	4630      	mov	r0, r6
 8008598:	f001 f9c6 	bl	8009928 <strncmp>
 800859c:	b980      	cbnz	r0, 80085c0 <__gethex+0xd0>
 800859e:	b94d      	cbnz	r5, 80085b4 <__gethex+0xc4>
 80085a0:	eb06 050a 	add.w	r5, r6, sl
 80085a4:	462a      	mov	r2, r5
 80085a6:	4616      	mov	r6, r2
 80085a8:	3201      	adds	r2, #1
 80085aa:	7830      	ldrb	r0, [r6, #0]
 80085ac:	f7ff ff8a 	bl	80084c4 <__hexdig_fun>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d1f8      	bne.n	80085a6 <__gethex+0xb6>
 80085b4:	1bad      	subs	r5, r5, r6
 80085b6:	00ad      	lsls	r5, r5, #2
 80085b8:	e004      	b.n	80085c4 <__gethex+0xd4>
 80085ba:	2400      	movs	r4, #0
 80085bc:	4625      	mov	r5, r4
 80085be:	e7e0      	b.n	8008582 <__gethex+0x92>
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	d1f7      	bne.n	80085b4 <__gethex+0xc4>
 80085c4:	7833      	ldrb	r3, [r6, #0]
 80085c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085ca:	2b50      	cmp	r3, #80	; 0x50
 80085cc:	d13b      	bne.n	8008646 <__gethex+0x156>
 80085ce:	7873      	ldrb	r3, [r6, #1]
 80085d0:	2b2b      	cmp	r3, #43	; 0x2b
 80085d2:	d02c      	beq.n	800862e <__gethex+0x13e>
 80085d4:	2b2d      	cmp	r3, #45	; 0x2d
 80085d6:	d02e      	beq.n	8008636 <__gethex+0x146>
 80085d8:	1c71      	adds	r1, r6, #1
 80085da:	f04f 0900 	mov.w	r9, #0
 80085de:	7808      	ldrb	r0, [r1, #0]
 80085e0:	f7ff ff70 	bl	80084c4 <__hexdig_fun>
 80085e4:	1e43      	subs	r3, r0, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b18      	cmp	r3, #24
 80085ea:	d82c      	bhi.n	8008646 <__gethex+0x156>
 80085ec:	f1a0 0210 	sub.w	r2, r0, #16
 80085f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085f4:	f7ff ff66 	bl	80084c4 <__hexdig_fun>
 80085f8:	1e43      	subs	r3, r0, #1
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b18      	cmp	r3, #24
 80085fe:	d91d      	bls.n	800863c <__gethex+0x14c>
 8008600:	f1b9 0f00 	cmp.w	r9, #0
 8008604:	d000      	beq.n	8008608 <__gethex+0x118>
 8008606:	4252      	negs	r2, r2
 8008608:	4415      	add	r5, r2
 800860a:	f8cb 1000 	str.w	r1, [fp]
 800860e:	b1e4      	cbz	r4, 800864a <__gethex+0x15a>
 8008610:	9b00      	ldr	r3, [sp, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	bf14      	ite	ne
 8008616:	2700      	movne	r7, #0
 8008618:	2706      	moveq	r7, #6
 800861a:	4638      	mov	r0, r7
 800861c:	b009      	add	sp, #36	; 0x24
 800861e:	ecbd 8b02 	vpop	{d8}
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008626:	463e      	mov	r6, r7
 8008628:	4625      	mov	r5, r4
 800862a:	2401      	movs	r4, #1
 800862c:	e7ca      	b.n	80085c4 <__gethex+0xd4>
 800862e:	f04f 0900 	mov.w	r9, #0
 8008632:	1cb1      	adds	r1, r6, #2
 8008634:	e7d3      	b.n	80085de <__gethex+0xee>
 8008636:	f04f 0901 	mov.w	r9, #1
 800863a:	e7fa      	b.n	8008632 <__gethex+0x142>
 800863c:	230a      	movs	r3, #10
 800863e:	fb03 0202 	mla	r2, r3, r2, r0
 8008642:	3a10      	subs	r2, #16
 8008644:	e7d4      	b.n	80085f0 <__gethex+0x100>
 8008646:	4631      	mov	r1, r6
 8008648:	e7df      	b.n	800860a <__gethex+0x11a>
 800864a:	1bf3      	subs	r3, r6, r7
 800864c:	3b01      	subs	r3, #1
 800864e:	4621      	mov	r1, r4
 8008650:	2b07      	cmp	r3, #7
 8008652:	dc0b      	bgt.n	800866c <__gethex+0x17c>
 8008654:	ee18 0a10 	vmov	r0, s16
 8008658:	f000 fa7e 	bl	8008b58 <_Balloc>
 800865c:	4604      	mov	r4, r0
 800865e:	b940      	cbnz	r0, 8008672 <__gethex+0x182>
 8008660:	4b65      	ldr	r3, [pc, #404]	; (80087f8 <__gethex+0x308>)
 8008662:	4602      	mov	r2, r0
 8008664:	21de      	movs	r1, #222	; 0xde
 8008666:	4865      	ldr	r0, [pc, #404]	; (80087fc <__gethex+0x30c>)
 8008668:	f001 f97e 	bl	8009968 <__assert_func>
 800866c:	3101      	adds	r1, #1
 800866e:	105b      	asrs	r3, r3, #1
 8008670:	e7ee      	b.n	8008650 <__gethex+0x160>
 8008672:	f100 0914 	add.w	r9, r0, #20
 8008676:	f04f 0b00 	mov.w	fp, #0
 800867a:	f1ca 0301 	rsb	r3, sl, #1
 800867e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008682:	f8cd b000 	str.w	fp, [sp]
 8008686:	9306      	str	r3, [sp, #24]
 8008688:	42b7      	cmp	r7, r6
 800868a:	d340      	bcc.n	800870e <__gethex+0x21e>
 800868c:	9802      	ldr	r0, [sp, #8]
 800868e:	9b00      	ldr	r3, [sp, #0]
 8008690:	f840 3b04 	str.w	r3, [r0], #4
 8008694:	eba0 0009 	sub.w	r0, r0, r9
 8008698:	1080      	asrs	r0, r0, #2
 800869a:	0146      	lsls	r6, r0, #5
 800869c:	6120      	str	r0, [r4, #16]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fb50 	bl	8008d44 <__hi0bits>
 80086a4:	1a30      	subs	r0, r6, r0
 80086a6:	f8d8 6000 	ldr.w	r6, [r8]
 80086aa:	42b0      	cmp	r0, r6
 80086ac:	dd63      	ble.n	8008776 <__gethex+0x286>
 80086ae:	1b87      	subs	r7, r0, r6
 80086b0:	4639      	mov	r1, r7
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 feea 	bl	800948c <__any_on>
 80086b8:	4682      	mov	sl, r0
 80086ba:	b1a8      	cbz	r0, 80086e8 <__gethex+0x1f8>
 80086bc:	1e7b      	subs	r3, r7, #1
 80086be:	1159      	asrs	r1, r3, #5
 80086c0:	f003 021f 	and.w	r2, r3, #31
 80086c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086c8:	f04f 0a01 	mov.w	sl, #1
 80086cc:	fa0a f202 	lsl.w	r2, sl, r2
 80086d0:	420a      	tst	r2, r1
 80086d2:	d009      	beq.n	80086e8 <__gethex+0x1f8>
 80086d4:	4553      	cmp	r3, sl
 80086d6:	dd05      	ble.n	80086e4 <__gethex+0x1f4>
 80086d8:	1eb9      	subs	r1, r7, #2
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 fed6 	bl	800948c <__any_on>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d145      	bne.n	8008770 <__gethex+0x280>
 80086e4:	f04f 0a02 	mov.w	sl, #2
 80086e8:	4639      	mov	r1, r7
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff fe98 	bl	8008420 <rshift>
 80086f0:	443d      	add	r5, r7
 80086f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086f6:	42ab      	cmp	r3, r5
 80086f8:	da4c      	bge.n	8008794 <__gethex+0x2a4>
 80086fa:	ee18 0a10 	vmov	r0, s16
 80086fe:	4621      	mov	r1, r4
 8008700:	f000 fa6a 	bl	8008bd8 <_Bfree>
 8008704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008706:	2300      	movs	r3, #0
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	27a3      	movs	r7, #163	; 0xa3
 800870c:	e785      	b.n	800861a <__gethex+0x12a>
 800870e:	1e73      	subs	r3, r6, #1
 8008710:	9a05      	ldr	r2, [sp, #20]
 8008712:	9303      	str	r3, [sp, #12]
 8008714:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008718:	4293      	cmp	r3, r2
 800871a:	d019      	beq.n	8008750 <__gethex+0x260>
 800871c:	f1bb 0f20 	cmp.w	fp, #32
 8008720:	d107      	bne.n	8008732 <__gethex+0x242>
 8008722:	9b02      	ldr	r3, [sp, #8]
 8008724:	9a00      	ldr	r2, [sp, #0]
 8008726:	f843 2b04 	str.w	r2, [r3], #4
 800872a:	9302      	str	r3, [sp, #8]
 800872c:	2300      	movs	r3, #0
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	469b      	mov	fp, r3
 8008732:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008736:	f7ff fec5 	bl	80084c4 <__hexdig_fun>
 800873a:	9b00      	ldr	r3, [sp, #0]
 800873c:	f000 000f 	and.w	r0, r0, #15
 8008740:	fa00 f00b 	lsl.w	r0, r0, fp
 8008744:	4303      	orrs	r3, r0
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	f10b 0b04 	add.w	fp, fp, #4
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	e00d      	b.n	800876c <__gethex+0x27c>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	9a06      	ldr	r2, [sp, #24]
 8008754:	4413      	add	r3, r2
 8008756:	42bb      	cmp	r3, r7
 8008758:	d3e0      	bcc.n	800871c <__gethex+0x22c>
 800875a:	4618      	mov	r0, r3
 800875c:	9901      	ldr	r1, [sp, #4]
 800875e:	9307      	str	r3, [sp, #28]
 8008760:	4652      	mov	r2, sl
 8008762:	f001 f8e1 	bl	8009928 <strncmp>
 8008766:	9b07      	ldr	r3, [sp, #28]
 8008768:	2800      	cmp	r0, #0
 800876a:	d1d7      	bne.n	800871c <__gethex+0x22c>
 800876c:	461e      	mov	r6, r3
 800876e:	e78b      	b.n	8008688 <__gethex+0x198>
 8008770:	f04f 0a03 	mov.w	sl, #3
 8008774:	e7b8      	b.n	80086e8 <__gethex+0x1f8>
 8008776:	da0a      	bge.n	800878e <__gethex+0x29e>
 8008778:	1a37      	subs	r7, r6, r0
 800877a:	4621      	mov	r1, r4
 800877c:	ee18 0a10 	vmov	r0, s16
 8008780:	463a      	mov	r2, r7
 8008782:	f000 fc45 	bl	8009010 <__lshift>
 8008786:	1bed      	subs	r5, r5, r7
 8008788:	4604      	mov	r4, r0
 800878a:	f100 0914 	add.w	r9, r0, #20
 800878e:	f04f 0a00 	mov.w	sl, #0
 8008792:	e7ae      	b.n	80086f2 <__gethex+0x202>
 8008794:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008798:	42a8      	cmp	r0, r5
 800879a:	dd72      	ble.n	8008882 <__gethex+0x392>
 800879c:	1b45      	subs	r5, r0, r5
 800879e:	42ae      	cmp	r6, r5
 80087a0:	dc36      	bgt.n	8008810 <__gethex+0x320>
 80087a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d02a      	beq.n	8008800 <__gethex+0x310>
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d02c      	beq.n	8008808 <__gethex+0x318>
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d115      	bne.n	80087de <__gethex+0x2ee>
 80087b2:	42ae      	cmp	r6, r5
 80087b4:	d113      	bne.n	80087de <__gethex+0x2ee>
 80087b6:	2e01      	cmp	r6, #1
 80087b8:	d10b      	bne.n	80087d2 <__gethex+0x2e2>
 80087ba:	9a04      	ldr	r2, [sp, #16]
 80087bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	2301      	movs	r3, #1
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	f8c9 3000 	str.w	r3, [r9]
 80087ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087cc:	2762      	movs	r7, #98	; 0x62
 80087ce:	601c      	str	r4, [r3, #0]
 80087d0:	e723      	b.n	800861a <__gethex+0x12a>
 80087d2:	1e71      	subs	r1, r6, #1
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fe59 	bl	800948c <__any_on>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d1ed      	bne.n	80087ba <__gethex+0x2ca>
 80087de:	ee18 0a10 	vmov	r0, s16
 80087e2:	4621      	mov	r1, r4
 80087e4:	f000 f9f8 	bl	8008bd8 <_Bfree>
 80087e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087ea:	2300      	movs	r3, #0
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	2750      	movs	r7, #80	; 0x50
 80087f0:	e713      	b.n	800861a <__gethex+0x12a>
 80087f2:	bf00      	nop
 80087f4:	0800adb0 	.word	0x0800adb0
 80087f8:	0800ad34 	.word	0x0800ad34
 80087fc:	0800ad45 	.word	0x0800ad45
 8008800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1eb      	bne.n	80087de <__gethex+0x2ee>
 8008806:	e7d8      	b.n	80087ba <__gethex+0x2ca>
 8008808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1d5      	bne.n	80087ba <__gethex+0x2ca>
 800880e:	e7e6      	b.n	80087de <__gethex+0x2ee>
 8008810:	1e6f      	subs	r7, r5, #1
 8008812:	f1ba 0f00 	cmp.w	sl, #0
 8008816:	d131      	bne.n	800887c <__gethex+0x38c>
 8008818:	b127      	cbz	r7, 8008824 <__gethex+0x334>
 800881a:	4639      	mov	r1, r7
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fe35 	bl	800948c <__any_on>
 8008822:	4682      	mov	sl, r0
 8008824:	117b      	asrs	r3, r7, #5
 8008826:	2101      	movs	r1, #1
 8008828:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800882c:	f007 071f 	and.w	r7, r7, #31
 8008830:	fa01 f707 	lsl.w	r7, r1, r7
 8008834:	421f      	tst	r7, r3
 8008836:	4629      	mov	r1, r5
 8008838:	4620      	mov	r0, r4
 800883a:	bf18      	it	ne
 800883c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008840:	1b76      	subs	r6, r6, r5
 8008842:	f7ff fded 	bl	8008420 <rshift>
 8008846:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800884a:	2702      	movs	r7, #2
 800884c:	f1ba 0f00 	cmp.w	sl, #0
 8008850:	d048      	beq.n	80088e4 <__gethex+0x3f4>
 8008852:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d015      	beq.n	8008886 <__gethex+0x396>
 800885a:	2b03      	cmp	r3, #3
 800885c:	d017      	beq.n	800888e <__gethex+0x39e>
 800885e:	2b01      	cmp	r3, #1
 8008860:	d109      	bne.n	8008876 <__gethex+0x386>
 8008862:	f01a 0f02 	tst.w	sl, #2
 8008866:	d006      	beq.n	8008876 <__gethex+0x386>
 8008868:	f8d9 0000 	ldr.w	r0, [r9]
 800886c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008870:	f01a 0f01 	tst.w	sl, #1
 8008874:	d10e      	bne.n	8008894 <__gethex+0x3a4>
 8008876:	f047 0710 	orr.w	r7, r7, #16
 800887a:	e033      	b.n	80088e4 <__gethex+0x3f4>
 800887c:	f04f 0a01 	mov.w	sl, #1
 8008880:	e7d0      	b.n	8008824 <__gethex+0x334>
 8008882:	2701      	movs	r7, #1
 8008884:	e7e2      	b.n	800884c <__gethex+0x35c>
 8008886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008888:	f1c3 0301 	rsb	r3, r3, #1
 800888c:	9315      	str	r3, [sp, #84]	; 0x54
 800888e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0f0      	beq.n	8008876 <__gethex+0x386>
 8008894:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008898:	f104 0314 	add.w	r3, r4, #20
 800889c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088a4:	f04f 0c00 	mov.w	ip, #0
 80088a8:	4618      	mov	r0, r3
 80088aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088b2:	d01c      	beq.n	80088ee <__gethex+0x3fe>
 80088b4:	3201      	adds	r2, #1
 80088b6:	6002      	str	r2, [r0, #0]
 80088b8:	2f02      	cmp	r7, #2
 80088ba:	f104 0314 	add.w	r3, r4, #20
 80088be:	d13f      	bne.n	8008940 <__gethex+0x450>
 80088c0:	f8d8 2000 	ldr.w	r2, [r8]
 80088c4:	3a01      	subs	r2, #1
 80088c6:	42b2      	cmp	r2, r6
 80088c8:	d10a      	bne.n	80088e0 <__gethex+0x3f0>
 80088ca:	1171      	asrs	r1, r6, #5
 80088cc:	2201      	movs	r2, #1
 80088ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088d2:	f006 061f 	and.w	r6, r6, #31
 80088d6:	fa02 f606 	lsl.w	r6, r2, r6
 80088da:	421e      	tst	r6, r3
 80088dc:	bf18      	it	ne
 80088de:	4617      	movne	r7, r2
 80088e0:	f047 0720 	orr.w	r7, r7, #32
 80088e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088e6:	601c      	str	r4, [r3, #0]
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	601d      	str	r5, [r3, #0]
 80088ec:	e695      	b.n	800861a <__gethex+0x12a>
 80088ee:	4299      	cmp	r1, r3
 80088f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80088f4:	d8d8      	bhi.n	80088a8 <__gethex+0x3b8>
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	459b      	cmp	fp, r3
 80088fa:	db19      	blt.n	8008930 <__gethex+0x440>
 80088fc:	6861      	ldr	r1, [r4, #4]
 80088fe:	ee18 0a10 	vmov	r0, s16
 8008902:	3101      	adds	r1, #1
 8008904:	f000 f928 	bl	8008b58 <_Balloc>
 8008908:	4681      	mov	r9, r0
 800890a:	b918      	cbnz	r0, 8008914 <__gethex+0x424>
 800890c:	4b1a      	ldr	r3, [pc, #104]	; (8008978 <__gethex+0x488>)
 800890e:	4602      	mov	r2, r0
 8008910:	2184      	movs	r1, #132	; 0x84
 8008912:	e6a8      	b.n	8008666 <__gethex+0x176>
 8008914:	6922      	ldr	r2, [r4, #16]
 8008916:	3202      	adds	r2, #2
 8008918:	f104 010c 	add.w	r1, r4, #12
 800891c:	0092      	lsls	r2, r2, #2
 800891e:	300c      	adds	r0, #12
 8008920:	f000 f90c 	bl	8008b3c <memcpy>
 8008924:	4621      	mov	r1, r4
 8008926:	ee18 0a10 	vmov	r0, s16
 800892a:	f000 f955 	bl	8008bd8 <_Bfree>
 800892e:	464c      	mov	r4, r9
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008938:	6122      	str	r2, [r4, #16]
 800893a:	2201      	movs	r2, #1
 800893c:	615a      	str	r2, [r3, #20]
 800893e:	e7bb      	b.n	80088b8 <__gethex+0x3c8>
 8008940:	6922      	ldr	r2, [r4, #16]
 8008942:	455a      	cmp	r2, fp
 8008944:	dd0b      	ble.n	800895e <__gethex+0x46e>
 8008946:	2101      	movs	r1, #1
 8008948:	4620      	mov	r0, r4
 800894a:	f7ff fd69 	bl	8008420 <rshift>
 800894e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008952:	3501      	adds	r5, #1
 8008954:	42ab      	cmp	r3, r5
 8008956:	f6ff aed0 	blt.w	80086fa <__gethex+0x20a>
 800895a:	2701      	movs	r7, #1
 800895c:	e7c0      	b.n	80088e0 <__gethex+0x3f0>
 800895e:	f016 061f 	ands.w	r6, r6, #31
 8008962:	d0fa      	beq.n	800895a <__gethex+0x46a>
 8008964:	449a      	add	sl, r3
 8008966:	f1c6 0620 	rsb	r6, r6, #32
 800896a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800896e:	f000 f9e9 	bl	8008d44 <__hi0bits>
 8008972:	42b0      	cmp	r0, r6
 8008974:	dbe7      	blt.n	8008946 <__gethex+0x456>
 8008976:	e7f0      	b.n	800895a <__gethex+0x46a>
 8008978:	0800ad34 	.word	0x0800ad34

0800897c <L_shift>:
 800897c:	f1c2 0208 	rsb	r2, r2, #8
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	b570      	push	{r4, r5, r6, lr}
 8008984:	f1c2 0620 	rsb	r6, r2, #32
 8008988:	6843      	ldr	r3, [r0, #4]
 800898a:	6804      	ldr	r4, [r0, #0]
 800898c:	fa03 f506 	lsl.w	r5, r3, r6
 8008990:	432c      	orrs	r4, r5
 8008992:	40d3      	lsrs	r3, r2
 8008994:	6004      	str	r4, [r0, #0]
 8008996:	f840 3f04 	str.w	r3, [r0, #4]!
 800899a:	4288      	cmp	r0, r1
 800899c:	d3f4      	bcc.n	8008988 <L_shift+0xc>
 800899e:	bd70      	pop	{r4, r5, r6, pc}

080089a0 <__match>:
 80089a0:	b530      	push	{r4, r5, lr}
 80089a2:	6803      	ldr	r3, [r0, #0]
 80089a4:	3301      	adds	r3, #1
 80089a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089aa:	b914      	cbnz	r4, 80089b2 <__match+0x12>
 80089ac:	6003      	str	r3, [r0, #0]
 80089ae:	2001      	movs	r0, #1
 80089b0:	bd30      	pop	{r4, r5, pc}
 80089b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089ba:	2d19      	cmp	r5, #25
 80089bc:	bf98      	it	ls
 80089be:	3220      	addls	r2, #32
 80089c0:	42a2      	cmp	r2, r4
 80089c2:	d0f0      	beq.n	80089a6 <__match+0x6>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e7f3      	b.n	80089b0 <__match+0x10>

080089c8 <__hexnan>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	680b      	ldr	r3, [r1, #0]
 80089ce:	6801      	ldr	r1, [r0, #0]
 80089d0:	115e      	asrs	r6, r3, #5
 80089d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089d6:	f013 031f 	ands.w	r3, r3, #31
 80089da:	b087      	sub	sp, #28
 80089dc:	bf18      	it	ne
 80089de:	3604      	addne	r6, #4
 80089e0:	2500      	movs	r5, #0
 80089e2:	1f37      	subs	r7, r6, #4
 80089e4:	4682      	mov	sl, r0
 80089e6:	4690      	mov	r8, r2
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80089ee:	46b9      	mov	r9, r7
 80089f0:	463c      	mov	r4, r7
 80089f2:	9502      	str	r5, [sp, #8]
 80089f4:	46ab      	mov	fp, r5
 80089f6:	784a      	ldrb	r2, [r1, #1]
 80089f8:	1c4b      	adds	r3, r1, #1
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	b342      	cbz	r2, 8008a50 <__hexnan+0x88>
 80089fe:	4610      	mov	r0, r2
 8008a00:	9105      	str	r1, [sp, #20]
 8008a02:	9204      	str	r2, [sp, #16]
 8008a04:	f7ff fd5e 	bl	80084c4 <__hexdig_fun>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d14f      	bne.n	8008aac <__hexnan+0xe4>
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	9905      	ldr	r1, [sp, #20]
 8008a10:	2a20      	cmp	r2, #32
 8008a12:	d818      	bhi.n	8008a46 <__hexnan+0x7e>
 8008a14:	9b02      	ldr	r3, [sp, #8]
 8008a16:	459b      	cmp	fp, r3
 8008a18:	dd13      	ble.n	8008a42 <__hexnan+0x7a>
 8008a1a:	454c      	cmp	r4, r9
 8008a1c:	d206      	bcs.n	8008a2c <__hexnan+0x64>
 8008a1e:	2d07      	cmp	r5, #7
 8008a20:	dc04      	bgt.n	8008a2c <__hexnan+0x64>
 8008a22:	462a      	mov	r2, r5
 8008a24:	4649      	mov	r1, r9
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7ff ffa8 	bl	800897c <L_shift>
 8008a2c:	4544      	cmp	r4, r8
 8008a2e:	d950      	bls.n	8008ad2 <__hexnan+0x10a>
 8008a30:	2300      	movs	r3, #0
 8008a32:	f1a4 0904 	sub.w	r9, r4, #4
 8008a36:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a3a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a3e:	464c      	mov	r4, r9
 8008a40:	461d      	mov	r5, r3
 8008a42:	9903      	ldr	r1, [sp, #12]
 8008a44:	e7d7      	b.n	80089f6 <__hexnan+0x2e>
 8008a46:	2a29      	cmp	r2, #41	; 0x29
 8008a48:	d156      	bne.n	8008af8 <__hexnan+0x130>
 8008a4a:	3102      	adds	r1, #2
 8008a4c:	f8ca 1000 	str.w	r1, [sl]
 8008a50:	f1bb 0f00 	cmp.w	fp, #0
 8008a54:	d050      	beq.n	8008af8 <__hexnan+0x130>
 8008a56:	454c      	cmp	r4, r9
 8008a58:	d206      	bcs.n	8008a68 <__hexnan+0xa0>
 8008a5a:	2d07      	cmp	r5, #7
 8008a5c:	dc04      	bgt.n	8008a68 <__hexnan+0xa0>
 8008a5e:	462a      	mov	r2, r5
 8008a60:	4649      	mov	r1, r9
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7ff ff8a 	bl	800897c <L_shift>
 8008a68:	4544      	cmp	r4, r8
 8008a6a:	d934      	bls.n	8008ad6 <__hexnan+0x10e>
 8008a6c:	f1a8 0204 	sub.w	r2, r8, #4
 8008a70:	4623      	mov	r3, r4
 8008a72:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a76:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a7a:	429f      	cmp	r7, r3
 8008a7c:	d2f9      	bcs.n	8008a72 <__hexnan+0xaa>
 8008a7e:	1b3b      	subs	r3, r7, r4
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	3304      	adds	r3, #4
 8008a86:	3401      	adds	r4, #1
 8008a88:	3e03      	subs	r6, #3
 8008a8a:	42b4      	cmp	r4, r6
 8008a8c:	bf88      	it	hi
 8008a8e:	2304      	movhi	r3, #4
 8008a90:	4443      	add	r3, r8
 8008a92:	2200      	movs	r2, #0
 8008a94:	f843 2b04 	str.w	r2, [r3], #4
 8008a98:	429f      	cmp	r7, r3
 8008a9a:	d2fb      	bcs.n	8008a94 <__hexnan+0xcc>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	b91b      	cbnz	r3, 8008aa8 <__hexnan+0xe0>
 8008aa0:	4547      	cmp	r7, r8
 8008aa2:	d127      	bne.n	8008af4 <__hexnan+0x12c>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	2005      	movs	r0, #5
 8008aaa:	e026      	b.n	8008afa <__hexnan+0x132>
 8008aac:	3501      	adds	r5, #1
 8008aae:	2d08      	cmp	r5, #8
 8008ab0:	f10b 0b01 	add.w	fp, fp, #1
 8008ab4:	dd06      	ble.n	8008ac4 <__hexnan+0xfc>
 8008ab6:	4544      	cmp	r4, r8
 8008ab8:	d9c3      	bls.n	8008a42 <__hexnan+0x7a>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ac0:	2501      	movs	r5, #1
 8008ac2:	3c04      	subs	r4, #4
 8008ac4:	6822      	ldr	r2, [r4, #0]
 8008ac6:	f000 000f 	and.w	r0, r0, #15
 8008aca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008ace:	6022      	str	r2, [r4, #0]
 8008ad0:	e7b7      	b.n	8008a42 <__hexnan+0x7a>
 8008ad2:	2508      	movs	r5, #8
 8008ad4:	e7b5      	b.n	8008a42 <__hexnan+0x7a>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0df      	beq.n	8008a9c <__hexnan+0xd4>
 8008adc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae0:	f1c3 0320 	rsb	r3, r3, #32
 8008ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008aec:	401a      	ands	r2, r3
 8008aee:	f846 2c04 	str.w	r2, [r6, #-4]
 8008af2:	e7d3      	b.n	8008a9c <__hexnan+0xd4>
 8008af4:	3f04      	subs	r7, #4
 8008af6:	e7d1      	b.n	8008a9c <__hexnan+0xd4>
 8008af8:	2004      	movs	r0, #4
 8008afa:	b007      	add	sp, #28
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b00 <_localeconv_r>:
 8008b00:	4800      	ldr	r0, [pc, #0]	; (8008b04 <_localeconv_r+0x4>)
 8008b02:	4770      	bx	lr
 8008b04:	20000168 	.word	0x20000168

08008b08 <malloc>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	; (8008b14 <malloc+0xc>)
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	f000 bd3d 	b.w	800958c <_malloc_r>
 8008b12:	bf00      	nop
 8008b14:	20000010 	.word	0x20000010

08008b18 <__ascii_mbtowc>:
 8008b18:	b082      	sub	sp, #8
 8008b1a:	b901      	cbnz	r1, 8008b1e <__ascii_mbtowc+0x6>
 8008b1c:	a901      	add	r1, sp, #4
 8008b1e:	b142      	cbz	r2, 8008b32 <__ascii_mbtowc+0x1a>
 8008b20:	b14b      	cbz	r3, 8008b36 <__ascii_mbtowc+0x1e>
 8008b22:	7813      	ldrb	r3, [r2, #0]
 8008b24:	600b      	str	r3, [r1, #0]
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	1e10      	subs	r0, r2, #0
 8008b2a:	bf18      	it	ne
 8008b2c:	2001      	movne	r0, #1
 8008b2e:	b002      	add	sp, #8
 8008b30:	4770      	bx	lr
 8008b32:	4610      	mov	r0, r2
 8008b34:	e7fb      	b.n	8008b2e <__ascii_mbtowc+0x16>
 8008b36:	f06f 0001 	mvn.w	r0, #1
 8008b3a:	e7f8      	b.n	8008b2e <__ascii_mbtowc+0x16>

08008b3c <memcpy>:
 8008b3c:	440a      	add	r2, r1
 8008b3e:	4291      	cmp	r1, r2
 8008b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b44:	d100      	bne.n	8008b48 <memcpy+0xc>
 8008b46:	4770      	bx	lr
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b52:	4291      	cmp	r1, r2
 8008b54:	d1f9      	bne.n	8008b4a <memcpy+0xe>
 8008b56:	bd10      	pop	{r4, pc}

08008b58 <_Balloc>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	460d      	mov	r5, r1
 8008b60:	b976      	cbnz	r6, 8008b80 <_Balloc+0x28>
 8008b62:	2010      	movs	r0, #16
 8008b64:	f7ff ffd0 	bl	8008b08 <malloc>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b6c:	b920      	cbnz	r0, 8008b78 <_Balloc+0x20>
 8008b6e:	4b18      	ldr	r3, [pc, #96]	; (8008bd0 <_Balloc+0x78>)
 8008b70:	4818      	ldr	r0, [pc, #96]	; (8008bd4 <_Balloc+0x7c>)
 8008b72:	2166      	movs	r1, #102	; 0x66
 8008b74:	f000 fef8 	bl	8009968 <__assert_func>
 8008b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b7c:	6006      	str	r6, [r0, #0]
 8008b7e:	60c6      	str	r6, [r0, #12]
 8008b80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b82:	68f3      	ldr	r3, [r6, #12]
 8008b84:	b183      	cbz	r3, 8008ba8 <_Balloc+0x50>
 8008b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b8e:	b9b8      	cbnz	r0, 8008bc0 <_Balloc+0x68>
 8008b90:	2101      	movs	r1, #1
 8008b92:	fa01 f605 	lsl.w	r6, r1, r5
 8008b96:	1d72      	adds	r2, r6, #5
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fc97 	bl	80094ce <_calloc_r>
 8008ba0:	b160      	cbz	r0, 8008bbc <_Balloc+0x64>
 8008ba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ba6:	e00e      	b.n	8008bc6 <_Balloc+0x6e>
 8008ba8:	2221      	movs	r2, #33	; 0x21
 8008baa:	2104      	movs	r1, #4
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 fc8e 	bl	80094ce <_calloc_r>
 8008bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb4:	60f0      	str	r0, [r6, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e4      	bne.n	8008b86 <_Balloc+0x2e>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	6802      	ldr	r2, [r0, #0]
 8008bc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bcc:	e7f7      	b.n	8008bbe <_Balloc+0x66>
 8008bce:	bf00      	nop
 8008bd0:	0800acbe 	.word	0x0800acbe
 8008bd4:	0800adc4 	.word	0x0800adc4

08008bd8 <_Bfree>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bdc:	4605      	mov	r5, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	b976      	cbnz	r6, 8008c00 <_Bfree+0x28>
 8008be2:	2010      	movs	r0, #16
 8008be4:	f7ff ff90 	bl	8008b08 <malloc>
 8008be8:	4602      	mov	r2, r0
 8008bea:	6268      	str	r0, [r5, #36]	; 0x24
 8008bec:	b920      	cbnz	r0, 8008bf8 <_Bfree+0x20>
 8008bee:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <_Bfree+0x3c>)
 8008bf0:	4809      	ldr	r0, [pc, #36]	; (8008c18 <_Bfree+0x40>)
 8008bf2:	218a      	movs	r1, #138	; 0x8a
 8008bf4:	f000 feb8 	bl	8009968 <__assert_func>
 8008bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bfc:	6006      	str	r6, [r0, #0]
 8008bfe:	60c6      	str	r6, [r0, #12]
 8008c00:	b13c      	cbz	r4, 8008c12 <_Bfree+0x3a>
 8008c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c04:	6862      	ldr	r2, [r4, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c0c:	6021      	str	r1, [r4, #0]
 8008c0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	0800acbe 	.word	0x0800acbe
 8008c18:	0800adc4 	.word	0x0800adc4

08008c1c <__multadd>:
 8008c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c20:	690e      	ldr	r6, [r1, #16]
 8008c22:	4607      	mov	r7, r0
 8008c24:	4698      	mov	r8, r3
 8008c26:	460c      	mov	r4, r1
 8008c28:	f101 0014 	add.w	r0, r1, #20
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	6805      	ldr	r5, [r0, #0]
 8008c30:	b2a9      	uxth	r1, r5
 8008c32:	fb02 8101 	mla	r1, r2, r1, r8
 8008c36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c3a:	0c2d      	lsrs	r5, r5, #16
 8008c3c:	fb02 c505 	mla	r5, r2, r5, ip
 8008c40:	b289      	uxth	r1, r1
 8008c42:	3301      	adds	r3, #1
 8008c44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008c48:	429e      	cmp	r6, r3
 8008c4a:	f840 1b04 	str.w	r1, [r0], #4
 8008c4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c52:	dcec      	bgt.n	8008c2e <__multadd+0x12>
 8008c54:	f1b8 0f00 	cmp.w	r8, #0
 8008c58:	d022      	beq.n	8008ca0 <__multadd+0x84>
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	42b3      	cmp	r3, r6
 8008c5e:	dc19      	bgt.n	8008c94 <__multadd+0x78>
 8008c60:	6861      	ldr	r1, [r4, #4]
 8008c62:	4638      	mov	r0, r7
 8008c64:	3101      	adds	r1, #1
 8008c66:	f7ff ff77 	bl	8008b58 <_Balloc>
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	b928      	cbnz	r0, 8008c7a <__multadd+0x5e>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <__multadd+0x8c>)
 8008c72:	480e      	ldr	r0, [pc, #56]	; (8008cac <__multadd+0x90>)
 8008c74:	21b5      	movs	r1, #181	; 0xb5
 8008c76:	f000 fe77 	bl	8009968 <__assert_func>
 8008c7a:	6922      	ldr	r2, [r4, #16]
 8008c7c:	3202      	adds	r2, #2
 8008c7e:	f104 010c 	add.w	r1, r4, #12
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	300c      	adds	r0, #12
 8008c86:	f7ff ff59 	bl	8008b3c <memcpy>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	f7ff ffa3 	bl	8008bd8 <_Bfree>
 8008c92:	462c      	mov	r4, r5
 8008c94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008c98:	3601      	adds	r6, #1
 8008c9a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008c9e:	6126      	str	r6, [r4, #16]
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca6:	bf00      	nop
 8008ca8:	0800ad34 	.word	0x0800ad34
 8008cac:	0800adc4 	.word	0x0800adc4

08008cb0 <__s2b>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4615      	mov	r5, r2
 8008cb8:	461f      	mov	r7, r3
 8008cba:	2209      	movs	r2, #9
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	db09      	blt.n	8008ce0 <__s2b+0x30>
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7ff ff43 	bl	8008b58 <_Balloc>
 8008cd2:	b940      	cbnz	r0, 8008ce6 <__s2b+0x36>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	4b19      	ldr	r3, [pc, #100]	; (8008d3c <__s2b+0x8c>)
 8008cd8:	4819      	ldr	r0, [pc, #100]	; (8008d40 <__s2b+0x90>)
 8008cda:	21ce      	movs	r1, #206	; 0xce
 8008cdc:	f000 fe44 	bl	8009968 <__assert_func>
 8008ce0:	0052      	lsls	r2, r2, #1
 8008ce2:	3101      	adds	r1, #1
 8008ce4:	e7f0      	b.n	8008cc8 <__s2b+0x18>
 8008ce6:	9b08      	ldr	r3, [sp, #32]
 8008ce8:	6143      	str	r3, [r0, #20]
 8008cea:	2d09      	cmp	r5, #9
 8008cec:	f04f 0301 	mov.w	r3, #1
 8008cf0:	6103      	str	r3, [r0, #16]
 8008cf2:	dd16      	ble.n	8008d22 <__s2b+0x72>
 8008cf4:	f104 0909 	add.w	r9, r4, #9
 8008cf8:	46c8      	mov	r8, r9
 8008cfa:	442c      	add	r4, r5
 8008cfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d00:	4601      	mov	r1, r0
 8008d02:	3b30      	subs	r3, #48	; 0x30
 8008d04:	220a      	movs	r2, #10
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ff88 	bl	8008c1c <__multadd>
 8008d0c:	45a0      	cmp	r8, r4
 8008d0e:	d1f5      	bne.n	8008cfc <__s2b+0x4c>
 8008d10:	f1a5 0408 	sub.w	r4, r5, #8
 8008d14:	444c      	add	r4, r9
 8008d16:	1b2d      	subs	r5, r5, r4
 8008d18:	1963      	adds	r3, r4, r5
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	db04      	blt.n	8008d28 <__s2b+0x78>
 8008d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d22:	340a      	adds	r4, #10
 8008d24:	2509      	movs	r5, #9
 8008d26:	e7f6      	b.n	8008d16 <__s2b+0x66>
 8008d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	3b30      	subs	r3, #48	; 0x30
 8008d30:	220a      	movs	r2, #10
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7ff ff72 	bl	8008c1c <__multadd>
 8008d38:	e7ee      	b.n	8008d18 <__s2b+0x68>
 8008d3a:	bf00      	nop
 8008d3c:	0800ad34 	.word	0x0800ad34
 8008d40:	0800adc4 	.word	0x0800adc4

08008d44 <__hi0bits>:
 8008d44:	0c03      	lsrs	r3, r0, #16
 8008d46:	041b      	lsls	r3, r3, #16
 8008d48:	b9d3      	cbnz	r3, 8008d80 <__hi0bits+0x3c>
 8008d4a:	0400      	lsls	r0, r0, #16
 8008d4c:	2310      	movs	r3, #16
 8008d4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d52:	bf04      	itt	eq
 8008d54:	0200      	lsleq	r0, r0, #8
 8008d56:	3308      	addeq	r3, #8
 8008d58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d5c:	bf04      	itt	eq
 8008d5e:	0100      	lsleq	r0, r0, #4
 8008d60:	3304      	addeq	r3, #4
 8008d62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d66:	bf04      	itt	eq
 8008d68:	0080      	lsleq	r0, r0, #2
 8008d6a:	3302      	addeq	r3, #2
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	db05      	blt.n	8008d7c <__hi0bits+0x38>
 8008d70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d74:	f103 0301 	add.w	r3, r3, #1
 8008d78:	bf08      	it	eq
 8008d7a:	2320      	moveq	r3, #32
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	4770      	bx	lr
 8008d80:	2300      	movs	r3, #0
 8008d82:	e7e4      	b.n	8008d4e <__hi0bits+0xa>

08008d84 <__lo0bits>:
 8008d84:	6803      	ldr	r3, [r0, #0]
 8008d86:	f013 0207 	ands.w	r2, r3, #7
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	d00b      	beq.n	8008da6 <__lo0bits+0x22>
 8008d8e:	07da      	lsls	r2, r3, #31
 8008d90:	d424      	bmi.n	8008ddc <__lo0bits+0x58>
 8008d92:	0798      	lsls	r0, r3, #30
 8008d94:	bf49      	itett	mi
 8008d96:	085b      	lsrmi	r3, r3, #1
 8008d98:	089b      	lsrpl	r3, r3, #2
 8008d9a:	2001      	movmi	r0, #1
 8008d9c:	600b      	strmi	r3, [r1, #0]
 8008d9e:	bf5c      	itt	pl
 8008da0:	600b      	strpl	r3, [r1, #0]
 8008da2:	2002      	movpl	r0, #2
 8008da4:	4770      	bx	lr
 8008da6:	b298      	uxth	r0, r3
 8008da8:	b9b0      	cbnz	r0, 8008dd8 <__lo0bits+0x54>
 8008daa:	0c1b      	lsrs	r3, r3, #16
 8008dac:	2010      	movs	r0, #16
 8008dae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008db2:	bf04      	itt	eq
 8008db4:	0a1b      	lsreq	r3, r3, #8
 8008db6:	3008      	addeq	r0, #8
 8008db8:	071a      	lsls	r2, r3, #28
 8008dba:	bf04      	itt	eq
 8008dbc:	091b      	lsreq	r3, r3, #4
 8008dbe:	3004      	addeq	r0, #4
 8008dc0:	079a      	lsls	r2, r3, #30
 8008dc2:	bf04      	itt	eq
 8008dc4:	089b      	lsreq	r3, r3, #2
 8008dc6:	3002      	addeq	r0, #2
 8008dc8:	07da      	lsls	r2, r3, #31
 8008dca:	d403      	bmi.n	8008dd4 <__lo0bits+0x50>
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	f100 0001 	add.w	r0, r0, #1
 8008dd2:	d005      	beq.n	8008de0 <__lo0bits+0x5c>
 8008dd4:	600b      	str	r3, [r1, #0]
 8008dd6:	4770      	bx	lr
 8008dd8:	4610      	mov	r0, r2
 8008dda:	e7e8      	b.n	8008dae <__lo0bits+0x2a>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	4770      	bx	lr
 8008de0:	2020      	movs	r0, #32
 8008de2:	4770      	bx	lr

08008de4 <__i2b>:
 8008de4:	b510      	push	{r4, lr}
 8008de6:	460c      	mov	r4, r1
 8008de8:	2101      	movs	r1, #1
 8008dea:	f7ff feb5 	bl	8008b58 <_Balloc>
 8008dee:	4602      	mov	r2, r0
 8008df0:	b928      	cbnz	r0, 8008dfe <__i2b+0x1a>
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <__i2b+0x24>)
 8008df4:	4805      	ldr	r0, [pc, #20]	; (8008e0c <__i2b+0x28>)
 8008df6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008dfa:	f000 fdb5 	bl	8009968 <__assert_func>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	6144      	str	r4, [r0, #20]
 8008e02:	6103      	str	r3, [r0, #16]
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	bf00      	nop
 8008e08:	0800ad34 	.word	0x0800ad34
 8008e0c:	0800adc4 	.word	0x0800adc4

08008e10 <__multiply>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	4614      	mov	r4, r2
 8008e16:	690a      	ldr	r2, [r1, #16]
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	bfb8      	it	lt
 8008e1e:	460b      	movlt	r3, r1
 8008e20:	460d      	mov	r5, r1
 8008e22:	bfbc      	itt	lt
 8008e24:	4625      	movlt	r5, r4
 8008e26:	461c      	movlt	r4, r3
 8008e28:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008e2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e30:	68ab      	ldr	r3, [r5, #8]
 8008e32:	6869      	ldr	r1, [r5, #4]
 8008e34:	eb0a 0709 	add.w	r7, sl, r9
 8008e38:	42bb      	cmp	r3, r7
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	bfb8      	it	lt
 8008e3e:	3101      	addlt	r1, #1
 8008e40:	f7ff fe8a 	bl	8008b58 <_Balloc>
 8008e44:	b930      	cbnz	r0, 8008e54 <__multiply+0x44>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b42      	ldr	r3, [pc, #264]	; (8008f54 <__multiply+0x144>)
 8008e4a:	4843      	ldr	r0, [pc, #268]	; (8008f58 <__multiply+0x148>)
 8008e4c:	f240 115d 	movw	r1, #349	; 0x15d
 8008e50:	f000 fd8a 	bl	8009968 <__assert_func>
 8008e54:	f100 0614 	add.w	r6, r0, #20
 8008e58:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008e5c:	4633      	mov	r3, r6
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4543      	cmp	r3, r8
 8008e62:	d31e      	bcc.n	8008ea2 <__multiply+0x92>
 8008e64:	f105 0c14 	add.w	ip, r5, #20
 8008e68:	f104 0314 	add.w	r3, r4, #20
 8008e6c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e70:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e74:	9202      	str	r2, [sp, #8]
 8008e76:	ebac 0205 	sub.w	r2, ip, r5
 8008e7a:	3a15      	subs	r2, #21
 8008e7c:	f022 0203 	bic.w	r2, r2, #3
 8008e80:	3204      	adds	r2, #4
 8008e82:	f105 0115 	add.w	r1, r5, #21
 8008e86:	458c      	cmp	ip, r1
 8008e88:	bf38      	it	cc
 8008e8a:	2204      	movcc	r2, #4
 8008e8c:	9201      	str	r2, [sp, #4]
 8008e8e:	9a02      	ldr	r2, [sp, #8]
 8008e90:	9303      	str	r3, [sp, #12]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d808      	bhi.n	8008ea8 <__multiply+0x98>
 8008e96:	2f00      	cmp	r7, #0
 8008e98:	dc55      	bgt.n	8008f46 <__multiply+0x136>
 8008e9a:	6107      	str	r7, [r0, #16]
 8008e9c:	b005      	add	sp, #20
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	f843 2b04 	str.w	r2, [r3], #4
 8008ea6:	e7db      	b.n	8008e60 <__multiply+0x50>
 8008ea8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008eac:	f1ba 0f00 	cmp.w	sl, #0
 8008eb0:	d020      	beq.n	8008ef4 <__multiply+0xe4>
 8008eb2:	f105 0e14 	add.w	lr, r5, #20
 8008eb6:	46b1      	mov	r9, r6
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ebe:	f8d9 b000 	ldr.w	fp, [r9]
 8008ec2:	b2a1      	uxth	r1, r4
 8008ec4:	fa1f fb8b 	uxth.w	fp, fp
 8008ec8:	fb0a b101 	mla	r1, sl, r1, fp
 8008ecc:	4411      	add	r1, r2
 8008ece:	f8d9 2000 	ldr.w	r2, [r9]
 8008ed2:	0c24      	lsrs	r4, r4, #16
 8008ed4:	0c12      	lsrs	r2, r2, #16
 8008ed6:	fb0a 2404 	mla	r4, sl, r4, r2
 8008eda:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ede:	b289      	uxth	r1, r1
 8008ee0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ee4:	45f4      	cmp	ip, lr
 8008ee6:	f849 1b04 	str.w	r1, [r9], #4
 8008eea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008eee:	d8e4      	bhi.n	8008eba <__multiply+0xaa>
 8008ef0:	9901      	ldr	r1, [sp, #4]
 8008ef2:	5072      	str	r2, [r6, r1]
 8008ef4:	9a03      	ldr	r2, [sp, #12]
 8008ef6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008efa:	3304      	adds	r3, #4
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	d01f      	beq.n	8008f42 <__multiply+0x132>
 8008f02:	6834      	ldr	r4, [r6, #0]
 8008f04:	f105 0114 	add.w	r1, r5, #20
 8008f08:	46b6      	mov	lr, r6
 8008f0a:	f04f 0a00 	mov.w	sl, #0
 8008f0e:	880a      	ldrh	r2, [r1, #0]
 8008f10:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f14:	fb09 b202 	mla	r2, r9, r2, fp
 8008f18:	4492      	add	sl, r2
 8008f1a:	b2a4      	uxth	r4, r4
 8008f1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f20:	f84e 4b04 	str.w	r4, [lr], #4
 8008f24:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f28:	f8be 2000 	ldrh.w	r2, [lr]
 8008f2c:	0c24      	lsrs	r4, r4, #16
 8008f2e:	fb09 2404 	mla	r4, r9, r4, r2
 8008f32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008f36:	458c      	cmp	ip, r1
 8008f38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f3c:	d8e7      	bhi.n	8008f0e <__multiply+0xfe>
 8008f3e:	9a01      	ldr	r2, [sp, #4]
 8008f40:	50b4      	str	r4, [r6, r2]
 8008f42:	3604      	adds	r6, #4
 8008f44:	e7a3      	b.n	8008e8e <__multiply+0x7e>
 8008f46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1a5      	bne.n	8008e9a <__multiply+0x8a>
 8008f4e:	3f01      	subs	r7, #1
 8008f50:	e7a1      	b.n	8008e96 <__multiply+0x86>
 8008f52:	bf00      	nop
 8008f54:	0800ad34 	.word	0x0800ad34
 8008f58:	0800adc4 	.word	0x0800adc4

08008f5c <__pow5mult>:
 8008f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f60:	4615      	mov	r5, r2
 8008f62:	f012 0203 	ands.w	r2, r2, #3
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	d007      	beq.n	8008f7c <__pow5mult+0x20>
 8008f6c:	4c25      	ldr	r4, [pc, #148]	; (8009004 <__pow5mult+0xa8>)
 8008f6e:	3a01      	subs	r2, #1
 8008f70:	2300      	movs	r3, #0
 8008f72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f76:	f7ff fe51 	bl	8008c1c <__multadd>
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	10ad      	asrs	r5, r5, #2
 8008f7e:	d03d      	beq.n	8008ffc <__pow5mult+0xa0>
 8008f80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f82:	b97c      	cbnz	r4, 8008fa4 <__pow5mult+0x48>
 8008f84:	2010      	movs	r0, #16
 8008f86:	f7ff fdbf 	bl	8008b08 <malloc>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f8e:	b928      	cbnz	r0, 8008f9c <__pow5mult+0x40>
 8008f90:	4b1d      	ldr	r3, [pc, #116]	; (8009008 <__pow5mult+0xac>)
 8008f92:	481e      	ldr	r0, [pc, #120]	; (800900c <__pow5mult+0xb0>)
 8008f94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f98:	f000 fce6 	bl	8009968 <__assert_func>
 8008f9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fa0:	6004      	str	r4, [r0, #0]
 8008fa2:	60c4      	str	r4, [r0, #12]
 8008fa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fac:	b94c      	cbnz	r4, 8008fc2 <__pow5mult+0x66>
 8008fae:	f240 2171 	movw	r1, #625	; 0x271
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff ff16 	bl	8008de4 <__i2b>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	f04f 0900 	mov.w	r9, #0
 8008fc6:	07eb      	lsls	r3, r5, #31
 8008fc8:	d50a      	bpl.n	8008fe0 <__pow5mult+0x84>
 8008fca:	4639      	mov	r1, r7
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff ff1e 	bl	8008e10 <__multiply>
 8008fd4:	4639      	mov	r1, r7
 8008fd6:	4680      	mov	r8, r0
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff fdfd 	bl	8008bd8 <_Bfree>
 8008fde:	4647      	mov	r7, r8
 8008fe0:	106d      	asrs	r5, r5, #1
 8008fe2:	d00b      	beq.n	8008ffc <__pow5mult+0xa0>
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	b938      	cbnz	r0, 8008ff8 <__pow5mult+0x9c>
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4621      	mov	r1, r4
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7ff ff0f 	bl	8008e10 <__multiply>
 8008ff2:	6020      	str	r0, [r4, #0]
 8008ff4:	f8c0 9000 	str.w	r9, [r0]
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	e7e4      	b.n	8008fc6 <__pow5mult+0x6a>
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009002:	bf00      	nop
 8009004:	0800af18 	.word	0x0800af18
 8009008:	0800acbe 	.word	0x0800acbe
 800900c:	0800adc4 	.word	0x0800adc4

08009010 <__lshift>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	460c      	mov	r4, r1
 8009016:	6849      	ldr	r1, [r1, #4]
 8009018:	6923      	ldr	r3, [r4, #16]
 800901a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	4607      	mov	r7, r0
 8009022:	4691      	mov	r9, r2
 8009024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009028:	f108 0601 	add.w	r6, r8, #1
 800902c:	42b3      	cmp	r3, r6
 800902e:	db0b      	blt.n	8009048 <__lshift+0x38>
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff fd91 	bl	8008b58 <_Balloc>
 8009036:	4605      	mov	r5, r0
 8009038:	b948      	cbnz	r0, 800904e <__lshift+0x3e>
 800903a:	4602      	mov	r2, r0
 800903c:	4b28      	ldr	r3, [pc, #160]	; (80090e0 <__lshift+0xd0>)
 800903e:	4829      	ldr	r0, [pc, #164]	; (80090e4 <__lshift+0xd4>)
 8009040:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009044:	f000 fc90 	bl	8009968 <__assert_func>
 8009048:	3101      	adds	r1, #1
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	e7ee      	b.n	800902c <__lshift+0x1c>
 800904e:	2300      	movs	r3, #0
 8009050:	f100 0114 	add.w	r1, r0, #20
 8009054:	f100 0210 	add.w	r2, r0, #16
 8009058:	4618      	mov	r0, r3
 800905a:	4553      	cmp	r3, sl
 800905c:	db33      	blt.n	80090c6 <__lshift+0xb6>
 800905e:	6920      	ldr	r0, [r4, #16]
 8009060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009064:	f104 0314 	add.w	r3, r4, #20
 8009068:	f019 091f 	ands.w	r9, r9, #31
 800906c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009070:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009074:	d02b      	beq.n	80090ce <__lshift+0xbe>
 8009076:	f1c9 0e20 	rsb	lr, r9, #32
 800907a:	468a      	mov	sl, r1
 800907c:	2200      	movs	r2, #0
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	fa00 f009 	lsl.w	r0, r0, r9
 8009084:	4302      	orrs	r2, r0
 8009086:	f84a 2b04 	str.w	r2, [sl], #4
 800908a:	f853 2b04 	ldr.w	r2, [r3], #4
 800908e:	459c      	cmp	ip, r3
 8009090:	fa22 f20e 	lsr.w	r2, r2, lr
 8009094:	d8f3      	bhi.n	800907e <__lshift+0x6e>
 8009096:	ebac 0304 	sub.w	r3, ip, r4
 800909a:	3b15      	subs	r3, #21
 800909c:	f023 0303 	bic.w	r3, r3, #3
 80090a0:	3304      	adds	r3, #4
 80090a2:	f104 0015 	add.w	r0, r4, #21
 80090a6:	4584      	cmp	ip, r0
 80090a8:	bf38      	it	cc
 80090aa:	2304      	movcc	r3, #4
 80090ac:	50ca      	str	r2, [r1, r3]
 80090ae:	b10a      	cbz	r2, 80090b4 <__lshift+0xa4>
 80090b0:	f108 0602 	add.w	r6, r8, #2
 80090b4:	3e01      	subs	r6, #1
 80090b6:	4638      	mov	r0, r7
 80090b8:	612e      	str	r6, [r5, #16]
 80090ba:	4621      	mov	r1, r4
 80090bc:	f7ff fd8c 	bl	8008bd8 <_Bfree>
 80090c0:	4628      	mov	r0, r5
 80090c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ca:	3301      	adds	r3, #1
 80090cc:	e7c5      	b.n	800905a <__lshift+0x4a>
 80090ce:	3904      	subs	r1, #4
 80090d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80090d8:	459c      	cmp	ip, r3
 80090da:	d8f9      	bhi.n	80090d0 <__lshift+0xc0>
 80090dc:	e7ea      	b.n	80090b4 <__lshift+0xa4>
 80090de:	bf00      	nop
 80090e0:	0800ad34 	.word	0x0800ad34
 80090e4:	0800adc4 	.word	0x0800adc4

080090e8 <__mcmp>:
 80090e8:	b530      	push	{r4, r5, lr}
 80090ea:	6902      	ldr	r2, [r0, #16]
 80090ec:	690c      	ldr	r4, [r1, #16]
 80090ee:	1b12      	subs	r2, r2, r4
 80090f0:	d10e      	bne.n	8009110 <__mcmp+0x28>
 80090f2:	f100 0314 	add.w	r3, r0, #20
 80090f6:	3114      	adds	r1, #20
 80090f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009100:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009104:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009108:	42a5      	cmp	r5, r4
 800910a:	d003      	beq.n	8009114 <__mcmp+0x2c>
 800910c:	d305      	bcc.n	800911a <__mcmp+0x32>
 800910e:	2201      	movs	r2, #1
 8009110:	4610      	mov	r0, r2
 8009112:	bd30      	pop	{r4, r5, pc}
 8009114:	4283      	cmp	r3, r0
 8009116:	d3f3      	bcc.n	8009100 <__mcmp+0x18>
 8009118:	e7fa      	b.n	8009110 <__mcmp+0x28>
 800911a:	f04f 32ff 	mov.w	r2, #4294967295
 800911e:	e7f7      	b.n	8009110 <__mcmp+0x28>

08009120 <__mdiff>:
 8009120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	4606      	mov	r6, r0
 8009128:	4611      	mov	r1, r2
 800912a:	4620      	mov	r0, r4
 800912c:	4617      	mov	r7, r2
 800912e:	f7ff ffdb 	bl	80090e8 <__mcmp>
 8009132:	1e05      	subs	r5, r0, #0
 8009134:	d110      	bne.n	8009158 <__mdiff+0x38>
 8009136:	4629      	mov	r1, r5
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff fd0d 	bl	8008b58 <_Balloc>
 800913e:	b930      	cbnz	r0, 800914e <__mdiff+0x2e>
 8009140:	4b39      	ldr	r3, [pc, #228]	; (8009228 <__mdiff+0x108>)
 8009142:	4602      	mov	r2, r0
 8009144:	f240 2132 	movw	r1, #562	; 0x232
 8009148:	4838      	ldr	r0, [pc, #224]	; (800922c <__mdiff+0x10c>)
 800914a:	f000 fc0d 	bl	8009968 <__assert_func>
 800914e:	2301      	movs	r3, #1
 8009150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009158:	bfa4      	itt	ge
 800915a:	463b      	movge	r3, r7
 800915c:	4627      	movge	r7, r4
 800915e:	4630      	mov	r0, r6
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	bfa6      	itte	ge
 8009164:	461c      	movge	r4, r3
 8009166:	2500      	movge	r5, #0
 8009168:	2501      	movlt	r5, #1
 800916a:	f7ff fcf5 	bl	8008b58 <_Balloc>
 800916e:	b920      	cbnz	r0, 800917a <__mdiff+0x5a>
 8009170:	4b2d      	ldr	r3, [pc, #180]	; (8009228 <__mdiff+0x108>)
 8009172:	4602      	mov	r2, r0
 8009174:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009178:	e7e6      	b.n	8009148 <__mdiff+0x28>
 800917a:	693e      	ldr	r6, [r7, #16]
 800917c:	60c5      	str	r5, [r0, #12]
 800917e:	6925      	ldr	r5, [r4, #16]
 8009180:	f107 0114 	add.w	r1, r7, #20
 8009184:	f104 0914 	add.w	r9, r4, #20
 8009188:	f100 0e14 	add.w	lr, r0, #20
 800918c:	f107 0210 	add.w	r2, r7, #16
 8009190:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009194:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009198:	46f2      	mov	sl, lr
 800919a:	2700      	movs	r7, #0
 800919c:	f859 3b04 	ldr.w	r3, [r9], #4
 80091a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091a4:	fa1f f883 	uxth.w	r8, r3
 80091a8:	fa17 f78b 	uxtah	r7, r7, fp
 80091ac:	0c1b      	lsrs	r3, r3, #16
 80091ae:	eba7 0808 	sub.w	r8, r7, r8
 80091b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091ba:	fa1f f888 	uxth.w	r8, r8
 80091be:	141f      	asrs	r7, r3, #16
 80091c0:	454d      	cmp	r5, r9
 80091c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091c6:	f84a 3b04 	str.w	r3, [sl], #4
 80091ca:	d8e7      	bhi.n	800919c <__mdiff+0x7c>
 80091cc:	1b2b      	subs	r3, r5, r4
 80091ce:	3b15      	subs	r3, #21
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	3304      	adds	r3, #4
 80091d6:	3415      	adds	r4, #21
 80091d8:	42a5      	cmp	r5, r4
 80091da:	bf38      	it	cc
 80091dc:	2304      	movcc	r3, #4
 80091de:	4419      	add	r1, r3
 80091e0:	4473      	add	r3, lr
 80091e2:	469e      	mov	lr, r3
 80091e4:	460d      	mov	r5, r1
 80091e6:	4565      	cmp	r5, ip
 80091e8:	d30e      	bcc.n	8009208 <__mdiff+0xe8>
 80091ea:	f10c 0203 	add.w	r2, ip, #3
 80091ee:	1a52      	subs	r2, r2, r1
 80091f0:	f022 0203 	bic.w	r2, r2, #3
 80091f4:	3903      	subs	r1, #3
 80091f6:	458c      	cmp	ip, r1
 80091f8:	bf38      	it	cc
 80091fa:	2200      	movcc	r2, #0
 80091fc:	441a      	add	r2, r3
 80091fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009202:	b17b      	cbz	r3, 8009224 <__mdiff+0x104>
 8009204:	6106      	str	r6, [r0, #16]
 8009206:	e7a5      	b.n	8009154 <__mdiff+0x34>
 8009208:	f855 8b04 	ldr.w	r8, [r5], #4
 800920c:	fa17 f488 	uxtah	r4, r7, r8
 8009210:	1422      	asrs	r2, r4, #16
 8009212:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009216:	b2a4      	uxth	r4, r4
 8009218:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800921c:	f84e 4b04 	str.w	r4, [lr], #4
 8009220:	1417      	asrs	r7, r2, #16
 8009222:	e7e0      	b.n	80091e6 <__mdiff+0xc6>
 8009224:	3e01      	subs	r6, #1
 8009226:	e7ea      	b.n	80091fe <__mdiff+0xde>
 8009228:	0800ad34 	.word	0x0800ad34
 800922c:	0800adc4 	.word	0x0800adc4

08009230 <__ulp>:
 8009230:	b082      	sub	sp, #8
 8009232:	ed8d 0b00 	vstr	d0, [sp]
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	4912      	ldr	r1, [pc, #72]	; (8009284 <__ulp+0x54>)
 800923a:	4019      	ands	r1, r3
 800923c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009240:	2900      	cmp	r1, #0
 8009242:	dd05      	ble.n	8009250 <__ulp+0x20>
 8009244:	2200      	movs	r2, #0
 8009246:	460b      	mov	r3, r1
 8009248:	ec43 2b10 	vmov	d0, r2, r3
 800924c:	b002      	add	sp, #8
 800924e:	4770      	bx	lr
 8009250:	4249      	negs	r1, r1
 8009252:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009256:	ea4f 5021 	mov.w	r0, r1, asr #20
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	f04f 0300 	mov.w	r3, #0
 8009262:	da04      	bge.n	800926e <__ulp+0x3e>
 8009264:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009268:	fa41 f300 	asr.w	r3, r1, r0
 800926c:	e7ec      	b.n	8009248 <__ulp+0x18>
 800926e:	f1a0 0114 	sub.w	r1, r0, #20
 8009272:	291e      	cmp	r1, #30
 8009274:	bfda      	itte	le
 8009276:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800927a:	fa20 f101 	lsrle.w	r1, r0, r1
 800927e:	2101      	movgt	r1, #1
 8009280:	460a      	mov	r2, r1
 8009282:	e7e1      	b.n	8009248 <__ulp+0x18>
 8009284:	7ff00000 	.word	0x7ff00000

08009288 <__b2d>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	6905      	ldr	r5, [r0, #16]
 800928c:	f100 0714 	add.w	r7, r0, #20
 8009290:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009294:	1f2e      	subs	r6, r5, #4
 8009296:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800929a:	4620      	mov	r0, r4
 800929c:	f7ff fd52 	bl	8008d44 <__hi0bits>
 80092a0:	f1c0 0320 	rsb	r3, r0, #32
 80092a4:	280a      	cmp	r0, #10
 80092a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009324 <__b2d+0x9c>
 80092aa:	600b      	str	r3, [r1, #0]
 80092ac:	dc14      	bgt.n	80092d8 <__b2d+0x50>
 80092ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80092b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80092b6:	42b7      	cmp	r7, r6
 80092b8:	ea41 030c 	orr.w	r3, r1, ip
 80092bc:	bf34      	ite	cc
 80092be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092c2:	2100      	movcs	r1, #0
 80092c4:	3015      	adds	r0, #21
 80092c6:	fa04 f000 	lsl.w	r0, r4, r0
 80092ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80092ce:	ea40 0201 	orr.w	r2, r0, r1
 80092d2:	ec43 2b10 	vmov	d0, r2, r3
 80092d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d8:	42b7      	cmp	r7, r6
 80092da:	bf3a      	itte	cc
 80092dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80092e4:	2100      	movcs	r1, #0
 80092e6:	380b      	subs	r0, #11
 80092e8:	d017      	beq.n	800931a <__b2d+0x92>
 80092ea:	f1c0 0c20 	rsb	ip, r0, #32
 80092ee:	fa04 f500 	lsl.w	r5, r4, r0
 80092f2:	42be      	cmp	r6, r7
 80092f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80092f8:	ea45 0504 	orr.w	r5, r5, r4
 80092fc:	bf8c      	ite	hi
 80092fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009302:	2400      	movls	r4, #0
 8009304:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009308:	fa01 f000 	lsl.w	r0, r1, r0
 800930c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009310:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009314:	ea40 0204 	orr.w	r2, r0, r4
 8009318:	e7db      	b.n	80092d2 <__b2d+0x4a>
 800931a:	ea44 030c 	orr.w	r3, r4, ip
 800931e:	460a      	mov	r2, r1
 8009320:	e7d7      	b.n	80092d2 <__b2d+0x4a>
 8009322:	bf00      	nop
 8009324:	3ff00000 	.word	0x3ff00000

08009328 <__d2b>:
 8009328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800932c:	4689      	mov	r9, r1
 800932e:	2101      	movs	r1, #1
 8009330:	ec57 6b10 	vmov	r6, r7, d0
 8009334:	4690      	mov	r8, r2
 8009336:	f7ff fc0f 	bl	8008b58 <_Balloc>
 800933a:	4604      	mov	r4, r0
 800933c:	b930      	cbnz	r0, 800934c <__d2b+0x24>
 800933e:	4602      	mov	r2, r0
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <__d2b+0xb0>)
 8009342:	4826      	ldr	r0, [pc, #152]	; (80093dc <__d2b+0xb4>)
 8009344:	f240 310a 	movw	r1, #778	; 0x30a
 8009348:	f000 fb0e 	bl	8009968 <__assert_func>
 800934c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009354:	bb35      	cbnz	r5, 80093a4 <__d2b+0x7c>
 8009356:	2e00      	cmp	r6, #0
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	d028      	beq.n	80093ae <__d2b+0x86>
 800935c:	4668      	mov	r0, sp
 800935e:	9600      	str	r6, [sp, #0]
 8009360:	f7ff fd10 	bl	8008d84 <__lo0bits>
 8009364:	9900      	ldr	r1, [sp, #0]
 8009366:	b300      	cbz	r0, 80093aa <__d2b+0x82>
 8009368:	9a01      	ldr	r2, [sp, #4]
 800936a:	f1c0 0320 	rsb	r3, r0, #32
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	430b      	orrs	r3, r1
 8009374:	40c2      	lsrs	r2, r0
 8009376:	6163      	str	r3, [r4, #20]
 8009378:	9201      	str	r2, [sp, #4]
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	61a3      	str	r3, [r4, #24]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bf14      	ite	ne
 8009382:	2202      	movne	r2, #2
 8009384:	2201      	moveq	r2, #1
 8009386:	6122      	str	r2, [r4, #16]
 8009388:	b1d5      	cbz	r5, 80093c0 <__d2b+0x98>
 800938a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800938e:	4405      	add	r5, r0
 8009390:	f8c9 5000 	str.w	r5, [r9]
 8009394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009398:	f8c8 0000 	str.w	r0, [r8]
 800939c:	4620      	mov	r0, r4
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093a8:	e7d5      	b.n	8009356 <__d2b+0x2e>
 80093aa:	6161      	str	r1, [r4, #20]
 80093ac:	e7e5      	b.n	800937a <__d2b+0x52>
 80093ae:	a801      	add	r0, sp, #4
 80093b0:	f7ff fce8 	bl	8008d84 <__lo0bits>
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	6163      	str	r3, [r4, #20]
 80093b8:	2201      	movs	r2, #1
 80093ba:	6122      	str	r2, [r4, #16]
 80093bc:	3020      	adds	r0, #32
 80093be:	e7e3      	b.n	8009388 <__d2b+0x60>
 80093c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093c8:	f8c9 0000 	str.w	r0, [r9]
 80093cc:	6918      	ldr	r0, [r3, #16]
 80093ce:	f7ff fcb9 	bl	8008d44 <__hi0bits>
 80093d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093d6:	e7df      	b.n	8009398 <__d2b+0x70>
 80093d8:	0800ad34 	.word	0x0800ad34
 80093dc:	0800adc4 	.word	0x0800adc4

080093e0 <__ratio>:
 80093e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	4688      	mov	r8, r1
 80093e6:	4669      	mov	r1, sp
 80093e8:	4681      	mov	r9, r0
 80093ea:	f7ff ff4d 	bl	8009288 <__b2d>
 80093ee:	a901      	add	r1, sp, #4
 80093f0:	4640      	mov	r0, r8
 80093f2:	ec55 4b10 	vmov	r4, r5, d0
 80093f6:	f7ff ff47 	bl	8009288 <__b2d>
 80093fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009402:	eba3 0c02 	sub.w	ip, r3, r2
 8009406:	e9dd 3200 	ldrd	r3, r2, [sp]
 800940a:	1a9b      	subs	r3, r3, r2
 800940c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009410:	ec51 0b10 	vmov	r0, r1, d0
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfd6      	itet	le
 8009418:	460a      	movle	r2, r1
 800941a:	462a      	movgt	r2, r5
 800941c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009420:	468b      	mov	fp, r1
 8009422:	462f      	mov	r7, r5
 8009424:	bfd4      	ite	le
 8009426:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800942a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800942e:	4620      	mov	r0, r4
 8009430:	ee10 2a10 	vmov	r2, s0
 8009434:	465b      	mov	r3, fp
 8009436:	4639      	mov	r1, r7
 8009438:	f7f7 fa10 	bl	800085c <__aeabi_ddiv>
 800943c:	ec41 0b10 	vmov	d0, r0, r1
 8009440:	b003      	add	sp, #12
 8009442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009446 <__copybits>:
 8009446:	3901      	subs	r1, #1
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	1149      	asrs	r1, r1, #5
 800944c:	6914      	ldr	r4, [r2, #16]
 800944e:	3101      	adds	r1, #1
 8009450:	f102 0314 	add.w	r3, r2, #20
 8009454:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009458:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800945c:	1f05      	subs	r5, r0, #4
 800945e:	42a3      	cmp	r3, r4
 8009460:	d30c      	bcc.n	800947c <__copybits+0x36>
 8009462:	1aa3      	subs	r3, r4, r2
 8009464:	3b11      	subs	r3, #17
 8009466:	f023 0303 	bic.w	r3, r3, #3
 800946a:	3211      	adds	r2, #17
 800946c:	42a2      	cmp	r2, r4
 800946e:	bf88      	it	hi
 8009470:	2300      	movhi	r3, #0
 8009472:	4418      	add	r0, r3
 8009474:	2300      	movs	r3, #0
 8009476:	4288      	cmp	r0, r1
 8009478:	d305      	bcc.n	8009486 <__copybits+0x40>
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009480:	f845 6f04 	str.w	r6, [r5, #4]!
 8009484:	e7eb      	b.n	800945e <__copybits+0x18>
 8009486:	f840 3b04 	str.w	r3, [r0], #4
 800948a:	e7f4      	b.n	8009476 <__copybits+0x30>

0800948c <__any_on>:
 800948c:	f100 0214 	add.w	r2, r0, #20
 8009490:	6900      	ldr	r0, [r0, #16]
 8009492:	114b      	asrs	r3, r1, #5
 8009494:	4298      	cmp	r0, r3
 8009496:	b510      	push	{r4, lr}
 8009498:	db11      	blt.n	80094be <__any_on+0x32>
 800949a:	dd0a      	ble.n	80094b2 <__any_on+0x26>
 800949c:	f011 011f 	ands.w	r1, r1, #31
 80094a0:	d007      	beq.n	80094b2 <__any_on+0x26>
 80094a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094a6:	fa24 f001 	lsr.w	r0, r4, r1
 80094aa:	fa00 f101 	lsl.w	r1, r0, r1
 80094ae:	428c      	cmp	r4, r1
 80094b0:	d10b      	bne.n	80094ca <__any_on+0x3e>
 80094b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d803      	bhi.n	80094c2 <__any_on+0x36>
 80094ba:	2000      	movs	r0, #0
 80094bc:	bd10      	pop	{r4, pc}
 80094be:	4603      	mov	r3, r0
 80094c0:	e7f7      	b.n	80094b2 <__any_on+0x26>
 80094c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094c6:	2900      	cmp	r1, #0
 80094c8:	d0f5      	beq.n	80094b6 <__any_on+0x2a>
 80094ca:	2001      	movs	r0, #1
 80094cc:	e7f6      	b.n	80094bc <__any_on+0x30>

080094ce <_calloc_r>:
 80094ce:	b513      	push	{r0, r1, r4, lr}
 80094d0:	434a      	muls	r2, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	9201      	str	r2, [sp, #4]
 80094d6:	f000 f859 	bl	800958c <_malloc_r>
 80094da:	4604      	mov	r4, r0
 80094dc:	b118      	cbz	r0, 80094e6 <_calloc_r+0x18>
 80094de:	9a01      	ldr	r2, [sp, #4]
 80094e0:	2100      	movs	r1, #0
 80094e2:	f7fc fbc7 	bl	8005c74 <memset>
 80094e6:	4620      	mov	r0, r4
 80094e8:	b002      	add	sp, #8
 80094ea:	bd10      	pop	{r4, pc}

080094ec <_free_r>:
 80094ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d048      	beq.n	8009584 <_free_r+0x98>
 80094f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f6:	9001      	str	r0, [sp, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f1a1 0404 	sub.w	r4, r1, #4
 80094fe:	bfb8      	it	lt
 8009500:	18e4      	addlt	r4, r4, r3
 8009502:	f000 fa7b 	bl	80099fc <__malloc_lock>
 8009506:	4a20      	ldr	r2, [pc, #128]	; (8009588 <_free_r+0x9c>)
 8009508:	9801      	ldr	r0, [sp, #4]
 800950a:	6813      	ldr	r3, [r2, #0]
 800950c:	4615      	mov	r5, r2
 800950e:	b933      	cbnz	r3, 800951e <_free_r+0x32>
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	6014      	str	r4, [r2, #0]
 8009514:	b003      	add	sp, #12
 8009516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800951a:	f000 ba75 	b.w	8009a08 <__malloc_unlock>
 800951e:	42a3      	cmp	r3, r4
 8009520:	d90b      	bls.n	800953a <_free_r+0x4e>
 8009522:	6821      	ldr	r1, [r4, #0]
 8009524:	1862      	adds	r2, r4, r1
 8009526:	4293      	cmp	r3, r2
 8009528:	bf04      	itt	eq
 800952a:	681a      	ldreq	r2, [r3, #0]
 800952c:	685b      	ldreq	r3, [r3, #4]
 800952e:	6063      	str	r3, [r4, #4]
 8009530:	bf04      	itt	eq
 8009532:	1852      	addeq	r2, r2, r1
 8009534:	6022      	streq	r2, [r4, #0]
 8009536:	602c      	str	r4, [r5, #0]
 8009538:	e7ec      	b.n	8009514 <_free_r+0x28>
 800953a:	461a      	mov	r2, r3
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	b10b      	cbz	r3, 8009544 <_free_r+0x58>
 8009540:	42a3      	cmp	r3, r4
 8009542:	d9fa      	bls.n	800953a <_free_r+0x4e>
 8009544:	6811      	ldr	r1, [r2, #0]
 8009546:	1855      	adds	r5, r2, r1
 8009548:	42a5      	cmp	r5, r4
 800954a:	d10b      	bne.n	8009564 <_free_r+0x78>
 800954c:	6824      	ldr	r4, [r4, #0]
 800954e:	4421      	add	r1, r4
 8009550:	1854      	adds	r4, r2, r1
 8009552:	42a3      	cmp	r3, r4
 8009554:	6011      	str	r1, [r2, #0]
 8009556:	d1dd      	bne.n	8009514 <_free_r+0x28>
 8009558:	681c      	ldr	r4, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	6053      	str	r3, [r2, #4]
 800955e:	4421      	add	r1, r4
 8009560:	6011      	str	r1, [r2, #0]
 8009562:	e7d7      	b.n	8009514 <_free_r+0x28>
 8009564:	d902      	bls.n	800956c <_free_r+0x80>
 8009566:	230c      	movs	r3, #12
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	e7d3      	b.n	8009514 <_free_r+0x28>
 800956c:	6825      	ldr	r5, [r4, #0]
 800956e:	1961      	adds	r1, r4, r5
 8009570:	428b      	cmp	r3, r1
 8009572:	bf04      	itt	eq
 8009574:	6819      	ldreq	r1, [r3, #0]
 8009576:	685b      	ldreq	r3, [r3, #4]
 8009578:	6063      	str	r3, [r4, #4]
 800957a:	bf04      	itt	eq
 800957c:	1949      	addeq	r1, r1, r5
 800957e:	6021      	streq	r1, [r4, #0]
 8009580:	6054      	str	r4, [r2, #4]
 8009582:	e7c7      	b.n	8009514 <_free_r+0x28>
 8009584:	b003      	add	sp, #12
 8009586:	bd30      	pop	{r4, r5, pc}
 8009588:	20000690 	.word	0x20000690

0800958c <_malloc_r>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	1ccd      	adds	r5, r1, #3
 8009590:	f025 0503 	bic.w	r5, r5, #3
 8009594:	3508      	adds	r5, #8
 8009596:	2d0c      	cmp	r5, #12
 8009598:	bf38      	it	cc
 800959a:	250c      	movcc	r5, #12
 800959c:	2d00      	cmp	r5, #0
 800959e:	4606      	mov	r6, r0
 80095a0:	db01      	blt.n	80095a6 <_malloc_r+0x1a>
 80095a2:	42a9      	cmp	r1, r5
 80095a4:	d903      	bls.n	80095ae <_malloc_r+0x22>
 80095a6:	230c      	movs	r3, #12
 80095a8:	6033      	str	r3, [r6, #0]
 80095aa:	2000      	movs	r0, #0
 80095ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ae:	f000 fa25 	bl	80099fc <__malloc_lock>
 80095b2:	4921      	ldr	r1, [pc, #132]	; (8009638 <_malloc_r+0xac>)
 80095b4:	680a      	ldr	r2, [r1, #0]
 80095b6:	4614      	mov	r4, r2
 80095b8:	b99c      	cbnz	r4, 80095e2 <_malloc_r+0x56>
 80095ba:	4f20      	ldr	r7, [pc, #128]	; (800963c <_malloc_r+0xb0>)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	b923      	cbnz	r3, 80095ca <_malloc_r+0x3e>
 80095c0:	4621      	mov	r1, r4
 80095c2:	4630      	mov	r0, r6
 80095c4:	f000 f9a0 	bl	8009908 <_sbrk_r>
 80095c8:	6038      	str	r0, [r7, #0]
 80095ca:	4629      	mov	r1, r5
 80095cc:	4630      	mov	r0, r6
 80095ce:	f000 f99b 	bl	8009908 <_sbrk_r>
 80095d2:	1c43      	adds	r3, r0, #1
 80095d4:	d123      	bne.n	800961e <_malloc_r+0x92>
 80095d6:	230c      	movs	r3, #12
 80095d8:	6033      	str	r3, [r6, #0]
 80095da:	4630      	mov	r0, r6
 80095dc:	f000 fa14 	bl	8009a08 <__malloc_unlock>
 80095e0:	e7e3      	b.n	80095aa <_malloc_r+0x1e>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	1b5b      	subs	r3, r3, r5
 80095e6:	d417      	bmi.n	8009618 <_malloc_r+0x8c>
 80095e8:	2b0b      	cmp	r3, #11
 80095ea:	d903      	bls.n	80095f4 <_malloc_r+0x68>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	441c      	add	r4, r3
 80095f0:	6025      	str	r5, [r4, #0]
 80095f2:	e004      	b.n	80095fe <_malloc_r+0x72>
 80095f4:	6863      	ldr	r3, [r4, #4]
 80095f6:	42a2      	cmp	r2, r4
 80095f8:	bf0c      	ite	eq
 80095fa:	600b      	streq	r3, [r1, #0]
 80095fc:	6053      	strne	r3, [r2, #4]
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 fa02 	bl	8009a08 <__malloc_unlock>
 8009604:	f104 000b 	add.w	r0, r4, #11
 8009608:	1d23      	adds	r3, r4, #4
 800960a:	f020 0007 	bic.w	r0, r0, #7
 800960e:	1ac2      	subs	r2, r0, r3
 8009610:	d0cc      	beq.n	80095ac <_malloc_r+0x20>
 8009612:	1a1b      	subs	r3, r3, r0
 8009614:	50a3      	str	r3, [r4, r2]
 8009616:	e7c9      	b.n	80095ac <_malloc_r+0x20>
 8009618:	4622      	mov	r2, r4
 800961a:	6864      	ldr	r4, [r4, #4]
 800961c:	e7cc      	b.n	80095b8 <_malloc_r+0x2c>
 800961e:	1cc4      	adds	r4, r0, #3
 8009620:	f024 0403 	bic.w	r4, r4, #3
 8009624:	42a0      	cmp	r0, r4
 8009626:	d0e3      	beq.n	80095f0 <_malloc_r+0x64>
 8009628:	1a21      	subs	r1, r4, r0
 800962a:	4630      	mov	r0, r6
 800962c:	f000 f96c 	bl	8009908 <_sbrk_r>
 8009630:	3001      	adds	r0, #1
 8009632:	d1dd      	bne.n	80095f0 <_malloc_r+0x64>
 8009634:	e7cf      	b.n	80095d6 <_malloc_r+0x4a>
 8009636:	bf00      	nop
 8009638:	20000690 	.word	0x20000690
 800963c:	20000694 	.word	0x20000694

08009640 <__ssputs_r>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	688e      	ldr	r6, [r1, #8]
 8009646:	429e      	cmp	r6, r3
 8009648:	4682      	mov	sl, r0
 800964a:	460c      	mov	r4, r1
 800964c:	4690      	mov	r8, r2
 800964e:	461f      	mov	r7, r3
 8009650:	d838      	bhi.n	80096c4 <__ssputs_r+0x84>
 8009652:	898a      	ldrh	r2, [r1, #12]
 8009654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009658:	d032      	beq.n	80096c0 <__ssputs_r+0x80>
 800965a:	6825      	ldr	r5, [r4, #0]
 800965c:	6909      	ldr	r1, [r1, #16]
 800965e:	eba5 0901 	sub.w	r9, r5, r1
 8009662:	6965      	ldr	r5, [r4, #20]
 8009664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966c:	3301      	adds	r3, #1
 800966e:	444b      	add	r3, r9
 8009670:	106d      	asrs	r5, r5, #1
 8009672:	429d      	cmp	r5, r3
 8009674:	bf38      	it	cc
 8009676:	461d      	movcc	r5, r3
 8009678:	0553      	lsls	r3, r2, #21
 800967a:	d531      	bpl.n	80096e0 <__ssputs_r+0xa0>
 800967c:	4629      	mov	r1, r5
 800967e:	f7ff ff85 	bl	800958c <_malloc_r>
 8009682:	4606      	mov	r6, r0
 8009684:	b950      	cbnz	r0, 800969c <__ssputs_r+0x5c>
 8009686:	230c      	movs	r3, #12
 8009688:	f8ca 3000 	str.w	r3, [sl]
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969c:	6921      	ldr	r1, [r4, #16]
 800969e:	464a      	mov	r2, r9
 80096a0:	f7ff fa4c 	bl	8008b3c <memcpy>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	6126      	str	r6, [r4, #16]
 80096b2:	6165      	str	r5, [r4, #20]
 80096b4:	444e      	add	r6, r9
 80096b6:	eba5 0509 	sub.w	r5, r5, r9
 80096ba:	6026      	str	r6, [r4, #0]
 80096bc:	60a5      	str	r5, [r4, #8]
 80096be:	463e      	mov	r6, r7
 80096c0:	42be      	cmp	r6, r7
 80096c2:	d900      	bls.n	80096c6 <__ssputs_r+0x86>
 80096c4:	463e      	mov	r6, r7
 80096c6:	4632      	mov	r2, r6
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	4641      	mov	r1, r8
 80096cc:	f000 f97c 	bl	80099c8 <memmove>
 80096d0:	68a3      	ldr	r3, [r4, #8]
 80096d2:	6822      	ldr	r2, [r4, #0]
 80096d4:	1b9b      	subs	r3, r3, r6
 80096d6:	4432      	add	r2, r6
 80096d8:	60a3      	str	r3, [r4, #8]
 80096da:	6022      	str	r2, [r4, #0]
 80096dc:	2000      	movs	r0, #0
 80096de:	e7db      	b.n	8009698 <__ssputs_r+0x58>
 80096e0:	462a      	mov	r2, r5
 80096e2:	f000 f997 	bl	8009a14 <_realloc_r>
 80096e6:	4606      	mov	r6, r0
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d1e1      	bne.n	80096b0 <__ssputs_r+0x70>
 80096ec:	6921      	ldr	r1, [r4, #16]
 80096ee:	4650      	mov	r0, sl
 80096f0:	f7ff fefc 	bl	80094ec <_free_r>
 80096f4:	e7c7      	b.n	8009686 <__ssputs_r+0x46>
	...

080096f8 <_svfiprintf_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	4698      	mov	r8, r3
 80096fe:	898b      	ldrh	r3, [r1, #12]
 8009700:	061b      	lsls	r3, r3, #24
 8009702:	b09d      	sub	sp, #116	; 0x74
 8009704:	4607      	mov	r7, r0
 8009706:	460d      	mov	r5, r1
 8009708:	4614      	mov	r4, r2
 800970a:	d50e      	bpl.n	800972a <_svfiprintf_r+0x32>
 800970c:	690b      	ldr	r3, [r1, #16]
 800970e:	b963      	cbnz	r3, 800972a <_svfiprintf_r+0x32>
 8009710:	2140      	movs	r1, #64	; 0x40
 8009712:	f7ff ff3b 	bl	800958c <_malloc_r>
 8009716:	6028      	str	r0, [r5, #0]
 8009718:	6128      	str	r0, [r5, #16]
 800971a:	b920      	cbnz	r0, 8009726 <_svfiprintf_r+0x2e>
 800971c:	230c      	movs	r3, #12
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	e0d1      	b.n	80098ca <_svfiprintf_r+0x1d2>
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	616b      	str	r3, [r5, #20]
 800972a:	2300      	movs	r3, #0
 800972c:	9309      	str	r3, [sp, #36]	; 0x24
 800972e:	2320      	movs	r3, #32
 8009730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009734:	f8cd 800c 	str.w	r8, [sp, #12]
 8009738:	2330      	movs	r3, #48	; 0x30
 800973a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098e4 <_svfiprintf_r+0x1ec>
 800973e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009742:	f04f 0901 	mov.w	r9, #1
 8009746:	4623      	mov	r3, r4
 8009748:	469a      	mov	sl, r3
 800974a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974e:	b10a      	cbz	r2, 8009754 <_svfiprintf_r+0x5c>
 8009750:	2a25      	cmp	r2, #37	; 0x25
 8009752:	d1f9      	bne.n	8009748 <_svfiprintf_r+0x50>
 8009754:	ebba 0b04 	subs.w	fp, sl, r4
 8009758:	d00b      	beq.n	8009772 <_svfiprintf_r+0x7a>
 800975a:	465b      	mov	r3, fp
 800975c:	4622      	mov	r2, r4
 800975e:	4629      	mov	r1, r5
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ff6d 	bl	8009640 <__ssputs_r>
 8009766:	3001      	adds	r0, #1
 8009768:	f000 80aa 	beq.w	80098c0 <_svfiprintf_r+0x1c8>
 800976c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976e:	445a      	add	r2, fp
 8009770:	9209      	str	r2, [sp, #36]	; 0x24
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 80a2 	beq.w	80098c0 <_svfiprintf_r+0x1c8>
 800977c:	2300      	movs	r3, #0
 800977e:	f04f 32ff 	mov.w	r2, #4294967295
 8009782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009786:	f10a 0a01 	add.w	sl, sl, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	9307      	str	r3, [sp, #28]
 800978e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009792:	931a      	str	r3, [sp, #104]	; 0x68
 8009794:	4654      	mov	r4, sl
 8009796:	2205      	movs	r2, #5
 8009798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979c:	4851      	ldr	r0, [pc, #324]	; (80098e4 <_svfiprintf_r+0x1ec>)
 800979e:	f7f6 fd27 	bl	80001f0 <memchr>
 80097a2:	9a04      	ldr	r2, [sp, #16]
 80097a4:	b9d8      	cbnz	r0, 80097de <_svfiprintf_r+0xe6>
 80097a6:	06d0      	lsls	r0, r2, #27
 80097a8:	bf44      	itt	mi
 80097aa:	2320      	movmi	r3, #32
 80097ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b0:	0711      	lsls	r1, r2, #28
 80097b2:	bf44      	itt	mi
 80097b4:	232b      	movmi	r3, #43	; 0x2b
 80097b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ba:	f89a 3000 	ldrb.w	r3, [sl]
 80097be:	2b2a      	cmp	r3, #42	; 0x2a
 80097c0:	d015      	beq.n	80097ee <_svfiprintf_r+0xf6>
 80097c2:	9a07      	ldr	r2, [sp, #28]
 80097c4:	4654      	mov	r4, sl
 80097c6:	2000      	movs	r0, #0
 80097c8:	f04f 0c0a 	mov.w	ip, #10
 80097cc:	4621      	mov	r1, r4
 80097ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d2:	3b30      	subs	r3, #48	; 0x30
 80097d4:	2b09      	cmp	r3, #9
 80097d6:	d94e      	bls.n	8009876 <_svfiprintf_r+0x17e>
 80097d8:	b1b0      	cbz	r0, 8009808 <_svfiprintf_r+0x110>
 80097da:	9207      	str	r2, [sp, #28]
 80097dc:	e014      	b.n	8009808 <_svfiprintf_r+0x110>
 80097de:	eba0 0308 	sub.w	r3, r0, r8
 80097e2:	fa09 f303 	lsl.w	r3, r9, r3
 80097e6:	4313      	orrs	r3, r2
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	46a2      	mov	sl, r4
 80097ec:	e7d2      	b.n	8009794 <_svfiprintf_r+0x9c>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	1d19      	adds	r1, r3, #4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	9103      	str	r1, [sp, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbb      	ittet	lt
 80097fa:	425b      	neglt	r3, r3
 80097fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009800:	9307      	strge	r3, [sp, #28]
 8009802:	9307      	strlt	r3, [sp, #28]
 8009804:	bfb8      	it	lt
 8009806:	9204      	strlt	r2, [sp, #16]
 8009808:	7823      	ldrb	r3, [r4, #0]
 800980a:	2b2e      	cmp	r3, #46	; 0x2e
 800980c:	d10c      	bne.n	8009828 <_svfiprintf_r+0x130>
 800980e:	7863      	ldrb	r3, [r4, #1]
 8009810:	2b2a      	cmp	r3, #42	; 0x2a
 8009812:	d135      	bne.n	8009880 <_svfiprintf_r+0x188>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	1d1a      	adds	r2, r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	9203      	str	r2, [sp, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfb8      	it	lt
 8009820:	f04f 33ff 	movlt.w	r3, #4294967295
 8009824:	3402      	adds	r4, #2
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098f4 <_svfiprintf_r+0x1fc>
 800982c:	7821      	ldrb	r1, [r4, #0]
 800982e:	2203      	movs	r2, #3
 8009830:	4650      	mov	r0, sl
 8009832:	f7f6 fcdd 	bl	80001f0 <memchr>
 8009836:	b140      	cbz	r0, 800984a <_svfiprintf_r+0x152>
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	eba0 000a 	sub.w	r0, r0, sl
 800983e:	fa03 f000 	lsl.w	r0, r3, r0
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	4303      	orrs	r3, r0
 8009846:	3401      	adds	r4, #1
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984e:	4826      	ldr	r0, [pc, #152]	; (80098e8 <_svfiprintf_r+0x1f0>)
 8009850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009854:	2206      	movs	r2, #6
 8009856:	f7f6 fccb 	bl	80001f0 <memchr>
 800985a:	2800      	cmp	r0, #0
 800985c:	d038      	beq.n	80098d0 <_svfiprintf_r+0x1d8>
 800985e:	4b23      	ldr	r3, [pc, #140]	; (80098ec <_svfiprintf_r+0x1f4>)
 8009860:	bb1b      	cbnz	r3, 80098aa <_svfiprintf_r+0x1b2>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	3307      	adds	r3, #7
 8009866:	f023 0307 	bic.w	r3, r3, #7
 800986a:	3308      	adds	r3, #8
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009870:	4433      	add	r3, r6
 8009872:	9309      	str	r3, [sp, #36]	; 0x24
 8009874:	e767      	b.n	8009746 <_svfiprintf_r+0x4e>
 8009876:	fb0c 3202 	mla	r2, ip, r2, r3
 800987a:	460c      	mov	r4, r1
 800987c:	2001      	movs	r0, #1
 800987e:	e7a5      	b.n	80097cc <_svfiprintf_r+0xd4>
 8009880:	2300      	movs	r3, #0
 8009882:	3401      	adds	r4, #1
 8009884:	9305      	str	r3, [sp, #20]
 8009886:	4619      	mov	r1, r3
 8009888:	f04f 0c0a 	mov.w	ip, #10
 800988c:	4620      	mov	r0, r4
 800988e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009892:	3a30      	subs	r2, #48	; 0x30
 8009894:	2a09      	cmp	r2, #9
 8009896:	d903      	bls.n	80098a0 <_svfiprintf_r+0x1a8>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0c5      	beq.n	8009828 <_svfiprintf_r+0x130>
 800989c:	9105      	str	r1, [sp, #20]
 800989e:	e7c3      	b.n	8009828 <_svfiprintf_r+0x130>
 80098a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a4:	4604      	mov	r4, r0
 80098a6:	2301      	movs	r3, #1
 80098a8:	e7f0      	b.n	800988c <_svfiprintf_r+0x194>
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4b0f      	ldr	r3, [pc, #60]	; (80098f0 <_svfiprintf_r+0x1f8>)
 80098b2:	a904      	add	r1, sp, #16
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7fc fa85 	bl	8005dc4 <_printf_float>
 80098ba:	1c42      	adds	r2, r0, #1
 80098bc:	4606      	mov	r6, r0
 80098be:	d1d6      	bne.n	800986e <_svfiprintf_r+0x176>
 80098c0:	89ab      	ldrh	r3, [r5, #12]
 80098c2:	065b      	lsls	r3, r3, #25
 80098c4:	f53f af2c 	bmi.w	8009720 <_svfiprintf_r+0x28>
 80098c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ca:	b01d      	add	sp, #116	; 0x74
 80098cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	ab03      	add	r3, sp, #12
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	462a      	mov	r2, r5
 80098d6:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <_svfiprintf_r+0x1f8>)
 80098d8:	a904      	add	r1, sp, #16
 80098da:	4638      	mov	r0, r7
 80098dc:	f7fc fd16 	bl	800630c <_printf_i>
 80098e0:	e7eb      	b.n	80098ba <_svfiprintf_r+0x1c2>
 80098e2:	bf00      	nop
 80098e4:	0800af24 	.word	0x0800af24
 80098e8:	0800af2e 	.word	0x0800af2e
 80098ec:	08005dc5 	.word	0x08005dc5
 80098f0:	08009641 	.word	0x08009641
 80098f4:	0800af2a 	.word	0x0800af2a

080098f8 <nan>:
 80098f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009900 <nan+0x8>
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	00000000 	.word	0x00000000
 8009904:	7ff80000 	.word	0x7ff80000

08009908 <_sbrk_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d06      	ldr	r5, [pc, #24]	; (8009924 <_sbrk_r+0x1c>)
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	4608      	mov	r0, r1
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	f7f8 fd46 	bl	80023a4 <_sbrk>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_sbrk_r+0x1a>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_sbrk_r+0x1a>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	200007d4 	.word	0x200007d4

08009928 <strncmp>:
 8009928:	b510      	push	{r4, lr}
 800992a:	b16a      	cbz	r2, 8009948 <strncmp+0x20>
 800992c:	3901      	subs	r1, #1
 800992e:	1884      	adds	r4, r0, r2
 8009930:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009934:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009938:	4293      	cmp	r3, r2
 800993a:	d103      	bne.n	8009944 <strncmp+0x1c>
 800993c:	42a0      	cmp	r0, r4
 800993e:	d001      	beq.n	8009944 <strncmp+0x1c>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1f5      	bne.n	8009930 <strncmp+0x8>
 8009944:	1a98      	subs	r0, r3, r2
 8009946:	bd10      	pop	{r4, pc}
 8009948:	4610      	mov	r0, r2
 800994a:	e7fc      	b.n	8009946 <strncmp+0x1e>

0800994c <__ascii_wctomb>:
 800994c:	b149      	cbz	r1, 8009962 <__ascii_wctomb+0x16>
 800994e:	2aff      	cmp	r2, #255	; 0xff
 8009950:	bf85      	ittet	hi
 8009952:	238a      	movhi	r3, #138	; 0x8a
 8009954:	6003      	strhi	r3, [r0, #0]
 8009956:	700a      	strbls	r2, [r1, #0]
 8009958:	f04f 30ff 	movhi.w	r0, #4294967295
 800995c:	bf98      	it	ls
 800995e:	2001      	movls	r0, #1
 8009960:	4770      	bx	lr
 8009962:	4608      	mov	r0, r1
 8009964:	4770      	bx	lr
	...

08009968 <__assert_func>:
 8009968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800996a:	4614      	mov	r4, r2
 800996c:	461a      	mov	r2, r3
 800996e:	4b09      	ldr	r3, [pc, #36]	; (8009994 <__assert_func+0x2c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4605      	mov	r5, r0
 8009974:	68d8      	ldr	r0, [r3, #12]
 8009976:	b14c      	cbz	r4, 800998c <__assert_func+0x24>
 8009978:	4b07      	ldr	r3, [pc, #28]	; (8009998 <__assert_func+0x30>)
 800997a:	9100      	str	r1, [sp, #0]
 800997c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009980:	4906      	ldr	r1, [pc, #24]	; (800999c <__assert_func+0x34>)
 8009982:	462b      	mov	r3, r5
 8009984:	f000 f80e 	bl	80099a4 <fiprintf>
 8009988:	f000 fa84 	bl	8009e94 <abort>
 800998c:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <__assert_func+0x38>)
 800998e:	461c      	mov	r4, r3
 8009990:	e7f3      	b.n	800997a <__assert_func+0x12>
 8009992:	bf00      	nop
 8009994:	20000010 	.word	0x20000010
 8009998:	0800af35 	.word	0x0800af35
 800999c:	0800af42 	.word	0x0800af42
 80099a0:	0800af70 	.word	0x0800af70

080099a4 <fiprintf>:
 80099a4:	b40e      	push	{r1, r2, r3}
 80099a6:	b503      	push	{r0, r1, lr}
 80099a8:	4601      	mov	r1, r0
 80099aa:	ab03      	add	r3, sp, #12
 80099ac:	4805      	ldr	r0, [pc, #20]	; (80099c4 <fiprintf+0x20>)
 80099ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b2:	6800      	ldr	r0, [r0, #0]
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	f000 f87d 	bl	8009ab4 <_vfiprintf_r>
 80099ba:	b002      	add	sp, #8
 80099bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c0:	b003      	add	sp, #12
 80099c2:	4770      	bx	lr
 80099c4:	20000010 	.word	0x20000010

080099c8 <memmove>:
 80099c8:	4288      	cmp	r0, r1
 80099ca:	b510      	push	{r4, lr}
 80099cc:	eb01 0402 	add.w	r4, r1, r2
 80099d0:	d902      	bls.n	80099d8 <memmove+0x10>
 80099d2:	4284      	cmp	r4, r0
 80099d4:	4623      	mov	r3, r4
 80099d6:	d807      	bhi.n	80099e8 <memmove+0x20>
 80099d8:	1e43      	subs	r3, r0, #1
 80099da:	42a1      	cmp	r1, r4
 80099dc:	d008      	beq.n	80099f0 <memmove+0x28>
 80099de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099e6:	e7f8      	b.n	80099da <memmove+0x12>
 80099e8:	4402      	add	r2, r0
 80099ea:	4601      	mov	r1, r0
 80099ec:	428a      	cmp	r2, r1
 80099ee:	d100      	bne.n	80099f2 <memmove+0x2a>
 80099f0:	bd10      	pop	{r4, pc}
 80099f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099fa:	e7f7      	b.n	80099ec <memmove+0x24>

080099fc <__malloc_lock>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__malloc_lock+0x8>)
 80099fe:	f000 bc09 	b.w	800a214 <__retarget_lock_acquire_recursive>
 8009a02:	bf00      	nop
 8009a04:	200007dc 	.word	0x200007dc

08009a08 <__malloc_unlock>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__malloc_unlock+0x8>)
 8009a0a:	f000 bc04 	b.w	800a216 <__retarget_lock_release_recursive>
 8009a0e:	bf00      	nop
 8009a10:	200007dc 	.word	0x200007dc

08009a14 <_realloc_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	4607      	mov	r7, r0
 8009a18:	4614      	mov	r4, r2
 8009a1a:	460e      	mov	r6, r1
 8009a1c:	b921      	cbnz	r1, 8009a28 <_realloc_r+0x14>
 8009a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a22:	4611      	mov	r1, r2
 8009a24:	f7ff bdb2 	b.w	800958c <_malloc_r>
 8009a28:	b922      	cbnz	r2, 8009a34 <_realloc_r+0x20>
 8009a2a:	f7ff fd5f 	bl	80094ec <_free_r>
 8009a2e:	4625      	mov	r5, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a34:	f000 fc54 	bl	800a2e0 <_malloc_usable_size_r>
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d20f      	bcs.n	8009a5c <_realloc_r+0x48>
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4638      	mov	r0, r7
 8009a40:	f7ff fda4 	bl	800958c <_malloc_r>
 8009a44:	4605      	mov	r5, r0
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d0f2      	beq.n	8009a30 <_realloc_r+0x1c>
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	f7ff f875 	bl	8008b3c <memcpy>
 8009a52:	4631      	mov	r1, r6
 8009a54:	4638      	mov	r0, r7
 8009a56:	f7ff fd49 	bl	80094ec <_free_r>
 8009a5a:	e7e9      	b.n	8009a30 <_realloc_r+0x1c>
 8009a5c:	4635      	mov	r5, r6
 8009a5e:	e7e7      	b.n	8009a30 <_realloc_r+0x1c>

08009a60 <__sfputc_r>:
 8009a60:	6893      	ldr	r3, [r2, #8]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	b410      	push	{r4}
 8009a68:	6093      	str	r3, [r2, #8]
 8009a6a:	da08      	bge.n	8009a7e <__sfputc_r+0x1e>
 8009a6c:	6994      	ldr	r4, [r2, #24]
 8009a6e:	42a3      	cmp	r3, r4
 8009a70:	db01      	blt.n	8009a76 <__sfputc_r+0x16>
 8009a72:	290a      	cmp	r1, #10
 8009a74:	d103      	bne.n	8009a7e <__sfputc_r+0x1e>
 8009a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a7a:	f000 b94b 	b.w	8009d14 <__swbuf_r>
 8009a7e:	6813      	ldr	r3, [r2, #0]
 8009a80:	1c58      	adds	r0, r3, #1
 8009a82:	6010      	str	r0, [r2, #0]
 8009a84:	7019      	strb	r1, [r3, #0]
 8009a86:	4608      	mov	r0, r1
 8009a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <__sfputs_r>:
 8009a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a90:	4606      	mov	r6, r0
 8009a92:	460f      	mov	r7, r1
 8009a94:	4614      	mov	r4, r2
 8009a96:	18d5      	adds	r5, r2, r3
 8009a98:	42ac      	cmp	r4, r5
 8009a9a:	d101      	bne.n	8009aa0 <__sfputs_r+0x12>
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	e007      	b.n	8009ab0 <__sfputs_r+0x22>
 8009aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa4:	463a      	mov	r2, r7
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7ff ffda 	bl	8009a60 <__sfputc_r>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d1f3      	bne.n	8009a98 <__sfputs_r+0xa>
 8009ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ab4 <_vfiprintf_r>:
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	460d      	mov	r5, r1
 8009aba:	b09d      	sub	sp, #116	; 0x74
 8009abc:	4614      	mov	r4, r2
 8009abe:	4698      	mov	r8, r3
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	b118      	cbz	r0, 8009acc <_vfiprintf_r+0x18>
 8009ac4:	6983      	ldr	r3, [r0, #24]
 8009ac6:	b90b      	cbnz	r3, 8009acc <_vfiprintf_r+0x18>
 8009ac8:	f000 fb06 	bl	800a0d8 <__sinit>
 8009acc:	4b89      	ldr	r3, [pc, #548]	; (8009cf4 <_vfiprintf_r+0x240>)
 8009ace:	429d      	cmp	r5, r3
 8009ad0:	d11b      	bne.n	8009b0a <_vfiprintf_r+0x56>
 8009ad2:	6875      	ldr	r5, [r6, #4]
 8009ad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ad6:	07d9      	lsls	r1, r3, #31
 8009ad8:	d405      	bmi.n	8009ae6 <_vfiprintf_r+0x32>
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	059a      	lsls	r2, r3, #22
 8009ade:	d402      	bmi.n	8009ae6 <_vfiprintf_r+0x32>
 8009ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ae2:	f000 fb97 	bl	800a214 <__retarget_lock_acquire_recursive>
 8009ae6:	89ab      	ldrh	r3, [r5, #12]
 8009ae8:	071b      	lsls	r3, r3, #28
 8009aea:	d501      	bpl.n	8009af0 <_vfiprintf_r+0x3c>
 8009aec:	692b      	ldr	r3, [r5, #16]
 8009aee:	b9eb      	cbnz	r3, 8009b2c <_vfiprintf_r+0x78>
 8009af0:	4629      	mov	r1, r5
 8009af2:	4630      	mov	r0, r6
 8009af4:	f000 f960 	bl	8009db8 <__swsetup_r>
 8009af8:	b1c0      	cbz	r0, 8009b2c <_vfiprintf_r+0x78>
 8009afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009afc:	07dc      	lsls	r4, r3, #31
 8009afe:	d50e      	bpl.n	8009b1e <_vfiprintf_r+0x6a>
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	b01d      	add	sp, #116	; 0x74
 8009b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0a:	4b7b      	ldr	r3, [pc, #492]	; (8009cf8 <_vfiprintf_r+0x244>)
 8009b0c:	429d      	cmp	r5, r3
 8009b0e:	d101      	bne.n	8009b14 <_vfiprintf_r+0x60>
 8009b10:	68b5      	ldr	r5, [r6, #8]
 8009b12:	e7df      	b.n	8009ad4 <_vfiprintf_r+0x20>
 8009b14:	4b79      	ldr	r3, [pc, #484]	; (8009cfc <_vfiprintf_r+0x248>)
 8009b16:	429d      	cmp	r5, r3
 8009b18:	bf08      	it	eq
 8009b1a:	68f5      	ldreq	r5, [r6, #12]
 8009b1c:	e7da      	b.n	8009ad4 <_vfiprintf_r+0x20>
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	0598      	lsls	r0, r3, #22
 8009b22:	d4ed      	bmi.n	8009b00 <_vfiprintf_r+0x4c>
 8009b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b26:	f000 fb76 	bl	800a216 <__retarget_lock_release_recursive>
 8009b2a:	e7e9      	b.n	8009b00 <_vfiprintf_r+0x4c>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b30:	2320      	movs	r3, #32
 8009b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b3a:	2330      	movs	r3, #48	; 0x30
 8009b3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d00 <_vfiprintf_r+0x24c>
 8009b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b44:	f04f 0901 	mov.w	r9, #1
 8009b48:	4623      	mov	r3, r4
 8009b4a:	469a      	mov	sl, r3
 8009b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b50:	b10a      	cbz	r2, 8009b56 <_vfiprintf_r+0xa2>
 8009b52:	2a25      	cmp	r2, #37	; 0x25
 8009b54:	d1f9      	bne.n	8009b4a <_vfiprintf_r+0x96>
 8009b56:	ebba 0b04 	subs.w	fp, sl, r4
 8009b5a:	d00b      	beq.n	8009b74 <_vfiprintf_r+0xc0>
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	4630      	mov	r0, r6
 8009b64:	f7ff ff93 	bl	8009a8e <__sfputs_r>
 8009b68:	3001      	adds	r0, #1
 8009b6a:	f000 80aa 	beq.w	8009cc2 <_vfiprintf_r+0x20e>
 8009b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b70:	445a      	add	r2, fp
 8009b72:	9209      	str	r2, [sp, #36]	; 0x24
 8009b74:	f89a 3000 	ldrb.w	r3, [sl]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 80a2 	beq.w	8009cc2 <_vfiprintf_r+0x20e>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b88:	f10a 0a01 	add.w	sl, sl, #1
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	9307      	str	r3, [sp, #28]
 8009b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b94:	931a      	str	r3, [sp, #104]	; 0x68
 8009b96:	4654      	mov	r4, sl
 8009b98:	2205      	movs	r2, #5
 8009b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9e:	4858      	ldr	r0, [pc, #352]	; (8009d00 <_vfiprintf_r+0x24c>)
 8009ba0:	f7f6 fb26 	bl	80001f0 <memchr>
 8009ba4:	9a04      	ldr	r2, [sp, #16]
 8009ba6:	b9d8      	cbnz	r0, 8009be0 <_vfiprintf_r+0x12c>
 8009ba8:	06d1      	lsls	r1, r2, #27
 8009baa:	bf44      	itt	mi
 8009bac:	2320      	movmi	r3, #32
 8009bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb2:	0713      	lsls	r3, r2, #28
 8009bb4:	bf44      	itt	mi
 8009bb6:	232b      	movmi	r3, #43	; 0x2b
 8009bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc2:	d015      	beq.n	8009bf0 <_vfiprintf_r+0x13c>
 8009bc4:	9a07      	ldr	r2, [sp, #28]
 8009bc6:	4654      	mov	r4, sl
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f04f 0c0a 	mov.w	ip, #10
 8009bce:	4621      	mov	r1, r4
 8009bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd4:	3b30      	subs	r3, #48	; 0x30
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d94e      	bls.n	8009c78 <_vfiprintf_r+0x1c4>
 8009bda:	b1b0      	cbz	r0, 8009c0a <_vfiprintf_r+0x156>
 8009bdc:	9207      	str	r2, [sp, #28]
 8009bde:	e014      	b.n	8009c0a <_vfiprintf_r+0x156>
 8009be0:	eba0 0308 	sub.w	r3, r0, r8
 8009be4:	fa09 f303 	lsl.w	r3, r9, r3
 8009be8:	4313      	orrs	r3, r2
 8009bea:	9304      	str	r3, [sp, #16]
 8009bec:	46a2      	mov	sl, r4
 8009bee:	e7d2      	b.n	8009b96 <_vfiprintf_r+0xe2>
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	1d19      	adds	r1, r3, #4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	9103      	str	r1, [sp, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bfbb      	ittet	lt
 8009bfc:	425b      	neglt	r3, r3
 8009bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8009c02:	9307      	strge	r3, [sp, #28]
 8009c04:	9307      	strlt	r3, [sp, #28]
 8009c06:	bfb8      	it	lt
 8009c08:	9204      	strlt	r2, [sp, #16]
 8009c0a:	7823      	ldrb	r3, [r4, #0]
 8009c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c0e:	d10c      	bne.n	8009c2a <_vfiprintf_r+0x176>
 8009c10:	7863      	ldrb	r3, [r4, #1]
 8009c12:	2b2a      	cmp	r3, #42	; 0x2a
 8009c14:	d135      	bne.n	8009c82 <_vfiprintf_r+0x1ce>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	1d1a      	adds	r2, r3, #4
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	9203      	str	r2, [sp, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bfb8      	it	lt
 8009c22:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c26:	3402      	adds	r4, #2
 8009c28:	9305      	str	r3, [sp, #20]
 8009c2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d10 <_vfiprintf_r+0x25c>
 8009c2e:	7821      	ldrb	r1, [r4, #0]
 8009c30:	2203      	movs	r2, #3
 8009c32:	4650      	mov	r0, sl
 8009c34:	f7f6 fadc 	bl	80001f0 <memchr>
 8009c38:	b140      	cbz	r0, 8009c4c <_vfiprintf_r+0x198>
 8009c3a:	2340      	movs	r3, #64	; 0x40
 8009c3c:	eba0 000a 	sub.w	r0, r0, sl
 8009c40:	fa03 f000 	lsl.w	r0, r3, r0
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	4303      	orrs	r3, r0
 8009c48:	3401      	adds	r4, #1
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c50:	482c      	ldr	r0, [pc, #176]	; (8009d04 <_vfiprintf_r+0x250>)
 8009c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c56:	2206      	movs	r2, #6
 8009c58:	f7f6 faca 	bl	80001f0 <memchr>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d03f      	beq.n	8009ce0 <_vfiprintf_r+0x22c>
 8009c60:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <_vfiprintf_r+0x254>)
 8009c62:	bb1b      	cbnz	r3, 8009cac <_vfiprintf_r+0x1f8>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	3307      	adds	r3, #7
 8009c68:	f023 0307 	bic.w	r3, r3, #7
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	9303      	str	r3, [sp, #12]
 8009c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c72:	443b      	add	r3, r7
 8009c74:	9309      	str	r3, [sp, #36]	; 0x24
 8009c76:	e767      	b.n	8009b48 <_vfiprintf_r+0x94>
 8009c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	2001      	movs	r0, #1
 8009c80:	e7a5      	b.n	8009bce <_vfiprintf_r+0x11a>
 8009c82:	2300      	movs	r3, #0
 8009c84:	3401      	adds	r4, #1
 8009c86:	9305      	str	r3, [sp, #20]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f04f 0c0a 	mov.w	ip, #10
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c94:	3a30      	subs	r2, #48	; 0x30
 8009c96:	2a09      	cmp	r2, #9
 8009c98:	d903      	bls.n	8009ca2 <_vfiprintf_r+0x1ee>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0c5      	beq.n	8009c2a <_vfiprintf_r+0x176>
 8009c9e:	9105      	str	r1, [sp, #20]
 8009ca0:	e7c3      	b.n	8009c2a <_vfiprintf_r+0x176>
 8009ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e7f0      	b.n	8009c8e <_vfiprintf_r+0x1da>
 8009cac:	ab03      	add	r3, sp, #12
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	4b16      	ldr	r3, [pc, #88]	; (8009d0c <_vfiprintf_r+0x258>)
 8009cb4:	a904      	add	r1, sp, #16
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f7fc f884 	bl	8005dc4 <_printf_float>
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	1c78      	adds	r0, r7, #1
 8009cc0:	d1d6      	bne.n	8009c70 <_vfiprintf_r+0x1bc>
 8009cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cc4:	07d9      	lsls	r1, r3, #31
 8009cc6:	d405      	bmi.n	8009cd4 <_vfiprintf_r+0x220>
 8009cc8:	89ab      	ldrh	r3, [r5, #12]
 8009cca:	059a      	lsls	r2, r3, #22
 8009ccc:	d402      	bmi.n	8009cd4 <_vfiprintf_r+0x220>
 8009cce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cd0:	f000 faa1 	bl	800a216 <__retarget_lock_release_recursive>
 8009cd4:	89ab      	ldrh	r3, [r5, #12]
 8009cd6:	065b      	lsls	r3, r3, #25
 8009cd8:	f53f af12 	bmi.w	8009b00 <_vfiprintf_r+0x4c>
 8009cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cde:	e711      	b.n	8009b04 <_vfiprintf_r+0x50>
 8009ce0:	ab03      	add	r3, sp, #12
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	462a      	mov	r2, r5
 8009ce6:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <_vfiprintf_r+0x258>)
 8009ce8:	a904      	add	r1, sp, #16
 8009cea:	4630      	mov	r0, r6
 8009cec:	f7fc fb0e 	bl	800630c <_printf_i>
 8009cf0:	e7e4      	b.n	8009cbc <_vfiprintf_r+0x208>
 8009cf2:	bf00      	nop
 8009cf4:	0800af94 	.word	0x0800af94
 8009cf8:	0800afb4 	.word	0x0800afb4
 8009cfc:	0800af74 	.word	0x0800af74
 8009d00:	0800af24 	.word	0x0800af24
 8009d04:	0800af2e 	.word	0x0800af2e
 8009d08:	08005dc5 	.word	0x08005dc5
 8009d0c:	08009a8f 	.word	0x08009a8f
 8009d10:	0800af2a 	.word	0x0800af2a

08009d14 <__swbuf_r>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	460e      	mov	r6, r1
 8009d18:	4614      	mov	r4, r2
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	b118      	cbz	r0, 8009d26 <__swbuf_r+0x12>
 8009d1e:	6983      	ldr	r3, [r0, #24]
 8009d20:	b90b      	cbnz	r3, 8009d26 <__swbuf_r+0x12>
 8009d22:	f000 f9d9 	bl	800a0d8 <__sinit>
 8009d26:	4b21      	ldr	r3, [pc, #132]	; (8009dac <__swbuf_r+0x98>)
 8009d28:	429c      	cmp	r4, r3
 8009d2a:	d12b      	bne.n	8009d84 <__swbuf_r+0x70>
 8009d2c:	686c      	ldr	r4, [r5, #4]
 8009d2e:	69a3      	ldr	r3, [r4, #24]
 8009d30:	60a3      	str	r3, [r4, #8]
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	071a      	lsls	r2, r3, #28
 8009d36:	d52f      	bpl.n	8009d98 <__swbuf_r+0x84>
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b36b      	cbz	r3, 8009d98 <__swbuf_r+0x84>
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1ac0      	subs	r0, r0, r3
 8009d42:	6963      	ldr	r3, [r4, #20]
 8009d44:	b2f6      	uxtb	r6, r6
 8009d46:	4283      	cmp	r3, r0
 8009d48:	4637      	mov	r7, r6
 8009d4a:	dc04      	bgt.n	8009d56 <__swbuf_r+0x42>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 f92e 	bl	8009fb0 <_fflush_r>
 8009d54:	bb30      	cbnz	r0, 8009da4 <__swbuf_r+0x90>
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	60a3      	str	r3, [r4, #8]
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	6022      	str	r2, [r4, #0]
 8009d62:	701e      	strb	r6, [r3, #0]
 8009d64:	6963      	ldr	r3, [r4, #20]
 8009d66:	3001      	adds	r0, #1
 8009d68:	4283      	cmp	r3, r0
 8009d6a:	d004      	beq.n	8009d76 <__swbuf_r+0x62>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	07db      	lsls	r3, r3, #31
 8009d70:	d506      	bpl.n	8009d80 <__swbuf_r+0x6c>
 8009d72:	2e0a      	cmp	r6, #10
 8009d74:	d104      	bne.n	8009d80 <__swbuf_r+0x6c>
 8009d76:	4621      	mov	r1, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 f919 	bl	8009fb0 <_fflush_r>
 8009d7e:	b988      	cbnz	r0, 8009da4 <__swbuf_r+0x90>
 8009d80:	4638      	mov	r0, r7
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d84:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <__swbuf_r+0x9c>)
 8009d86:	429c      	cmp	r4, r3
 8009d88:	d101      	bne.n	8009d8e <__swbuf_r+0x7a>
 8009d8a:	68ac      	ldr	r4, [r5, #8]
 8009d8c:	e7cf      	b.n	8009d2e <__swbuf_r+0x1a>
 8009d8e:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <__swbuf_r+0xa0>)
 8009d90:	429c      	cmp	r4, r3
 8009d92:	bf08      	it	eq
 8009d94:	68ec      	ldreq	r4, [r5, #12]
 8009d96:	e7ca      	b.n	8009d2e <__swbuf_r+0x1a>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f000 f80c 	bl	8009db8 <__swsetup_r>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d0cb      	beq.n	8009d3c <__swbuf_r+0x28>
 8009da4:	f04f 37ff 	mov.w	r7, #4294967295
 8009da8:	e7ea      	b.n	8009d80 <__swbuf_r+0x6c>
 8009daa:	bf00      	nop
 8009dac:	0800af94 	.word	0x0800af94
 8009db0:	0800afb4 	.word	0x0800afb4
 8009db4:	0800af74 	.word	0x0800af74

08009db8 <__swsetup_r>:
 8009db8:	4b32      	ldr	r3, [pc, #200]	; (8009e84 <__swsetup_r+0xcc>)
 8009dba:	b570      	push	{r4, r5, r6, lr}
 8009dbc:	681d      	ldr	r5, [r3, #0]
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	b125      	cbz	r5, 8009dce <__swsetup_r+0x16>
 8009dc4:	69ab      	ldr	r3, [r5, #24]
 8009dc6:	b913      	cbnz	r3, 8009dce <__swsetup_r+0x16>
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f000 f985 	bl	800a0d8 <__sinit>
 8009dce:	4b2e      	ldr	r3, [pc, #184]	; (8009e88 <__swsetup_r+0xd0>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d10f      	bne.n	8009df4 <__swsetup_r+0x3c>
 8009dd4:	686c      	ldr	r4, [r5, #4]
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ddc:	0719      	lsls	r1, r3, #28
 8009dde:	d42c      	bmi.n	8009e3a <__swsetup_r+0x82>
 8009de0:	06dd      	lsls	r5, r3, #27
 8009de2:	d411      	bmi.n	8009e08 <__swsetup_r+0x50>
 8009de4:	2309      	movs	r3, #9
 8009de6:	6033      	str	r3, [r6, #0]
 8009de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	f04f 30ff 	mov.w	r0, #4294967295
 8009df2:	e03e      	b.n	8009e72 <__swsetup_r+0xba>
 8009df4:	4b25      	ldr	r3, [pc, #148]	; (8009e8c <__swsetup_r+0xd4>)
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d101      	bne.n	8009dfe <__swsetup_r+0x46>
 8009dfa:	68ac      	ldr	r4, [r5, #8]
 8009dfc:	e7eb      	b.n	8009dd6 <__swsetup_r+0x1e>
 8009dfe:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <__swsetup_r+0xd8>)
 8009e00:	429c      	cmp	r4, r3
 8009e02:	bf08      	it	eq
 8009e04:	68ec      	ldreq	r4, [r5, #12]
 8009e06:	e7e6      	b.n	8009dd6 <__swsetup_r+0x1e>
 8009e08:	0758      	lsls	r0, r3, #29
 8009e0a:	d512      	bpl.n	8009e32 <__swsetup_r+0x7a>
 8009e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e0e:	b141      	cbz	r1, 8009e22 <__swsetup_r+0x6a>
 8009e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e14:	4299      	cmp	r1, r3
 8009e16:	d002      	beq.n	8009e1e <__swsetup_r+0x66>
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff fb67 	bl	80094ec <_free_r>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	6363      	str	r3, [r4, #52]	; 0x34
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f043 0308 	orr.w	r3, r3, #8
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	b94b      	cbnz	r3, 8009e52 <__swsetup_r+0x9a>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e48:	d003      	beq.n	8009e52 <__swsetup_r+0x9a>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f000 fa07 	bl	800a260 <__smakebuf_r>
 8009e52:	89a0      	ldrh	r0, [r4, #12]
 8009e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e58:	f010 0301 	ands.w	r3, r0, #1
 8009e5c:	d00a      	beq.n	8009e74 <__swsetup_r+0xbc>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60a3      	str	r3, [r4, #8]
 8009e62:	6963      	ldr	r3, [r4, #20]
 8009e64:	425b      	negs	r3, r3
 8009e66:	61a3      	str	r3, [r4, #24]
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	b943      	cbnz	r3, 8009e7e <__swsetup_r+0xc6>
 8009e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e70:	d1ba      	bne.n	8009de8 <__swsetup_r+0x30>
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
 8009e74:	0781      	lsls	r1, r0, #30
 8009e76:	bf58      	it	pl
 8009e78:	6963      	ldrpl	r3, [r4, #20]
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	e7f4      	b.n	8009e68 <__swsetup_r+0xb0>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e7f7      	b.n	8009e72 <__swsetup_r+0xba>
 8009e82:	bf00      	nop
 8009e84:	20000010 	.word	0x20000010
 8009e88:	0800af94 	.word	0x0800af94
 8009e8c:	0800afb4 	.word	0x0800afb4
 8009e90:	0800af74 	.word	0x0800af74

08009e94 <abort>:
 8009e94:	b508      	push	{r3, lr}
 8009e96:	2006      	movs	r0, #6
 8009e98:	f000 fa52 	bl	800a340 <raise>
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	f7f8 fa09 	bl	80022b4 <_exit>
	...

08009ea4 <__sflush_r>:
 8009ea4:	898a      	ldrh	r2, [r1, #12]
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	4605      	mov	r5, r0
 8009eac:	0710      	lsls	r0, r2, #28
 8009eae:	460c      	mov	r4, r1
 8009eb0:	d458      	bmi.n	8009f64 <__sflush_r+0xc0>
 8009eb2:	684b      	ldr	r3, [r1, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dc05      	bgt.n	8009ec4 <__sflush_r+0x20>
 8009eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	dc02      	bgt.n	8009ec4 <__sflush_r+0x20>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	d0f9      	beq.n	8009ebe <__sflush_r+0x1a>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ed0:	682f      	ldr	r7, [r5, #0]
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	d032      	beq.n	8009f3c <__sflush_r+0x98>
 8009ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	075a      	lsls	r2, r3, #29
 8009edc:	d505      	bpl.n	8009eea <__sflush_r+0x46>
 8009ede:	6863      	ldr	r3, [r4, #4]
 8009ee0:	1ac0      	subs	r0, r0, r3
 8009ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ee4:	b10b      	cbz	r3, 8009eea <__sflush_r+0x46>
 8009ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ee8:	1ac0      	subs	r0, r0, r3
 8009eea:	2300      	movs	r3, #0
 8009eec:	4602      	mov	r2, r0
 8009eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ef0:	6a21      	ldr	r1, [r4, #32]
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b0      	blx	r6
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	d106      	bne.n	8009f0a <__sflush_r+0x66>
 8009efc:	6829      	ldr	r1, [r5, #0]
 8009efe:	291d      	cmp	r1, #29
 8009f00:	d82c      	bhi.n	8009f5c <__sflush_r+0xb8>
 8009f02:	4a2a      	ldr	r2, [pc, #168]	; (8009fac <__sflush_r+0x108>)
 8009f04:	40ca      	lsrs	r2, r1
 8009f06:	07d6      	lsls	r6, r2, #31
 8009f08:	d528      	bpl.n	8009f5c <__sflush_r+0xb8>
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	6062      	str	r2, [r4, #4]
 8009f0e:	04d9      	lsls	r1, r3, #19
 8009f10:	6922      	ldr	r2, [r4, #16]
 8009f12:	6022      	str	r2, [r4, #0]
 8009f14:	d504      	bpl.n	8009f20 <__sflush_r+0x7c>
 8009f16:	1c42      	adds	r2, r0, #1
 8009f18:	d101      	bne.n	8009f1e <__sflush_r+0x7a>
 8009f1a:	682b      	ldr	r3, [r5, #0]
 8009f1c:	b903      	cbnz	r3, 8009f20 <__sflush_r+0x7c>
 8009f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8009f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f22:	602f      	str	r7, [r5, #0]
 8009f24:	2900      	cmp	r1, #0
 8009f26:	d0ca      	beq.n	8009ebe <__sflush_r+0x1a>
 8009f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f2c:	4299      	cmp	r1, r3
 8009f2e:	d002      	beq.n	8009f36 <__sflush_r+0x92>
 8009f30:	4628      	mov	r0, r5
 8009f32:	f7ff fadb 	bl	80094ec <_free_r>
 8009f36:	2000      	movs	r0, #0
 8009f38:	6360      	str	r0, [r4, #52]	; 0x34
 8009f3a:	e7c1      	b.n	8009ec0 <__sflush_r+0x1c>
 8009f3c:	6a21      	ldr	r1, [r4, #32]
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b0      	blx	r6
 8009f44:	1c41      	adds	r1, r0, #1
 8009f46:	d1c7      	bne.n	8009ed8 <__sflush_r+0x34>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0c4      	beq.n	8009ed8 <__sflush_r+0x34>
 8009f4e:	2b1d      	cmp	r3, #29
 8009f50:	d001      	beq.n	8009f56 <__sflush_r+0xb2>
 8009f52:	2b16      	cmp	r3, #22
 8009f54:	d101      	bne.n	8009f5a <__sflush_r+0xb6>
 8009f56:	602f      	str	r7, [r5, #0]
 8009f58:	e7b1      	b.n	8009ebe <__sflush_r+0x1a>
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	e7ad      	b.n	8009ec0 <__sflush_r+0x1c>
 8009f64:	690f      	ldr	r7, [r1, #16]
 8009f66:	2f00      	cmp	r7, #0
 8009f68:	d0a9      	beq.n	8009ebe <__sflush_r+0x1a>
 8009f6a:	0793      	lsls	r3, r2, #30
 8009f6c:	680e      	ldr	r6, [r1, #0]
 8009f6e:	bf08      	it	eq
 8009f70:	694b      	ldreq	r3, [r1, #20]
 8009f72:	600f      	str	r7, [r1, #0]
 8009f74:	bf18      	it	ne
 8009f76:	2300      	movne	r3, #0
 8009f78:	eba6 0807 	sub.w	r8, r6, r7
 8009f7c:	608b      	str	r3, [r1, #8]
 8009f7e:	f1b8 0f00 	cmp.w	r8, #0
 8009f82:	dd9c      	ble.n	8009ebe <__sflush_r+0x1a>
 8009f84:	6a21      	ldr	r1, [r4, #32]
 8009f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f88:	4643      	mov	r3, r8
 8009f8a:	463a      	mov	r2, r7
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b0      	blx	r6
 8009f90:	2800      	cmp	r0, #0
 8009f92:	dc06      	bgt.n	8009fa2 <__sflush_r+0xfe>
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e78e      	b.n	8009ec0 <__sflush_r+0x1c>
 8009fa2:	4407      	add	r7, r0
 8009fa4:	eba8 0800 	sub.w	r8, r8, r0
 8009fa8:	e7e9      	b.n	8009f7e <__sflush_r+0xda>
 8009faa:	bf00      	nop
 8009fac:	20400001 	.word	0x20400001

08009fb0 <_fflush_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	690b      	ldr	r3, [r1, #16]
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	b913      	cbnz	r3, 8009fc0 <_fflush_r+0x10>
 8009fba:	2500      	movs	r5, #0
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	b118      	cbz	r0, 8009fca <_fflush_r+0x1a>
 8009fc2:	6983      	ldr	r3, [r0, #24]
 8009fc4:	b90b      	cbnz	r3, 8009fca <_fflush_r+0x1a>
 8009fc6:	f000 f887 	bl	800a0d8 <__sinit>
 8009fca:	4b14      	ldr	r3, [pc, #80]	; (800a01c <_fflush_r+0x6c>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d11b      	bne.n	800a008 <_fflush_r+0x58>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0ef      	beq.n	8009fba <_fflush_r+0xa>
 8009fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fdc:	07d0      	lsls	r0, r2, #31
 8009fde:	d404      	bmi.n	8009fea <_fflush_r+0x3a>
 8009fe0:	0599      	lsls	r1, r3, #22
 8009fe2:	d402      	bmi.n	8009fea <_fflush_r+0x3a>
 8009fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fe6:	f000 f915 	bl	800a214 <__retarget_lock_acquire_recursive>
 8009fea:	4628      	mov	r0, r5
 8009fec:	4621      	mov	r1, r4
 8009fee:	f7ff ff59 	bl	8009ea4 <__sflush_r>
 8009ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ff4:	07da      	lsls	r2, r3, #31
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	d4e0      	bmi.n	8009fbc <_fflush_r+0xc>
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	059b      	lsls	r3, r3, #22
 8009ffe:	d4dd      	bmi.n	8009fbc <_fflush_r+0xc>
 800a000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a002:	f000 f908 	bl	800a216 <__retarget_lock_release_recursive>
 800a006:	e7d9      	b.n	8009fbc <_fflush_r+0xc>
 800a008:	4b05      	ldr	r3, [pc, #20]	; (800a020 <_fflush_r+0x70>)
 800a00a:	429c      	cmp	r4, r3
 800a00c:	d101      	bne.n	800a012 <_fflush_r+0x62>
 800a00e:	68ac      	ldr	r4, [r5, #8]
 800a010:	e7df      	b.n	8009fd2 <_fflush_r+0x22>
 800a012:	4b04      	ldr	r3, [pc, #16]	; (800a024 <_fflush_r+0x74>)
 800a014:	429c      	cmp	r4, r3
 800a016:	bf08      	it	eq
 800a018:	68ec      	ldreq	r4, [r5, #12]
 800a01a:	e7da      	b.n	8009fd2 <_fflush_r+0x22>
 800a01c:	0800af94 	.word	0x0800af94
 800a020:	0800afb4 	.word	0x0800afb4
 800a024:	0800af74 	.word	0x0800af74

0800a028 <std>:
 800a028:	2300      	movs	r3, #0
 800a02a:	b510      	push	{r4, lr}
 800a02c:	4604      	mov	r4, r0
 800a02e:	e9c0 3300 	strd	r3, r3, [r0]
 800a032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a036:	6083      	str	r3, [r0, #8]
 800a038:	8181      	strh	r1, [r0, #12]
 800a03a:	6643      	str	r3, [r0, #100]	; 0x64
 800a03c:	81c2      	strh	r2, [r0, #14]
 800a03e:	6183      	str	r3, [r0, #24]
 800a040:	4619      	mov	r1, r3
 800a042:	2208      	movs	r2, #8
 800a044:	305c      	adds	r0, #92	; 0x5c
 800a046:	f7fb fe15 	bl	8005c74 <memset>
 800a04a:	4b05      	ldr	r3, [pc, #20]	; (800a060 <std+0x38>)
 800a04c:	6263      	str	r3, [r4, #36]	; 0x24
 800a04e:	4b05      	ldr	r3, [pc, #20]	; (800a064 <std+0x3c>)
 800a050:	62a3      	str	r3, [r4, #40]	; 0x28
 800a052:	4b05      	ldr	r3, [pc, #20]	; (800a068 <std+0x40>)
 800a054:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a056:	4b05      	ldr	r3, [pc, #20]	; (800a06c <std+0x44>)
 800a058:	6224      	str	r4, [r4, #32]
 800a05a:	6323      	str	r3, [r4, #48]	; 0x30
 800a05c:	bd10      	pop	{r4, pc}
 800a05e:	bf00      	nop
 800a060:	0800a379 	.word	0x0800a379
 800a064:	0800a39b 	.word	0x0800a39b
 800a068:	0800a3d3 	.word	0x0800a3d3
 800a06c:	0800a3f7 	.word	0x0800a3f7

0800a070 <_cleanup_r>:
 800a070:	4901      	ldr	r1, [pc, #4]	; (800a078 <_cleanup_r+0x8>)
 800a072:	f000 b8af 	b.w	800a1d4 <_fwalk_reent>
 800a076:	bf00      	nop
 800a078:	08009fb1 	.word	0x08009fb1

0800a07c <__sfmoreglue>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	1e4a      	subs	r2, r1, #1
 800a080:	2568      	movs	r5, #104	; 0x68
 800a082:	4355      	muls	r5, r2
 800a084:	460e      	mov	r6, r1
 800a086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a08a:	f7ff fa7f 	bl	800958c <_malloc_r>
 800a08e:	4604      	mov	r4, r0
 800a090:	b140      	cbz	r0, 800a0a4 <__sfmoreglue+0x28>
 800a092:	2100      	movs	r1, #0
 800a094:	e9c0 1600 	strd	r1, r6, [r0]
 800a098:	300c      	adds	r0, #12
 800a09a:	60a0      	str	r0, [r4, #8]
 800a09c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0a0:	f7fb fde8 	bl	8005c74 <memset>
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}

0800a0a8 <__sfp_lock_acquire>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	; (800a0b0 <__sfp_lock_acquire+0x8>)
 800a0aa:	f000 b8b3 	b.w	800a214 <__retarget_lock_acquire_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	200007e0 	.word	0x200007e0

0800a0b4 <__sfp_lock_release>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__sfp_lock_release+0x8>)
 800a0b6:	f000 b8ae 	b.w	800a216 <__retarget_lock_release_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	200007e0 	.word	0x200007e0

0800a0c0 <__sinit_lock_acquire>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__sinit_lock_acquire+0x8>)
 800a0c2:	f000 b8a7 	b.w	800a214 <__retarget_lock_acquire_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	200007db 	.word	0x200007db

0800a0cc <__sinit_lock_release>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__sinit_lock_release+0x8>)
 800a0ce:	f000 b8a2 	b.w	800a216 <__retarget_lock_release_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	200007db 	.word	0x200007db

0800a0d8 <__sinit>:
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	4604      	mov	r4, r0
 800a0dc:	f7ff fff0 	bl	800a0c0 <__sinit_lock_acquire>
 800a0e0:	69a3      	ldr	r3, [r4, #24]
 800a0e2:	b11b      	cbz	r3, 800a0ec <__sinit+0x14>
 800a0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e8:	f7ff bff0 	b.w	800a0cc <__sinit_lock_release>
 800a0ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0f0:	6523      	str	r3, [r4, #80]	; 0x50
 800a0f2:	4b13      	ldr	r3, [pc, #76]	; (800a140 <__sinit+0x68>)
 800a0f4:	4a13      	ldr	r2, [pc, #76]	; (800a144 <__sinit+0x6c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0fa:	42a3      	cmp	r3, r4
 800a0fc:	bf04      	itt	eq
 800a0fe:	2301      	moveq	r3, #1
 800a100:	61a3      	streq	r3, [r4, #24]
 800a102:	4620      	mov	r0, r4
 800a104:	f000 f820 	bl	800a148 <__sfp>
 800a108:	6060      	str	r0, [r4, #4]
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 f81c 	bl	800a148 <__sfp>
 800a110:	60a0      	str	r0, [r4, #8]
 800a112:	4620      	mov	r0, r4
 800a114:	f000 f818 	bl	800a148 <__sfp>
 800a118:	2200      	movs	r2, #0
 800a11a:	60e0      	str	r0, [r4, #12]
 800a11c:	2104      	movs	r1, #4
 800a11e:	6860      	ldr	r0, [r4, #4]
 800a120:	f7ff ff82 	bl	800a028 <std>
 800a124:	68a0      	ldr	r0, [r4, #8]
 800a126:	2201      	movs	r2, #1
 800a128:	2109      	movs	r1, #9
 800a12a:	f7ff ff7d 	bl	800a028 <std>
 800a12e:	68e0      	ldr	r0, [r4, #12]
 800a130:	2202      	movs	r2, #2
 800a132:	2112      	movs	r1, #18
 800a134:	f7ff ff78 	bl	800a028 <std>
 800a138:	2301      	movs	r3, #1
 800a13a:	61a3      	str	r3, [r4, #24]
 800a13c:	e7d2      	b.n	800a0e4 <__sinit+0xc>
 800a13e:	bf00      	nop
 800a140:	0800ab20 	.word	0x0800ab20
 800a144:	0800a071 	.word	0x0800a071

0800a148 <__sfp>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	4607      	mov	r7, r0
 800a14c:	f7ff ffac 	bl	800a0a8 <__sfp_lock_acquire>
 800a150:	4b1e      	ldr	r3, [pc, #120]	; (800a1cc <__sfp+0x84>)
 800a152:	681e      	ldr	r6, [r3, #0]
 800a154:	69b3      	ldr	r3, [r6, #24]
 800a156:	b913      	cbnz	r3, 800a15e <__sfp+0x16>
 800a158:	4630      	mov	r0, r6
 800a15a:	f7ff ffbd 	bl	800a0d8 <__sinit>
 800a15e:	3648      	adds	r6, #72	; 0x48
 800a160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a164:	3b01      	subs	r3, #1
 800a166:	d503      	bpl.n	800a170 <__sfp+0x28>
 800a168:	6833      	ldr	r3, [r6, #0]
 800a16a:	b30b      	cbz	r3, 800a1b0 <__sfp+0x68>
 800a16c:	6836      	ldr	r6, [r6, #0]
 800a16e:	e7f7      	b.n	800a160 <__sfp+0x18>
 800a170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a174:	b9d5      	cbnz	r5, 800a1ac <__sfp+0x64>
 800a176:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <__sfp+0x88>)
 800a178:	60e3      	str	r3, [r4, #12]
 800a17a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a17e:	6665      	str	r5, [r4, #100]	; 0x64
 800a180:	f000 f847 	bl	800a212 <__retarget_lock_init_recursive>
 800a184:	f7ff ff96 	bl	800a0b4 <__sfp_lock_release>
 800a188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a18c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a190:	6025      	str	r5, [r4, #0]
 800a192:	61a5      	str	r5, [r4, #24]
 800a194:	2208      	movs	r2, #8
 800a196:	4629      	mov	r1, r5
 800a198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a19c:	f7fb fd6a 	bl	8005c74 <memset>
 800a1a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ac:	3468      	adds	r4, #104	; 0x68
 800a1ae:	e7d9      	b.n	800a164 <__sfp+0x1c>
 800a1b0:	2104      	movs	r1, #4
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	f7ff ff62 	bl	800a07c <__sfmoreglue>
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	6030      	str	r0, [r6, #0]
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d1d5      	bne.n	800a16c <__sfp+0x24>
 800a1c0:	f7ff ff78 	bl	800a0b4 <__sfp_lock_release>
 800a1c4:	230c      	movs	r3, #12
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	e7ee      	b.n	800a1a8 <__sfp+0x60>
 800a1ca:	bf00      	nop
 800a1cc:	0800ab20 	.word	0x0800ab20
 800a1d0:	ffff0001 	.word	0xffff0001

0800a1d4 <_fwalk_reent>:
 800a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d8:	4606      	mov	r6, r0
 800a1da:	4688      	mov	r8, r1
 800a1dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1e0:	2700      	movs	r7, #0
 800a1e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1e6:	f1b9 0901 	subs.w	r9, r9, #1
 800a1ea:	d505      	bpl.n	800a1f8 <_fwalk_reent+0x24>
 800a1ec:	6824      	ldr	r4, [r4, #0]
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	d1f7      	bne.n	800a1e2 <_fwalk_reent+0xe>
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f8:	89ab      	ldrh	r3, [r5, #12]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d907      	bls.n	800a20e <_fwalk_reent+0x3a>
 800a1fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a202:	3301      	adds	r3, #1
 800a204:	d003      	beq.n	800a20e <_fwalk_reent+0x3a>
 800a206:	4629      	mov	r1, r5
 800a208:	4630      	mov	r0, r6
 800a20a:	47c0      	blx	r8
 800a20c:	4307      	orrs	r7, r0
 800a20e:	3568      	adds	r5, #104	; 0x68
 800a210:	e7e9      	b.n	800a1e6 <_fwalk_reent+0x12>

0800a212 <__retarget_lock_init_recursive>:
 800a212:	4770      	bx	lr

0800a214 <__retarget_lock_acquire_recursive>:
 800a214:	4770      	bx	lr

0800a216 <__retarget_lock_release_recursive>:
 800a216:	4770      	bx	lr

0800a218 <__swhatbuf_r>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	460e      	mov	r6, r1
 800a21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a220:	2900      	cmp	r1, #0
 800a222:	b096      	sub	sp, #88	; 0x58
 800a224:	4614      	mov	r4, r2
 800a226:	461d      	mov	r5, r3
 800a228:	da07      	bge.n	800a23a <__swhatbuf_r+0x22>
 800a22a:	2300      	movs	r3, #0
 800a22c:	602b      	str	r3, [r5, #0]
 800a22e:	89b3      	ldrh	r3, [r6, #12]
 800a230:	061a      	lsls	r2, r3, #24
 800a232:	d410      	bmi.n	800a256 <__swhatbuf_r+0x3e>
 800a234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a238:	e00e      	b.n	800a258 <__swhatbuf_r+0x40>
 800a23a:	466a      	mov	r2, sp
 800a23c:	f000 f902 	bl	800a444 <_fstat_r>
 800a240:	2800      	cmp	r0, #0
 800a242:	dbf2      	blt.n	800a22a <__swhatbuf_r+0x12>
 800a244:	9a01      	ldr	r2, [sp, #4]
 800a246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a24a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a24e:	425a      	negs	r2, r3
 800a250:	415a      	adcs	r2, r3
 800a252:	602a      	str	r2, [r5, #0]
 800a254:	e7ee      	b.n	800a234 <__swhatbuf_r+0x1c>
 800a256:	2340      	movs	r3, #64	; 0x40
 800a258:	2000      	movs	r0, #0
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	b016      	add	sp, #88	; 0x58
 800a25e:	bd70      	pop	{r4, r5, r6, pc}

0800a260 <__smakebuf_r>:
 800a260:	898b      	ldrh	r3, [r1, #12]
 800a262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a264:	079d      	lsls	r5, r3, #30
 800a266:	4606      	mov	r6, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	d507      	bpl.n	800a27c <__smakebuf_r+0x1c>
 800a26c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	6123      	str	r3, [r4, #16]
 800a274:	2301      	movs	r3, #1
 800a276:	6163      	str	r3, [r4, #20]
 800a278:	b002      	add	sp, #8
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
 800a27c:	ab01      	add	r3, sp, #4
 800a27e:	466a      	mov	r2, sp
 800a280:	f7ff ffca 	bl	800a218 <__swhatbuf_r>
 800a284:	9900      	ldr	r1, [sp, #0]
 800a286:	4605      	mov	r5, r0
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff f97f 	bl	800958c <_malloc_r>
 800a28e:	b948      	cbnz	r0, 800a2a4 <__smakebuf_r+0x44>
 800a290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a294:	059a      	lsls	r2, r3, #22
 800a296:	d4ef      	bmi.n	800a278 <__smakebuf_r+0x18>
 800a298:	f023 0303 	bic.w	r3, r3, #3
 800a29c:	f043 0302 	orr.w	r3, r3, #2
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	e7e3      	b.n	800a26c <__smakebuf_r+0xc>
 800a2a4:	4b0d      	ldr	r3, [pc, #52]	; (800a2dc <__smakebuf_r+0x7c>)
 800a2a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	6020      	str	r0, [r4, #0]
 800a2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b0:	81a3      	strh	r3, [r4, #12]
 800a2b2:	9b00      	ldr	r3, [sp, #0]
 800a2b4:	6163      	str	r3, [r4, #20]
 800a2b6:	9b01      	ldr	r3, [sp, #4]
 800a2b8:	6120      	str	r0, [r4, #16]
 800a2ba:	b15b      	cbz	r3, 800a2d4 <__smakebuf_r+0x74>
 800a2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f000 f8d1 	bl	800a468 <_isatty_r>
 800a2c6:	b128      	cbz	r0, 800a2d4 <__smakebuf_r+0x74>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	f023 0303 	bic.w	r3, r3, #3
 800a2ce:	f043 0301 	orr.w	r3, r3, #1
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	89a0      	ldrh	r0, [r4, #12]
 800a2d6:	4305      	orrs	r5, r0
 800a2d8:	81a5      	strh	r5, [r4, #12]
 800a2da:	e7cd      	b.n	800a278 <__smakebuf_r+0x18>
 800a2dc:	0800a071 	.word	0x0800a071

0800a2e0 <_malloc_usable_size_r>:
 800a2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e4:	1f18      	subs	r0, r3, #4
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	bfbc      	itt	lt
 800a2ea:	580b      	ldrlt	r3, [r1, r0]
 800a2ec:	18c0      	addlt	r0, r0, r3
 800a2ee:	4770      	bx	lr

0800a2f0 <_raise_r>:
 800a2f0:	291f      	cmp	r1, #31
 800a2f2:	b538      	push	{r3, r4, r5, lr}
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	d904      	bls.n	800a304 <_raise_r+0x14>
 800a2fa:	2316      	movs	r3, #22
 800a2fc:	6003      	str	r3, [r0, #0]
 800a2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a306:	b112      	cbz	r2, 800a30e <_raise_r+0x1e>
 800a308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a30c:	b94b      	cbnz	r3, 800a322 <_raise_r+0x32>
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 f830 	bl	800a374 <_getpid_r>
 800a314:	462a      	mov	r2, r5
 800a316:	4601      	mov	r1, r0
 800a318:	4620      	mov	r0, r4
 800a31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a31e:	f000 b817 	b.w	800a350 <_kill_r>
 800a322:	2b01      	cmp	r3, #1
 800a324:	d00a      	beq.n	800a33c <_raise_r+0x4c>
 800a326:	1c59      	adds	r1, r3, #1
 800a328:	d103      	bne.n	800a332 <_raise_r+0x42>
 800a32a:	2316      	movs	r3, #22
 800a32c:	6003      	str	r3, [r0, #0]
 800a32e:	2001      	movs	r0, #1
 800a330:	e7e7      	b.n	800a302 <_raise_r+0x12>
 800a332:	2400      	movs	r4, #0
 800a334:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a338:	4628      	mov	r0, r5
 800a33a:	4798      	blx	r3
 800a33c:	2000      	movs	r0, #0
 800a33e:	e7e0      	b.n	800a302 <_raise_r+0x12>

0800a340 <raise>:
 800a340:	4b02      	ldr	r3, [pc, #8]	; (800a34c <raise+0xc>)
 800a342:	4601      	mov	r1, r0
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	f7ff bfd3 	b.w	800a2f0 <_raise_r>
 800a34a:	bf00      	nop
 800a34c:	20000010 	.word	0x20000010

0800a350 <_kill_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_kill_r+0x20>)
 800a354:	2300      	movs	r3, #0
 800a356:	4604      	mov	r4, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	f7f7 ff99 	bl	8002294 <_kill>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	d102      	bne.n	800a36c <_kill_r+0x1c>
 800a366:	682b      	ldr	r3, [r5, #0]
 800a368:	b103      	cbz	r3, 800a36c <_kill_r+0x1c>
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	bd38      	pop	{r3, r4, r5, pc}
 800a36e:	bf00      	nop
 800a370:	200007d4 	.word	0x200007d4

0800a374 <_getpid_r>:
 800a374:	f7f7 bf86 	b.w	8002284 <_getpid>

0800a378 <__sread>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	460c      	mov	r4, r1
 800a37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a380:	f000 f894 	bl	800a4ac <_read_r>
 800a384:	2800      	cmp	r0, #0
 800a386:	bfab      	itete	ge
 800a388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a38a:	89a3      	ldrhlt	r3, [r4, #12]
 800a38c:	181b      	addge	r3, r3, r0
 800a38e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a392:	bfac      	ite	ge
 800a394:	6563      	strge	r3, [r4, #84]	; 0x54
 800a396:	81a3      	strhlt	r3, [r4, #12]
 800a398:	bd10      	pop	{r4, pc}

0800a39a <__swrite>:
 800a39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	461f      	mov	r7, r3
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	05db      	lsls	r3, r3, #23
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	d505      	bpl.n	800a3b8 <__swrite+0x1e>
 800a3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f000 f868 	bl	800a488 <_lseek_r>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ce:	f000 b817 	b.w	800a400 <_write_r>

0800a3d2 <__sseek>:
 800a3d2:	b510      	push	{r4, lr}
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3da:	f000 f855 	bl	800a488 <_lseek_r>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	bf15      	itete	ne
 800a3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ee:	81a3      	strheq	r3, [r4, #12]
 800a3f0:	bf18      	it	ne
 800a3f2:	81a3      	strhne	r3, [r4, #12]
 800a3f4:	bd10      	pop	{r4, pc}

0800a3f6 <__sclose>:
 800a3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fa:	f000 b813 	b.w	800a424 <_close_r>
	...

0800a400 <_write_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d07      	ldr	r5, [pc, #28]	; (800a420 <_write_r+0x20>)
 800a404:	4604      	mov	r4, r0
 800a406:	4608      	mov	r0, r1
 800a408:	4611      	mov	r1, r2
 800a40a:	2200      	movs	r2, #0
 800a40c:	602a      	str	r2, [r5, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	f7f7 ff77 	bl	8002302 <_write>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_write_r+0x1e>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_write_r+0x1e>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	200007d4 	.word	0x200007d4

0800a424 <_close_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d06      	ldr	r5, [pc, #24]	; (800a440 <_close_r+0x1c>)
 800a428:	2300      	movs	r3, #0
 800a42a:	4604      	mov	r4, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	f7f7 ff83 	bl	800233a <_close>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_close_r+0x1a>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_close_r+0x1a>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	200007d4 	.word	0x200007d4

0800a444 <_fstat_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d07      	ldr	r5, [pc, #28]	; (800a464 <_fstat_r+0x20>)
 800a448:	2300      	movs	r3, #0
 800a44a:	4604      	mov	r4, r0
 800a44c:	4608      	mov	r0, r1
 800a44e:	4611      	mov	r1, r2
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	f7f7 ff7e 	bl	8002352 <_fstat>
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	d102      	bne.n	800a460 <_fstat_r+0x1c>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	b103      	cbz	r3, 800a460 <_fstat_r+0x1c>
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	bd38      	pop	{r3, r4, r5, pc}
 800a462:	bf00      	nop
 800a464:	200007d4 	.word	0x200007d4

0800a468 <_isatty_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d06      	ldr	r5, [pc, #24]	; (800a484 <_isatty_r+0x1c>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7f7 ff7d 	bl	8002372 <_isatty>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_isatty_r+0x1a>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_isatty_r+0x1a>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	200007d4 	.word	0x200007d4

0800a488 <_lseek_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d07      	ldr	r5, [pc, #28]	; (800a4a8 <_lseek_r+0x20>)
 800a48c:	4604      	mov	r4, r0
 800a48e:	4608      	mov	r0, r1
 800a490:	4611      	mov	r1, r2
 800a492:	2200      	movs	r2, #0
 800a494:	602a      	str	r2, [r5, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	f7f7 ff76 	bl	8002388 <_lseek>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_lseek_r+0x1e>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_lseek_r+0x1e>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	200007d4 	.word	0x200007d4

0800a4ac <_read_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_read_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f7 ff04 	bl	80022c8 <_read>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_read_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_read_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	200007d4 	.word	0x200007d4

0800a4d0 <_init>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	bf00      	nop
 800a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d6:	bc08      	pop	{r3}
 800a4d8:	469e      	mov	lr, r3
 800a4da:	4770      	bx	lr

0800a4dc <_fini>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	bf00      	nop
 800a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e2:	bc08      	pop	{r3}
 800a4e4:	469e      	mov	lr, r3
 800a4e6:	4770      	bx	lr
