
f303_gmg12864_30.06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b598  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  0800b738  0800b738  0001b738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c234  0800c234  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c234  0800c234  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c234  0800c234  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c234  0800c234  0001c234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c238  0800c238  0001c238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c23c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000624  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000808  20000808  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017494  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f27  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  0003a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  0003b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fd4  00000000  00000000  0003c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c62  00000000  00000000  0005f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce71b  00000000  00000000  00076316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144a31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c44  00000000  00000000  00144a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b720 	.word	0x0800b720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b720 	.word	0x0800b720

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <GMG12864_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Command - 8 бит данных.
	DC_set();
 8000d0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d16:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 8000d18:	1df9      	adds	r1, r7, #7
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <GMG12864_Send_command+0x40>)
 8000d22:	f003 fcf4 	bl	800470e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d26:	bf00      	nop
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <GMG12864_Send_command+0x40>)
 8000d2a:	f003 fe5e 	bl	80049ea <HAL_SPI_GetState>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d1f9      	bne.n	8000d28 <GMG12864_Send_command+0x24>
	DC_reset();
 8000d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d38:	2210      	movs	r2, #16
 8000d3a:	619a      	str	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200006c0 	.word	0x200006c0

08000d48 <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 8000d52:	1df9      	adds	r1, r7, #7
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <GMG12864_Send_data+0x30>)
 8000d5c:	f003 fcd7 	bl	800470e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d60:	bf00      	nop
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <GMG12864_Send_data+0x30>)
 8000d64:	f003 fe41 	bl	80049ea <HAL_SPI_GetState>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d1f9      	bne.n	8000d62 <GMG12864_Send_data+0x1a>
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200006c0 	.word	0x200006c0

08000d7c <GMG12864_Clean_Frame_buffer>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void GMG12864_Clean_Frame_buffer(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 8000d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d84:	2100      	movs	r1, #0
 8000d86:	4802      	ldr	r0, [pc, #8]	; (8000d90 <GMG12864_Clean_Frame_buffer+0x14>)
 8000d88:	f006 f89e 	bl	8006ec8 <memset>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000280 	.word	0x20000280

08000d94 <GMG12864_Init>:
/*------------------------Функция очистки буфера кадра-------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void GMG12864_Init(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	cs_set();
 8000d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da0:	619a      	str	r2, [r3, #24]
	RST_set();
 8000da2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000daa:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000dac:	200a      	movs	r0, #10
 8000dae:	f001 fd33 	bl	8002818 <HAL_Delay>
	RST_reset();
 8000db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000db6:	2202      	movs	r2, #2
 8000db8:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8000dba:	200a      	movs	r0, #10
 8000dbc:	f001 fd2c 	bl	8002818 <HAL_Delay>
	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
	GMG12864_Send_command(0xA2);
 8000dc0:	20a2      	movs	r0, #162	; 0xa2
 8000dc2:	f7ff ff9f 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f001 fd26 	bl	8002818 <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 8000dcc:	20a0      	movs	r0, #160	; 0xa0
 8000dce:	f7ff ff99 	bl	8000d04 <GMG12864_Send_command>
	GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 8000dd2:	20c8      	movs	r0, #200	; 0xc8
 8000dd4:	f7ff ff96 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f001 fd1d 	bl	8002818 <HAL_Delay>
	// делитель внутреннего резистора установлен на 7 (от 0..7)
	GMG12864_Send_command(0x20 | 0x7);    //Regulator Resistor Selection
 8000dde:	2027      	movs	r0, #39	; 0x27
 8000de0:	f7ff ff90 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f001 fd17 	bl	8002818 <HAL_Delay>
	// управление питанием, все внутренние блоки включены	(от 0..7)
	GMG12864_Send_command(0x28 | 0x7);
 8000dea:	202f      	movs	r0, #47	; 0x2f
 8000dec:	f7ff ff8a 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f001 fd11 	bl	8002818 <HAL_Delay>
	// войти в режим динамического контраста
	GMG12864_Send_command(0x81);    //Electronic Volume
 8000df6:	2081      	movs	r0, #129	; 0x81
 8000df8:	f7ff ff84 	bl	8000d04 <GMG12864_Send_command>
	GMG12864_Send_command(18);	// Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 8000dfc:	2012      	movs	r0, #18
 8000dfe:	f7ff ff81 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f001 fd08 	bl	8002818 <HAL_Delay>
	GMG12864_Send_command(0x40);
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	f7ff ff7b 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f001 fd02 	bl	8002818 <HAL_Delay>
	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	GMG12864_Send_command(0xAF);    		//Display on
 8000e14:	20af      	movs	r0, #175	; 0xaf
 8000e16:	f7ff ff75 	bl	8000d04 <GMG12864_Send_command>
	// Инвертирование экрана
	GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 8000e1a:	20a6      	movs	r0, #166	; 0xa6
 8000e1c:	f7ff ff72 	bl	8000d04 <GMG12864_Send_command>
	HAL_Delay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f001 fcf9 	bl	8002818 <HAL_Delay>
	cs_reset();
 8000e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	619a      	str	r2, [r3, #24]
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	80bb      	strh	r3, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 8000e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4a:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <GMG12864_Draw_pixel+0xd8>)
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	da55      	bge.n	8000efe <GMG12864_Draw_pixel+0xca>
 8000e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db51      	blt.n	8000efe <GMG12864_Draw_pixel+0xca>
 8000e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e5e:	4a2c      	ldr	r2, [pc, #176]	; (8000f10 <GMG12864_Draw_pixel+0xdc>)
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	4293      	cmp	r3, r2
 8000e64:	da4b      	bge.n	8000efe <GMG12864_Draw_pixel+0xca>
 8000e66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db47      	blt.n	8000efe <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 8000e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da00      	bge.n	8000e78 <GMG12864_Draw_pixel+0x44>
 8000e76:	3307      	adds	r3, #7
 8000e78:	10db      	asrs	r3, r3, #3
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <GMG12864_Draw_pixel+0xd8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	fb12 f303 	smulbb	r3, r2, r3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	81fb      	strh	r3, [r7, #14]

		if (color) {
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d018      	beq.n	8000ec8 <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ea2:	4259      	negs	r1, r3
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	f001 0107 	and.w	r1, r1, #7
 8000eac:	bf58      	it	pl
 8000eae:	424b      	negpl	r3, r1
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	b2d1      	uxtb	r1, r2
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000ec4:	54d1      	strb	r1, [r2, r3]
 8000ec6:	e01b      	b.n	8000f00 <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed4:	4259      	negs	r1, r3
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	f001 0107 	and.w	r1, r1, #7
 8000ede:	bf58      	it	pl
 8000ee0:	424b      	negpl	r3, r1
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	b25a      	sxtb	r2, r3
 8000ef4:	89fb      	ldrh	r3, [r7, #14]
 8000ef6:	b2d1      	uxtb	r1, r2
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <GMG12864_Draw_pixel+0xe0>)
 8000efa:	54d1      	strb	r1, [r2, r3]
 8000efc:	e000      	b.n	8000f00 <GMG12864_Draw_pixel+0xcc>
		return;
 8000efe:	bf00      	nop
		}
	}

}
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000001 	.word	0x20000001
 8000f14:	20000280 	.word	0x20000280

08000f18 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	cs_set();
 8000f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f26:	619a      	str	r2, [r3, #24]
	for (uint8_t y = 0; y < 8; y++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e027      	b.n	8000f7e <GMG12864_Update+0x66>
		ST7565_SetX(0);
 8000f2e:	2010      	movs	r0, #16
 8000f30:	f7ff fee8 	bl	8000d04 <GMG12864_Send_command>
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fee5 	bl	8000d04 <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fed9 	bl	8000d04 <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	e00b      	b.n	8000f70 <GMG12864_Update+0x58>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <GMG12864_Update+0x7c>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff feef 	bl	8000d48 <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	71bb      	strb	r3, [r7, #6]
 8000f70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	daef      	bge.n	8000f58 <GMG12864_Update+0x40>
	for (uint8_t y = 0; y < 8; y++) {
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d9d4      	bls.n	8000f2e <GMG12864_Update+0x16>
		}
	}
	cs_reset();
 8000f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f88:	2201      	movs	r2, #1
 8000f8a:	619a      	str	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000280 	.word	0x20000280

08000f98 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3305      	adds	r3, #5
 8000fbe:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e086      	b.n	80010d4 <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d127      	bne.n	800101e <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73bb      	strb	r3, [r7, #14]
 8000fd2:	e020      	b.n	8001016 <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	b218      	sxth	r0, r3
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff ff20 	bl	8000e34 <GMG12864_Draw_pixel>
 8000ff4:	e00c      	b.n	8001010 <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	b218      	sxth	r0, r3
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	b21b      	sxth	r3, r3
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff ff12 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	3301      	adds	r3, #1
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	2b06      	cmp	r3, #6
 800101a:	d9db      	bls.n	8000fd4 <GMG12864_Print_symbol_5x7+0x3c>
 800101c:	e057      	b.n	80010ce <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800101e:	2300      	movs	r3, #0
 8001020:	737b      	strb	r3, [r7, #13]
 8001022:	e051      	b.n	80010c8 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	441a      	add	r2, r3
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	441a      	add	r2, r3
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <GMG12864_Print_symbol_5x7+0x150>)
 8001036:	5cd3      	ldrb	r3, [r2, r3]
 8001038:	461a      	mov	r2, r3
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	fa42 f303 	asr.w	r3, r2, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d01e      	beq.n	8001086 <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00d      	beq.n	800106a <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	b218      	sxth	r0, r3
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	b29a      	uxth	r2, r3
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	b29b      	uxth	r3, r3
 800105a:	4413      	add	r3, r2
 800105c:	b29b      	uxth	r3, r3
 800105e:	b21b      	sxth	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fee6 	bl	8000e34 <GMG12864_Draw_pixel>
 8001068:	e02b      	b.n	80010c2 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	b218      	sxth	r0, r3
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	b29a      	uxth	r2, r3
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	b21b      	sxth	r3, r3
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fed8 	bl	8000e34 <GMG12864_Draw_pixel>
 8001084:	e01d      	b.n	80010c2 <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00d      	beq.n	80010a8 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b218      	sxth	r0, r3
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	b29a      	uxth	r2, r3
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21b      	sxth	r3, r3
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fec7 	bl	8000e34 <GMG12864_Draw_pixel>
 80010a6:	e00c      	b.n	80010c2 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	b218      	sxth	r0, r3
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff feb9 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	3301      	adds	r3, #1
 80010c6:	737b      	strb	r3, [r7, #13]
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d9aa      	bls.n	8001024 <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f67f af74 	bls.w	8000fc6 <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	0800ba1c 	.word	0x0800ba1c

080010ec <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4623      	mov	r3, r4
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	4603      	mov	r3, r0
 8001100:	71bb      	strb	r3, [r7, #6]
 8001102:	460b      	mov	r3, r1
 8001104:	80bb      	strh	r3, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	3303      	adds	r3, #3
 8001112:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8001114:	7b3b      	ldrb	r3, [r7, #12]
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e086      	b.n	8001228 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	429a      	cmp	r2, r3
 8001120:	d127      	bne.n	8001172 <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001122:	2300      	movs	r3, #0
 8001124:	73bb      	strb	r3, [r7, #14]
 8001126:	e020      	b.n	800116a <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00d      	beq.n	800114a <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b218      	sxth	r0, r3
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b29b      	uxth	r3, r3
 800113e:	b21b      	sxth	r3, r3
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fe76 	bl	8000e34 <GMG12864_Draw_pixel>
 8001148:	e00c      	b.n	8001164 <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	b218      	sxth	r0, r3
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	b29a      	uxth	r2, r3
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fe68 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	3301      	adds	r3, #1
 8001168:	73bb      	strb	r3, [r7, #14]
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d9db      	bls.n	8001128 <GMG12864_Print_symbol_3x5+0x3c>
 8001170:	e057      	b.n	8001222 <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001172:	2300      	movs	r3, #0
 8001174:	737b      	strb	r3, [r7, #13]
 8001176:	e051      	b.n	800121c <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 8001178:	88ba      	ldrh	r2, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	441a      	add	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	441a      	add	r2, r3
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	4a2c      	ldr	r2, [pc, #176]	; (800123c <GMG12864_Print_symbol_3x5+0x150>)
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	461a      	mov	r2, r3
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	fa42 f303 	asr.w	r3, r2, r3
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01e      	beq.n	80011da <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00d      	beq.n	80011be <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	b218      	sxth	r0, r3
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fe3c 	bl	8000e34 <GMG12864_Draw_pixel>
 80011bc:	e02b      	b.n	8001216 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	b218      	sxth	r0, r3
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fe2e 	bl	8000e34 <GMG12864_Draw_pixel>
 80011d8:	e01d      	b.n	8001216 <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00d      	beq.n	80011fc <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b218      	sxth	r0, r3
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fe1d 	bl	8000e34 <GMG12864_Draw_pixel>
 80011fa:	e00c      	b.n	8001216 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	b218      	sxth	r0, r3
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	b29a      	uxth	r2, r3
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b29b      	uxth	r3, r3
 800120c:	b21b      	sxth	r3, r3
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fe0f 	bl	8000e34 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	3301      	adds	r3, #1
 800121a:	737b      	strb	r3, [r7, #13]
 800121c:	7b7b      	ldrb	r3, [r7, #13]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d9aa      	bls.n	8001178 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	3301      	adds	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	429a      	cmp	r2, r3
 800122e:	f67f af74 	bls.w	800111a <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	0800b834 	.word	0x0800b834

08001240 <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	4604      	mov	r4, r0
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	4603      	mov	r3, r0
 8001254:	71bb      	strb	r3, [r7, #6]
 8001256:	460b      	mov	r3, r1
 8001258:	717b      	strb	r3, [r7, #5]
 800125a:	4613      	mov	r3, r2
 800125c:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	e17e      	b.n	800156a <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2bbf      	cmp	r3, #191	; 0xbf
 8001276:	d841      	bhi.n	80012fc <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]
 8001282:	e16f      	b.n	8001564 <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	81fb      	strh	r3, [r7, #14]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d117      	bne.n	80012c4 <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 8001294:	793b      	ldrb	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	3b20      	subs	r3, #32
 800129e:	b29a      	uxth	r2, r3
 80012a0:	79b9      	ldrb	r1, [r7, #6]
 80012a2:	79f8      	ldrb	r0, [r7, #7]
 80012a4:	2301      	movs	r3, #1
 80012a6:	f7ff ff21 	bl	80010ec <GMG12864_Print_symbol_3x5>
 80012aa:	e007      	b.n	80012bc <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	3b20      	subs	r3, #32
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	79b9      	ldrb	r1, [r7, #6]
 80012b4:	79f8      	ldrb	r0, [r7, #7]
 80012b6:	2300      	movs	r3, #0
 80012b8:	f7ff ff18 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3304      	adds	r3, #4
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e14f      	b.n	8001564 <GMG12864_Decode_UTF8+0x324>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	f040 814c 	bne.w	8001564 <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d008      	beq.n	80012e4 <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	3b20      	subs	r3, #32
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	79b9      	ldrb	r1, [r7, #6]
 80012da:	79f8      	ldrb	r0, [r7, #7]
 80012dc:	2301      	movs	r3, #1
 80012de:	f7ff fe5b 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 80012e2:	e007      	b.n	80012f4 <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	3b20      	subs	r3, #32
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	79b9      	ldrb	r1, [r7, #6]
 80012ec:	79f8      	ldrb	r0, [r7, #7]
 80012ee:	2300      	movs	r3, #0
 80012f0:	f7ff fe52 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	3306      	adds	r3, #6
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	e133      	b.n	8001564 <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	3301      	adds	r3, #1
 800130c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800130e:	440b      	add	r3, r1
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8001320:	4293      	cmp	r3, r2
 8001322:	d843      	bhi.n	80013ac <GMG12864_Decode_UTF8+0x16c>
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	f24d 0281 	movw	r2, #53377	; 0xd081
 800132a:	4293      	cmp	r3, r2
 800132c:	d93e      	bls.n	80013ac <GMG12864_Decode_UTF8+0x16c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800132e:	797b      	ldrb	r3, [r7, #5]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001340:	330f      	adds	r3, #15
 8001342:	b29a      	uxth	r2, r3
 8001344:	79b9      	ldrb	r1, [r7, #6]
 8001346:	79f8      	ldrb	r0, [r7, #7]
 8001348:	2301      	movs	r3, #1
 800134a:	f7ff fecf 	bl	80010ec <GMG12864_Print_symbol_3x5>
 800134e:	e009      	b.n	8001364 <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001356:	330f      	adds	r3, #15
 8001358:	b29a      	uxth	r2, r3
 800135a:	79b9      	ldrb	r1, [r7, #6]
 800135c:	79f8      	ldrb	r0, [r7, #7]
 800135e:	2300      	movs	r3, #0
 8001360:	f7ff fec4 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	3304      	adds	r3, #4
 8001368:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800136a:	e0f8      	b.n	800155e <GMG12864_Decode_UTF8+0x31e>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2b01      	cmp	r3, #1
 8001370:	f040 80f5 	bne.w	800155e <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001380:	330f      	adds	r3, #15
 8001382:	b29a      	uxth	r2, r3
 8001384:	79b9      	ldrb	r1, [r7, #6]
 8001386:	79f8      	ldrb	r0, [r7, #7]
 8001388:	2301      	movs	r3, #1
 800138a:	f7ff fe05 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 800138e:	e009      	b.n	80013a4 <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 8001390:	89fb      	ldrh	r3, [r7, #14]
 8001392:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8001396:	330f      	adds	r3, #15
 8001398:	b29a      	uxth	r2, r3
 800139a:	79b9      	ldrb	r1, [r7, #6]
 800139c:	79f8      	ldrb	r0, [r7, #7]
 800139e:	2300      	movs	r3, #0
 80013a0:	f7ff fdfa 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	3306      	adds	r3, #6
 80013a8:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80013aa:	e0d8      	b.n	800155e <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	f24d 0281 	movw	r2, #53377	; 0xd081
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12e      	bne.n	8001414 <GMG12864_Decode_UTF8+0x1d4>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d113      	bne.n	80013e4 <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 80013bc:	793b      	ldrb	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80013c2:	79b9      	ldrb	r1, [r7, #6]
 80013c4:	79f8      	ldrb	r0, [r7, #7]
 80013c6:	2301      	movs	r3, #1
 80013c8:	229f      	movs	r2, #159	; 0x9f
 80013ca:	f7ff fe8f 	bl	80010ec <GMG12864_Print_symbol_3x5>
 80013ce:	e005      	b.n	80013dc <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 80013d0:	79b9      	ldrb	r1, [r7, #6]
 80013d2:	79f8      	ldrb	r0, [r7, #7]
 80013d4:	2300      	movs	r3, #0
 80013d6:	229f      	movs	r2, #159	; 0x9f
 80013d8:	f7ff fe88 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3304      	adds	r3, #4
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e0bd      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80013e4:	797b      	ldrb	r3, [r7, #5]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	f040 80ba 	bne.w	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80013ec:	793b      	ldrb	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 80013f2:	79b9      	ldrb	r1, [r7, #6]
 80013f4:	79f8      	ldrb	r0, [r7, #7]
 80013f6:	2301      	movs	r3, #1
 80013f8:	229f      	movs	r2, #159	; 0x9f
 80013fa:	f7ff fdcd 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 80013fe:	e005      	b.n	800140c <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8001400:	79b9      	ldrb	r1, [r7, #6]
 8001402:	79f8      	ldrb	r0, [r7, #7]
 8001404:	2300      	movs	r3, #0
 8001406:	229f      	movs	r2, #159	; 0x9f
 8001408:	f7ff fdc6 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3306      	adds	r3, #6
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e0a5      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	f24d 1291 	movw	r2, #53649	; 0xd191
 800141a:	4293      	cmp	r3, r2
 800141c:	d12e      	bne.n	800147c <GMG12864_Decode_UTF8+0x23c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d113      	bne.n	800144c <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 8001424:	793b      	ldrb	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 800142a:	79b9      	ldrb	r1, [r7, #6]
 800142c:	79f8      	ldrb	r0, [r7, #7]
 800142e:	2301      	movs	r3, #1
 8001430:	22a0      	movs	r2, #160	; 0xa0
 8001432:	f7ff fe5b 	bl	80010ec <GMG12864_Print_symbol_3x5>
 8001436:	e005      	b.n	8001444 <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001438:	79b9      	ldrb	r1, [r7, #6]
 800143a:	79f8      	ldrb	r0, [r7, #7]
 800143c:	2300      	movs	r3, #0
 800143e:	22a0      	movs	r2, #160	; 0xa0
 8001440:	f7ff fe54 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	3304      	adds	r3, #4
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e089      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 800144c:	797b      	ldrb	r3, [r7, #5]
 800144e:	2b01      	cmp	r3, #1
 8001450:	f040 8086 	bne.w	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8001454:	793b      	ldrb	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 800145a:	79b9      	ldrb	r1, [r7, #6]
 800145c:	79f8      	ldrb	r0, [r7, #7]
 800145e:	2301      	movs	r3, #1
 8001460:	22a0      	movs	r2, #160	; 0xa0
 8001462:	f7ff fd99 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 8001466:	e005      	b.n	8001474 <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8001468:	79b9      	ldrb	r1, [r7, #6]
 800146a:	79f8      	ldrb	r0, [r7, #7]
 800146c:	2300      	movs	r3, #0
 800146e:	22a0      	movs	r2, #160	; 0xa0
 8001470:	f7ff fd92 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	3306      	adds	r3, #6
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	e071      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 8001482:	4293      	cmp	r3, r2
 8001484:	d12d      	bne.n	80014e2 <GMG12864_Decode_UTF8+0x2a2>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8001486:	797b      	ldrb	r3, [r7, #5]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d113      	bne.n	80014b4 <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 800148c:	793b      	ldrb	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8001492:	79b9      	ldrb	r1, [r7, #6]
 8001494:	79f8      	ldrb	r0, [r7, #7]
 8001496:	2301      	movs	r3, #1
 8001498:	22a1      	movs	r2, #161	; 0xa1
 800149a:	f7ff fe27 	bl	80010ec <GMG12864_Print_symbol_3x5>
 800149e:	e005      	b.n	80014ac <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80014a0:	79b9      	ldrb	r1, [r7, #6]
 80014a2:	79f8      	ldrb	r0, [r7, #7]
 80014a4:	2300      	movs	r3, #0
 80014a6:	22a1      	movs	r2, #161	; 0xa1
 80014a8:	f7ff fe20 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	3304      	adds	r3, #4
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e055      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80014b4:	797b      	ldrb	r3, [r7, #5]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d152      	bne.n	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80014ba:	793b      	ldrb	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 80014c0:	79b9      	ldrb	r1, [r7, #6]
 80014c2:	79f8      	ldrb	r0, [r7, #7]
 80014c4:	2301      	movs	r3, #1
 80014c6:	22a1      	movs	r2, #161	; 0xa1
 80014c8:	f7ff fd66 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 80014cc:	e005      	b.n	80014da <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80014ce:	79b9      	ldrb	r1, [r7, #6]
 80014d0:	79f8      	ldrb	r0, [r7, #7]
 80014d2:	2300      	movs	r3, #0
 80014d4:	22a1      	movs	r2, #161	; 0xa1
 80014d6:	f7ff fd5f 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3306      	adds	r3, #6
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	e03e      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80014e2:	797b      	ldrb	r3, [r7, #5]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11b      	bne.n	8001520 <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 80014e8:	793b      	ldrb	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80014f4:	330f      	adds	r3, #15
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	79b9      	ldrb	r1, [r7, #6]
 80014fa:	79f8      	ldrb	r0, [r7, #7]
 80014fc:	2301      	movs	r3, #1
 80014fe:	f7ff fdf5 	bl	80010ec <GMG12864_Print_symbol_3x5>
 8001502:	e009      	b.n	8001518 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800150a:	330f      	adds	r3, #15
 800150c:	b29a      	uxth	r2, r3
 800150e:	79b9      	ldrb	r1, [r7, #6]
 8001510:	79f8      	ldrb	r0, [r7, #7]
 8001512:	2300      	movs	r3, #0
 8001514:	f7ff fdea 	bl	80010ec <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3304      	adds	r3, #4
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e01f      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8001520:	797b      	ldrb	r3, [r7, #5]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d11c      	bne.n	8001560 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8001526:	793b      	ldrb	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00a      	beq.n	8001542 <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800152c:	89fb      	ldrh	r3, [r7, #14]
 800152e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001532:	330f      	adds	r3, #15
 8001534:	b29a      	uxth	r2, r3
 8001536:	79b9      	ldrb	r1, [r7, #6]
 8001538:	79f8      	ldrb	r0, [r7, #7]
 800153a:	2301      	movs	r3, #1
 800153c:	f7ff fd2c 	bl	8000f98 <GMG12864_Print_symbol_5x7>
 8001540:	e009      	b.n	8001556 <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8001548:	330f      	adds	r3, #15
 800154a:	b29a      	uxth	r2, r3
 800154c:	79b9      	ldrb	r1, [r7, #6]
 800154e:	79f8      	ldrb	r0, [r7, #7]
 8001550:	2300      	movs	r3, #0
 8001552:	f7ff fd21 	bl	8000f98 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3306      	adds	r3, #6
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	e000      	b.n	8001560 <GMG12864_Decode_UTF8+0x320>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800155e:	bf00      	nop
				}
			}
			flag_block = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	3301      	adds	r3, #1
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	f63f ae79 	bhi.w	800126c <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <MX_GPIO_Init+0x160>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	4a3f      	ldr	r2, [pc, #252]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6153      	str	r3, [r2, #20]
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x160>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vref_3_3_GPIO_Port, Vref_3_3_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	483a      	ldr	r0, [pc, #232]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001600:	f001 fc40 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin|user_led_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2133      	movs	r1, #51	; 0x33
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f001 fc3a 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8001610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001616:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4830      	ldr	r0, [pc, #192]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001628:	f001 faa2 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CLK_Pin|DT_Pin;
 800162c:	2303      	movs	r3, #3
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001630:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4829      	ldr	r0, [pc, #164]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001642:	f001 fa95 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001646:	2304      	movs	r3, #4
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800164a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001650:	2301      	movs	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4823      	ldr	r0, [pc, #140]	; (80016e8 <MX_GPIO_Init+0x164>)
 800165c:	f001 fa88 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Vref_3_3_Pin;
 8001660:	2308      	movs	r3, #8
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Vref_3_3_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <MX_GPIO_Init+0x164>)
 8001678:	f001 fa7a 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin|user_led_Pin;
 800167c:	2333      	movs	r3, #51	; 0x33
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f001 fa6b 	bl	8002b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2006      	movs	r0, #6
 80016a0:	f001 f9b9 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016a4:	2006      	movs	r0, #6
 80016a6:	f001 f9d2 	bl	8002a4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2007      	movs	r0, #7
 80016b0:	f001 f9b1 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016b4:	2007      	movs	r0, #7
 80016b6:	f001 f9ca 	bl	8002a4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2008      	movs	r0, #8
 80016c0:	f001 f9a9 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80016c4:	2008      	movs	r0, #8
 80016c6:	f001 f9c2 	bl	8002a4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2028      	movs	r0, #40	; 0x28
 80016d0:	f001 f9a1 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d4:	2028      	movs	r0, #40	; 0x28
 80016d6:	f001 f9ba 	bl	8002a4e <HAL_NVIC_EnableIRQ>

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f2:	f001 f82b 	bl	800274c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f6:	f000 f9b5 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fa:	f7ff ff43 	bl	8001584 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016fe:	f000 fd0d 	bl	800211c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001702:	f000 ff7f 	bl	8002604 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001706:	f000 ff07 	bl	8002518 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800170a:	2064      	movs	r0, #100	; 0x64
 800170c:	f001 f884 	bl	8002818 <HAL_Delay>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001710:	4bbe      	ldr	r3, [pc, #760]	; (8001a0c <main+0x320>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4bbd      	ldr	r3, [pc, #756]	; (8001a0c <main+0x320>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0210 	orr.w	r2, r2, #16
 800171e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, rx_uart_buffer, rx_uart_buffer_size);
 8001720:	221e      	movs	r2, #30
 8001722:	49bb      	ldr	r1, [pc, #748]	; (8001a10 <main+0x324>)
 8001724:	48b9      	ldr	r0, [pc, #740]	; (8001a0c <main+0x320>)
 8001726:	f004 f853 	bl	80057d0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800172a:	48ba      	ldr	r0, [pc, #744]	; (8001a14 <main+0x328>)
 800172c:	f003 fb28 	bl	8004d80 <HAL_TIM_Base_Start_IT>
  t_led = HAL_GetTick();
 8001730:	f001 f866 	bl	8002800 <HAL_GetTick>
 8001734:	4603      	mov	r3, r0
 8001736:	4ab8      	ldr	r2, [pc, #736]	; (8001a18 <main+0x32c>)
 8001738:	6013      	str	r3, [r2, #0]
  GMG12864_Init();
 800173a:	f7ff fb2b 	bl	8000d94 <GMG12864_Init>
  GPIOC -> BSRR = GPIO_PIN_3;
 800173e:	4bb7      	ldr	r3, [pc, #732]	; (8001a1c <main+0x330>)
 8001740:	2208      	movs	r2, #8
 8001742:	619a      	str	r2, [r3, #24]
  sprintf(tx_buffer, "Hello world");
 8001744:	49b6      	ldr	r1, [pc, #728]	; (8001a20 <main+0x334>)
 8001746:	48b7      	ldr	r0, [pc, #732]	; (8001a24 <main+0x338>)
 8001748:	f006 fa46 	bl	8007bd8 <siprintf>
  GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800174c:	4bb5      	ldr	r3, [pc, #724]	; (8001a24 <main+0x338>)
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2300      	movs	r3, #0
 8001752:	2201      	movs	r2, #1
 8001754:	2100      	movs	r1, #0
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fd72 	bl	8001240 <GMG12864_Decode_UTF8>
  GMG12864_Update();
 800175c:	f7ff fbdc 	bl	8000f18 <GMG12864_Update>
  GMG12864_Clean_Frame_buffer();
 8001760:	f7ff fb0c 	bl	8000d7c <GMG12864_Clean_Frame_buffer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx_uart_buffer_ready)
 8001764:	4bb0      	ldr	r3, [pc, #704]	; (8001a28 <main+0x33c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <main+0x9c>
	  {
		  char tx_uart_buffer[] = "Interrupt!\r\n";
 800176c:	4baf      	ldr	r3, [pc, #700]	; (8001a2c <main+0x340>)
 800176e:	463c      	mov	r4, r7
 8001770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001772:	c407      	stmia	r4!, {r0, r1, r2}
 8001774:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit_IT(&huart2, tx_uart_buffer, (sizeof(tx_uart_buffer) / sizeof(tx_uart_buffer[0])));
 8001776:	463b      	mov	r3, r7
 8001778:	220d      	movs	r2, #13
 800177a:	4619      	mov	r1, r3
 800177c:	48a3      	ldr	r0, [pc, #652]	; (8001a0c <main+0x320>)
 800177e:	f003 ffb9 	bl	80056f4 <HAL_UART_Transmit_IT>
		  rx_uart_buffer_ready = 0;
 8001782:	4ba9      	ldr	r3, [pc, #676]	; (8001a28 <main+0x33c>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
	  }
	  if(stage_menu == 0)
 8001788:	4ba9      	ldr	r3, [pc, #676]	; (8001a30 <main+0x344>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	f083 0301 	eor.w	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d010      	beq.n	80017b8 <main+0xcc>
	  {
		  upd_disp();
 8001796:	f000 fc6f 	bl	8002078 <upd_disp>
		  print_first_line();
 800179a:	f000 fbc1 	bl	8001f20 <print_first_line>
		  print_second_line();
 800179e:	f000 fbd7 	bl	8001f50 <print_second_line>
		  print_third_line();
 80017a2:	f000 fbed 	bl	8001f80 <print_third_line>
		  print_fourth_line();
 80017a6:	f000 fc03 	bl	8001fb0 <print_fourth_line>
		  print_fifth_line();
 80017aa:	f000 fc19 	bl	8001fe0 <print_fifth_line>
		  print_sixth_line();
 80017ae:	f000 fc2f 	bl	8002010 <print_sixth_line>
		  pointer_write();
 80017b2:	f000 fc45 	bl	8002040 <pointer_write>
 80017b6:	e0f8      	b.n	80019aa <main+0x2be>
	  }
	  else if(stage_menu)
 80017b8:	4b9d      	ldr	r3, [pc, #628]	; (8001a30 <main+0x344>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80f1 	beq.w	80019a4 <main+0x2b8>
	  {
		  switch(number_str)
 80017c2:	4b9c      	ldr	r3, [pc, #624]	; (8001a34 <main+0x348>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b32      	cmp	r3, #50	; 0x32
 80017c8:	f300 80ef 	bgt.w	80019aa <main+0x2be>
 80017cc:	2b14      	cmp	r3, #20
 80017ce:	da04      	bge.n	80017da <main+0xee>
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d047      	beq.n	8001864 <main+0x178>
 80017d4:	2b0a      	cmp	r3, #10
 80017d6:	d06c      	beq.n	80018b2 <main+0x1c6>
 80017d8:	e0e7      	b.n	80019aa <main+0x2be>
 80017da:	3b14      	subs	r3, #20
 80017dc:	2b1e      	cmp	r3, #30
 80017de:	f200 80e4 	bhi.w	80019aa <main+0x2be>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <main+0xfc>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	08001917 	.word	0x08001917
 80017ec:	080019ab 	.word	0x080019ab
 80017f0:	080019ab 	.word	0x080019ab
 80017f4:	080019ab 	.word	0x080019ab
 80017f8:	080019ab 	.word	0x080019ab
 80017fc:	080019ab 	.word	0x080019ab
 8001800:	080019ab 	.word	0x080019ab
 8001804:	080019ab 	.word	0x080019ab
 8001808:	080019ab 	.word	0x080019ab
 800180c:	080019ab 	.word	0x080019ab
 8001810:	0800193f 	.word	0x0800193f
 8001814:	080019ab 	.word	0x080019ab
 8001818:	080019ab 	.word	0x080019ab
 800181c:	080019ab 	.word	0x080019ab
 8001820:	080019ab 	.word	0x080019ab
 8001824:	080019ab 	.word	0x080019ab
 8001828:	080019ab 	.word	0x080019ab
 800182c:	080019ab 	.word	0x080019ab
 8001830:	080019ab 	.word	0x080019ab
 8001834:	080019ab 	.word	0x080019ab
 8001838:	08001961 	.word	0x08001961
 800183c:	080019ab 	.word	0x080019ab
 8001840:	080019ab 	.word	0x080019ab
 8001844:	080019ab 	.word	0x080019ab
 8001848:	080019ab 	.word	0x080019ab
 800184c:	080019ab 	.word	0x080019ab
 8001850:	080019ab 	.word	0x080019ab
 8001854:	080019ab 	.word	0x080019ab
 8001858:	080019ab 	.word	0x080019ab
 800185c:	080019ab 	.word	0x080019ab
 8001860:	08001983 	.word	0x08001983
		  {
		  case 0:
				GMG12864_Clean_Frame_buffer();
 8001864:	f7ff fa8a 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				if (!flag_led)
 8001868:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <main+0x34c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00e      	beq.n	8001894 <main+0x1a8>
				{
					sprintf(tx_buffer, "User led is on");
 8001876:	4971      	ldr	r1, [pc, #452]	; (8001a3c <main+0x350>)
 8001878:	486a      	ldr	r0, [pc, #424]	; (8001a24 <main+0x338>)
 800187a:	f006 f9ad 	bl	8007bd8 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800187e:	4b69      	ldr	r3, [pc, #420]	; (8001a24 <main+0x338>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	2201      	movs	r2, #1
 8001886:	2100      	movs	r1, #0
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fcd9 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 800188e:	f7ff fb43 	bl	8000f18 <GMG12864_Update>
				{
					sprintf(tx_buffer, "User led is off");
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
					GMG12864_Update();
				}
				break;
 8001892:	e08a      	b.n	80019aa <main+0x2be>
					sprintf(tx_buffer, "User led is off");
 8001894:	496a      	ldr	r1, [pc, #424]	; (8001a40 <main+0x354>)
 8001896:	4863      	ldr	r0, [pc, #396]	; (8001a24 <main+0x338>)
 8001898:	f006 f99e 	bl	8007bd8 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800189c:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <main+0x338>)
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2300      	movs	r3, #0
 80018a2:	2201      	movs	r2, #1
 80018a4:	2100      	movs	r1, #0
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fcca 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 80018ac:	f7ff fb34 	bl	8000f18 <GMG12864_Update>
				break;
 80018b0:	e07b      	b.n	80019aa <main+0x2be>
		  case 10:
				if(tim4_flag == 0)
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <main+0x358>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	f083 0301 	eor.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d012      	beq.n	80018e6 <main+0x1fa>
				{
					GMG12864_Clean_Frame_buffer();
 80018c0:	f7ff fa5c 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
					sprintf(tx_buffer, "tim4_counter is %d", tim4_counter);
 80018c4:	4b60      	ldr	r3, [pc, #384]	; (8001a48 <main+0x35c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4960      	ldr	r1, [pc, #384]	; (8001a4c <main+0x360>)
 80018cc:	4855      	ldr	r0, [pc, #340]	; (8001a24 <main+0x338>)
 80018ce:	f006 f983 	bl	8007bd8 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 80018d2:	4b54      	ldr	r3, [pc, #336]	; (8001a24 <main+0x338>)
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	2201      	movs	r2, #1
 80018da:	2100      	movs	r1, #0
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fcaf 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 80018e2:	f7ff fb19 	bl	8000f18 <GMG12864_Update>
				}
				if(tim4_counter >= 252)
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <main+0x35c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2bfb      	cmp	r3, #251	; 0xfb
 80018ec:	d95c      	bls.n	80019a8 <main+0x2bc>
				{
					tim4_flag = 1;
 80018ee:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <main+0x358>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
					GMG12864_Clean_Frame_buffer();
 80018f4:	f7ff fa42 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
					sprintf(tx_buffer, "Ok!");
 80018f8:	4955      	ldr	r1, [pc, #340]	; (8001a50 <main+0x364>)
 80018fa:	484a      	ldr	r0, [pc, #296]	; (8001a24 <main+0x338>)
 80018fc:	f006 f96c 	bl	8007bd8 <siprintf>
					GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 8001900:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <main+0x338>)
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	2201      	movs	r2, #1
 8001908:	2100      	movs	r1, #0
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fc98 	bl	8001240 <GMG12864_Decode_UTF8>
					GMG12864_Update();
 8001910:	f7ff fb02 	bl	8000f18 <GMG12864_Update>
				}
				break;
 8001914:	e048      	b.n	80019a8 <main+0x2bc>
		  case 20:
				GMG12864_Clean_Frame_buffer();
 8001916:	f7ff fa31 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "UART speed %d", (huart2.Init.BaudRate));
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <main+0x320>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	494c      	ldr	r1, [pc, #304]	; (8001a54 <main+0x368>)
 8001922:	4840      	ldr	r0, [pc, #256]	; (8001a24 <main+0x338>)
 8001924:	f006 f958 	bl	8007bd8 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 8001928:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <main+0x338>)
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	2201      	movs	r2, #1
 8001930:	2100      	movs	r1, #0
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff fc84 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 8001938:	f7ff faee 	bl	8000f18 <GMG12864_Update>
				break;
 800193c:	e035      	b.n	80019aa <main+0x2be>
		  case 30:
				GMG12864_Clean_Frame_buffer();
 800193e:	f7ff fa1d 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "Parameters fourth str");
 8001942:	4945      	ldr	r1, [pc, #276]	; (8001a58 <main+0x36c>)
 8001944:	4837      	ldr	r0, [pc, #220]	; (8001a24 <main+0x338>)
 8001946:	f006 f947 	bl	8007bd8 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <main+0x338>)
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	2201      	movs	r2, #1
 8001952:	2100      	movs	r1, #0
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fc73 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 800195a:	f7ff fadd 	bl	8000f18 <GMG12864_Update>
				break;
 800195e:	e024      	b.n	80019aa <main+0x2be>
		  case 40:
				GMG12864_Clean_Frame_buffer();
 8001960:	f7ff fa0c 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "Parameters fifht str");
 8001964:	493d      	ldr	r1, [pc, #244]	; (8001a5c <main+0x370>)
 8001966:	482f      	ldr	r0, [pc, #188]	; (8001a24 <main+0x338>)
 8001968:	f006 f936 	bl	8007bd8 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <main+0x338>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2300      	movs	r3, #0
 8001972:	2201      	movs	r2, #1
 8001974:	2100      	movs	r1, #0
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff fc62 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 800197c:	f7ff facc 	bl	8000f18 <GMG12864_Update>
				break;
 8001980:	e013      	b.n	80019aa <main+0x2be>
		  case 50:
				GMG12864_Clean_Frame_buffer();
 8001982:	f7ff f9fb 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
				sprintf(tx_buffer, "Parameters sixth str");
 8001986:	4936      	ldr	r1, [pc, #216]	; (8001a60 <main+0x374>)
 8001988:	4826      	ldr	r0, [pc, #152]	; (8001a24 <main+0x338>)
 800198a:	f006 f925 	bl	8007bd8 <siprintf>
				GMG12864_Decode_UTF8(0, 0, 1, 0, tx_buffer);
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <main+0x338>)
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	2201      	movs	r2, #1
 8001996:	2100      	movs	r1, #0
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fc51 	bl	8001240 <GMG12864_Decode_UTF8>
				GMG12864_Update();
 800199e:	f7ff fabb 	bl	8000f18 <GMG12864_Update>
				break;
 80019a2:	e002      	b.n	80019aa <main+0x2be>
		  }
	  }
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <main+0x2be>
				break;
 80019a8:	bf00      	nop
	  }
	  else
	  {
		  GPIOA -> BSRR = (uint32_t)user_led_Pin << 16;
	  }*/
	  if(HAL_GetTick() - t_led > 1000)
 80019aa:	f000 ff29 	bl	8002800 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <main+0x32c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ba:	f67f aed3 	bls.w	8001764 <main+0x78>
	  {
		  t_led = HAL_GetTick();
 80019be:	f000 ff1f 	bl	8002800 <HAL_GetTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <main+0x32c>)
 80019c6:	6013      	str	r3, [r2, #0]
		  flag_led = !flag_led;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <main+0x34c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f083 0301 	eor.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <main+0x34c>)
 80019e4:	701a      	strb	r2, [r3, #0]
		  if(!flag_led)
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <main+0x34c>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	f083 0301 	eor.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <main+0x312>
		  {
			  GPIOA -> BSRR = user_led_Pin;
 80019f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019f8:	2220      	movs	r2, #32
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	e6b2      	b.n	8001764 <main+0x78>
		  }
		  else
		  {
			  GPIOA -> BSRR = (uint32_t)user_led_Pin << 16;
 80019fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a06:	619a      	str	r2, [r3, #24]
	  if(rx_uart_buffer_ready)
 8001a08:	e6ac      	b.n	8001764 <main+0x78>
 8001a0a:	bf00      	nop
 8001a0c:	20000770 	.word	0x20000770
 8001a10:	20000680 	.word	0x20000680
 8001a14:	20000724 	.word	0x20000724
 8001a18:	200006a8 	.word	0x200006a8
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	0800b738 	.word	0x0800b738
 8001a24:	20000200 	.word	0x20000200
 8001a28:	200006a0 	.word	0x200006a0
 8001a2c:	0800b7d4 	.word	0x0800b7d4
 8001a30:	200006a4 	.word	0x200006a4
 8001a34:	200006a3 	.word	0x200006a3
 8001a38:	200006a2 	.word	0x200006a2
 8001a3c:	0800b744 	.word	0x0800b744
 8001a40:	0800b754 	.word	0x0800b754
 8001a44:	200006ad 	.word	0x200006ad
 8001a48:	200006ac 	.word	0x200006ac
 8001a4c:	0800b764 	.word	0x0800b764
 8001a50:	0800b778 	.word	0x0800b778
 8001a54:	0800b77c 	.word	0x0800b77c
 8001a58:	0800b78c 	.word	0x0800b78c
 8001a5c:	0800b7a4 	.word	0x0800b7a4
 8001a60:	0800b7bc 	.word	0x0800b7bc

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0a6      	sub	sp, #152	; 0x98
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a6e:	2228      	movs	r2, #40	; 0x28
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 fa28 	bl	8006ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2258      	movs	r2, #88	; 0x58
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 fa1a 	bl	8006ec8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ab0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fa0e 	bl	8002ee4 <HAL_RCC_OscConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001ace:	f000 fb1f 	bl	8002110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	230f      	movs	r3, #15
 8001ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 f90e 	bl	8003d10 <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001afa:	f000 fb09 	bl	8002110 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <SystemClock_Config+0xc0>)
 8001b00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fb35 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001b18:	f000 fafa 	bl	8002110 <Error_Handler>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3798      	adds	r7, #152	; 0x98
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	00200002 	.word	0x00200002

08001b28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	f040 80d5 	bne.w	8001ce4 <HAL_GPIO_EXTI_Callback+0x1bc>
	{
		if (!(GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001b3a:	4b9b      	ldr	r3, [pc, #620]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_GPIO_EXTI_Callback+0x32>
 8001b46:	4b98      	ldr	r3, [pc, #608]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <HAL_GPIO_EXTI_Callback+0x32>
			status = 0x00;
 8001b52:	4b96      	ldr	r3, [pc, #600]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e02e      	b.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x90>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001b5a:	4b93      	ldr	r3, [pc, #588]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_GPIO_EXTI_Callback+0x52>
 8001b66:	4b90      	ldr	r3, [pc, #576]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <HAL_GPIO_EXTI_Callback+0x52>
			status = 0x10;
 8001b72:	4b8e      	ldr	r3, [pc, #568]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001b74:	2210      	movs	r2, #16
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e01e      	b.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x90>
		} else if (!(GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001b7a:	4b8b      	ldr	r3, [pc, #556]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_GPIO_EXTI_Callback+0x72>
 8001b86:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_EXTI_Callback+0x72>
			status = 0x01;
 8001b92:	4b86      	ldr	r3, [pc, #536]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e00e      	b.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x90>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001b9a:	4b83      	ldr	r3, [pc, #524]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x90>
 8001ba6:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x90>
			status = 0x11;
 8001bb2:	4b7e      	ldr	r3, [pc, #504]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001bb4:	2211      	movs	r2, #17
 8001bb6:	701a      	strb	r2, [r3, #0]
		}
		if ((status_old == 0x10) && (status == 0x11)) {
 8001bb8:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d11a      	bne.n	8001bf6 <HAL_GPIO_EXTI_Callback+0xce>
 8001bc0:	4b7a      	ldr	r3, [pc, #488]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b11      	cmp	r3, #17
 8001bc6:	d116      	bne.n	8001bf6 <HAL_GPIO_EXTI_Callback+0xce>
			counter += 1;
 8001bc8:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001bd2:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001bd4:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b31      	cmp	r3, #49	; 0x31
 8001bda:	d808      	bhi.n	8001bee <HAL_GPIO_EXTI_Callback+0xc6>
				number_str += 10;
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	330a      	adds	r3, #10
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001be6:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001be8:	f7ff f8c8 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str < 50) {
 8001bec:	e021      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0x10a>
			} else {
				number_str = 50;
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bf0:	2232      	movs	r2, #50	; 0x32
 8001bf2:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001bf4:	e01d      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0x10a>
			}
		} else if ((status_old == 0x01) && (status == 0x00)) {
 8001bf6:	4b6e      	ldr	r3, [pc, #440]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d119      	bne.n	8001c32 <HAL_GPIO_EXTI_Callback+0x10a>
 8001bfe:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_GPIO_EXTI_Callback+0x10a>
			counter += 1;
 8001c06:	4b6b      	ldr	r3, [pc, #428]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c10:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001c12:	4b69      	ldr	r3, [pc, #420]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b31      	cmp	r3, #49	; 0x31
 8001c18:	d808      	bhi.n	8001c2c <HAL_GPIO_EXTI_Callback+0x104>
				number_str += 10;
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	330a      	adds	r3, #10
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c24:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001c26:	f7ff f8a9 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_EXTI_Callback+0x10a>
			} else {
				number_str = 50;
 8001c2c:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c2e:	2232      	movs	r2, #50	; 0x32
 8001c30:	701a      	strb	r2, [r3, #0]
			}
		}
		if (status_old == 0x11 && status == 0x10) {
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	d107      	bne.n	8001c4a <HAL_GPIO_EXTI_Callback+0x122>
 8001c3a:	4b5c      	ldr	r3, [pc, #368]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d103      	bne.n	8001c4a <HAL_GPIO_EXTI_Callback+0x122>
			status_old = 0x10;
 8001c42:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c44:	2210      	movs	r2, #16
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e048      	b.n	8001cdc <HAL_GPIO_EXTI_Callback+0x1b4>

		} else if (status_old == 0x00 && status == 0x01) {
 8001c4a:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <HAL_GPIO_EXTI_Callback+0x13a>
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d103      	bne.n	8001c62 <HAL_GPIO_EXTI_Callback+0x13a>
			status_old = 0x01;
 8001c5a:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e03c      	b.n	8001cdc <HAL_GPIO_EXTI_Callback+0x1b4>
		} else if (status_old == 0x10 && status == 0x00) {
 8001c62:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d11a      	bne.n	8001ca0 <HAL_GPIO_EXTI_Callback+0x178>
 8001c6a:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d116      	bne.n	8001ca0 <HAL_GPIO_EXTI_Callback+0x178>
			counter -= 1;
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001c7c:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_GPIO_EXTI_Callback+0x170>
				number_str -= 10;
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3b0a      	subs	r3, #10
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c90:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001c92:	f7ff f873 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str > 0) {
 8001c96:	e021      	b.n	8001cdc <HAL_GPIO_EXTI_Callback+0x1b4>
			} else {
				number_str = 0;
 8001c98:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001c9e:	e01d      	b.n	8001cdc <HAL_GPIO_EXTI_Callback+0x1b4>
			}
		} else if (status_old == 0x01 && status == 0x11) {
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d119      	bne.n	8001cdc <HAL_GPIO_EXTI_Callback+0x1b4>
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	d115      	bne.n	8001cdc <HAL_GPIO_EXTI_Callback+0x1b4>
			counter -= 1;
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001cba:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001cbc:	4b3e      	ldr	r3, [pc, #248]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_GPIO_EXTI_Callback+0x1ae>
				number_str -= 10;
 8001cc4:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	3b0a      	subs	r3, #10
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001cce:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001cd0:	f7ff f854 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_EXTI_Callback+0x1b4>
			} else {
				number_str = 0;
 8001cd6:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			}
		}
		status_old = status;
 8001cdc:	4b33      	ldr	r3, [pc, #204]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ce2:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_1)
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	f040 80df 	bne.w	8001eaa <HAL_GPIO_EXTI_Callback+0x382>
	{
		if (!(GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_GPIO_EXTI_Callback+0x1e4>
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_GPIO_EXTI_Callback+0x1e4>
			status = 0x00;
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e02e      	b.n	8001d6a <HAL_GPIO_EXTI_Callback+0x242>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && !(GPIOC->IDR & GPIO_PIN_1)) {
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_GPIO_EXTI_Callback+0x204>
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_GPIO_EXTI_Callback+0x204>
			status = 0x10;
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001d26:	2210      	movs	r2, #16
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e01e      	b.n	8001d6a <HAL_GPIO_EXTI_Callback+0x242>
		} else if (!(GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_GPIO_EXTI_Callback+0x224>
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_EXTI_Callback+0x224>
			status = 0x01;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e00e      	b.n	8001d6a <HAL_GPIO_EXTI_Callback+0x242>
		} else if ((GPIOC->IDR & GPIO_PIN_0) && (GPIOC->IDR & GPIO_PIN_1)) {
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_GPIO_EXTI_Callback+0x242>
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_GPIO_EXTI_Callback+0x242>
			status = 0x11;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001d66:	2211      	movs	r2, #17
 8001d68:	701a      	strb	r2, [r3, #0]
		}
		if ((status_old == 0x10) && (status == 0x11)) {
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x288>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d124      	bne.n	8001dbc <HAL_GPIO_EXTI_Callback+0x294>
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_GPIO_EXTI_Callback+0x284>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b11      	cmp	r3, #17
 8001d78:	d120      	bne.n	8001dbc <HAL_GPIO_EXTI_Callback+0x294>
			counter += 1;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001d84:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b31      	cmp	r3, #49	; 0x31
 8001d8c:	d808      	bhi.n	8001da0 <HAL_GPIO_EXTI_Callback+0x278>
				number_str += 10;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	330a      	adds	r3, #10
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001d98:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001d9a:	f7fe ffef 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str < 50) {
 8001d9e:	e02b      	b.n	8001df8 <HAL_GPIO_EXTI_Callback+0x2d0>
			} else {
				number_str = 50;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x290>)
 8001da2:	2232      	movs	r2, #50	; 0x32
 8001da4:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001da6:	e027      	b.n	8001df8 <HAL_GPIO_EXTI_Callback+0x2d0>
 8001da8:	48000800 	.word	0x48000800
 8001dac:	200006bd 	.word	0x200006bd
 8001db0:	200006bc 	.word	0x200006bc
 8001db4:	200006a1 	.word	0x200006a1
 8001db8:	200006a3 	.word	0x200006a3
			}
		} else if ((status_old == 0x01) && (status == 0x00)) {
 8001dbc:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d119      	bne.n	8001df8 <HAL_GPIO_EXTI_Callback+0x2d0>
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d115      	bne.n	8001df8 <HAL_GPIO_EXTI_Callback+0x2d0>
			counter += 1;
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001dd6:	701a      	strb	r2, [r3, #0]
			if (number_str < 50) {
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b31      	cmp	r3, #49	; 0x31
 8001dde:	d808      	bhi.n	8001df2 <HAL_GPIO_EXTI_Callback+0x2ca>
				number_str += 10;
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	330a      	adds	r3, #10
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001dea:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001dec:	f7fe ffc6 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_EXTI_Callback+0x2d0>
			} else {
				number_str = 50;
 8001df2:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001df4:	2232      	movs	r2, #50	; 0x32
 8001df6:	701a      	strb	r2, [r3, #0]
			}
		}
		if (status_old == 0x11 && status == 0x10) {
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b11      	cmp	r3, #17
 8001dfe:	d107      	bne.n	8001e10 <HAL_GPIO_EXTI_Callback+0x2e8>
 8001e00:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d103      	bne.n	8001e10 <HAL_GPIO_EXTI_Callback+0x2e8>
			status_old = 0x10;
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e048      	b.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x37a>

		} else if (status_old == 0x00 && status == 0x01) {
 8001e10:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_GPIO_EXTI_Callback+0x300>
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d103      	bne.n	8001e28 <HAL_GPIO_EXTI_Callback+0x300>
			status_old = 0x01;
 8001e20:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e03c      	b.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x37a>
		} else if (status_old == 0x10 && status == 0x00) {
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d11a      	bne.n	8001e66 <HAL_GPIO_EXTI_Callback+0x33e>
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d116      	bne.n	8001e66 <HAL_GPIO_EXTI_Callback+0x33e>
			counter -= 1;
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001e42:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_GPIO_EXTI_Callback+0x336>
				number_str -= 10;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3b0a      	subs	r3, #10
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e56:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001e58:	f7fe ff90 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
			if (number_str > 0) {
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x37a>
			} else {
				number_str = 0;
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001e64:	e01d      	b.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x37a>
			}
		} else if (status_old == 0x01 && status == 0x11) {
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d119      	bne.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x37a>
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b11      	cmp	r3, #17
 8001e74:	d115      	bne.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x37a>
			counter -= 1;
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001e80:	701a      	strb	r2, [r3, #0]
			if (number_str > 0) {
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d008      	beq.n	8001e9c <HAL_GPIO_EXTI_Callback+0x374>
				number_str -= 10;
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b0a      	subs	r3, #10
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e94:	701a      	strb	r2, [r3, #0]
				GMG12864_Clean_Frame_buffer();
 8001e96:	f7fe ff71 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
 8001e9a:	e002      	b.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x37a>
			} else {
				number_str = 0;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
			}
		}
		status_old = status;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8001ea8:	701a      	strb	r2, [r3, #0]

	}
	if(GPIO_Pin == GPIO_PIN_2)
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x3d0>
	{
		flag_led = !flag_led;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001ecc:	701a      	strb	r2, [r3, #0]
		stage_menu = !stage_menu;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f083 0301 	eor.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001eea:	701a      	strb	r2, [r3, #0]
		update_display = 1;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x3f0>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
		tim4_flag = 0;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x3f4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200006bc 	.word	0x200006bc
 8001f04:	200006bd 	.word	0x200006bd
 8001f08:	200006a1 	.word	0x200006a1
 8001f0c:	200006a3 	.word	0x200006a3
 8001f10:	200006a2 	.word	0x200006a2
 8001f14:	200006a4 	.word	0x200006a4
 8001f18:	20000002 	.word	0x20000002
 8001f1c:	200006ad 	.word	0x200006ad

08001f20 <print_first_line>:

void print_first_line()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "User led param.");
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <print_first_line+0x28>)
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <print_first_line+0x2c>)
 8001f2a:	f005 fe55 	bl	8007bd8 <siprintf>
	GMG12864_Decode_UTF8(15, 0, 1, 0, tx_buffer);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <print_first_line+0x2c>)
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2201      	movs	r2, #1
 8001f36:	2100      	movs	r1, #0
 8001f38:	200f      	movs	r0, #15
 8001f3a:	f7ff f981 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001f3e:	f7fe ffeb 	bl	8000f18 <GMG12864_Update>
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	0800b7e4 	.word	0x0800b7e4
 8001f4c:	20000200 	.word	0x20000200

08001f50 <print_second_line>:

void print_second_line()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "TIM_4 param");
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <print_second_line+0x28>)
 8001f58:	4808      	ldr	r0, [pc, #32]	; (8001f7c <print_second_line+0x2c>)
 8001f5a:	f005 fe3d 	bl	8007bd8 <siprintf>
	GMG12864_Decode_UTF8(15, 10, 1, 0, tx_buffer);
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <print_second_line+0x2c>)
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	2201      	movs	r2, #1
 8001f66:	210a      	movs	r1, #10
 8001f68:	200f      	movs	r0, #15
 8001f6a:	f7ff f969 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001f6e:	f7fe ffd3 	bl	8000f18 <GMG12864_Update>
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	0800b7f4 	.word	0x0800b7f4
 8001f7c:	20000200 	.word	0x20000200

08001f80 <print_third_line>:

void print_third_line()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Uart param");
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <print_third_line+0x28>)
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <print_third_line+0x2c>)
 8001f8a:	f005 fe25 	bl	8007bd8 <siprintf>
	GMG12864_Decode_UTF8(15, 20, 1, 0, tx_buffer);
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <print_third_line+0x2c>)
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2201      	movs	r2, #1
 8001f96:	2114      	movs	r1, #20
 8001f98:	200f      	movs	r0, #15
 8001f9a:	f7ff f951 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001f9e:	f7fe ffbb 	bl	8000f18 <GMG12864_Update>
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	0800b800 	.word	0x0800b800
 8001fac:	20000200 	.word	0x20000200

08001fb0 <print_fourth_line>:

void print_fourth_line()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Fourth line");
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <print_fourth_line+0x28>)
 8001fb8:	4808      	ldr	r0, [pc, #32]	; (8001fdc <print_fourth_line+0x2c>)
 8001fba:	f005 fe0d 	bl	8007bd8 <siprintf>
	GMG12864_Decode_UTF8(15, 30, 1, 0, tx_buffer);
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <print_fourth_line+0x2c>)
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	211e      	movs	r1, #30
 8001fc8:	200f      	movs	r0, #15
 8001fca:	f7ff f939 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001fce:	f7fe ffa3 	bl	8000f18 <GMG12864_Update>
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	0800b80c 	.word	0x0800b80c
 8001fdc:	20000200 	.word	0x20000200

08001fe0 <print_fifth_line>:

void print_fifth_line()
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Fifth line");
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <print_fifth_line+0x28>)
 8001fe8:	4808      	ldr	r0, [pc, #32]	; (800200c <print_fifth_line+0x2c>)
 8001fea:	f005 fdf5 	bl	8007bd8 <siprintf>
	GMG12864_Decode_UTF8(15, 40, 1, 0, tx_buffer);
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <print_fifth_line+0x2c>)
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2128      	movs	r1, #40	; 0x28
 8001ff8:	200f      	movs	r0, #15
 8001ffa:	f7ff f921 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8001ffe:	f7fe ff8b 	bl	8000f18 <GMG12864_Update>
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	0800b818 	.word	0x0800b818
 800200c:	20000200 	.word	0x20000200

08002010 <print_sixth_line>:

void print_sixth_line()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "Sixth line");
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <print_sixth_line+0x28>)
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <print_sixth_line+0x2c>)
 800201a:	f005 fddd 	bl	8007bd8 <siprintf>
	GMG12864_Decode_UTF8(15, 50, 1, 0, tx_buffer);
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <print_sixth_line+0x2c>)
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	2201      	movs	r2, #1
 8002026:	2132      	movs	r1, #50	; 0x32
 8002028:	200f      	movs	r0, #15
 800202a:	f7ff f909 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 800202e:	f7fe ff73 	bl	8000f18 <GMG12864_Update>
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	0800b824 	.word	0x0800b824
 800203c:	20000200 	.word	0x20000200

08002040 <pointer_write>:

void pointer_write()
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af02      	add	r7, sp, #8
	sprintf(tx_buffer, "->");
 8002046:	4909      	ldr	r1, [pc, #36]	; (800206c <pointer_write+0x2c>)
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <pointer_write+0x30>)
 800204a:	f005 fdc5 	bl	8007bd8 <siprintf>
	GMG12864_Decode_UTF8(0, number_str, 1, 0, tx_buffer);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <pointer_write+0x34>)
 8002050:	7819      	ldrb	r1, [r3, #0]
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <pointer_write+0x30>)
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2300      	movs	r3, #0
 8002058:	2201      	movs	r2, #1
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff f8f0 	bl	8001240 <GMG12864_Decode_UTF8>
	GMG12864_Update();
 8002060:	f7fe ff5a 	bl	8000f18 <GMG12864_Update>
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	0800b830 	.word	0x0800b830
 8002070:	20000200 	.word	0x20000200
 8002074:	200006a3 	.word	0x200006a3

08002078 <upd_disp>:

void upd_disp()
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	if(update_display)
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <upd_disp+0x1c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <upd_disp+0x16>
	{
		GMG12864_Clean_Frame_buffer();
 8002084:	f7fe fe7a 	bl	8000d7c <GMG12864_Clean_Frame_buffer>
		update_display = 0;
 8002088:	4b02      	ldr	r3, [pc, #8]	; (8002094 <upd_disp+0x1c>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
	}
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000002 	.word	0x20000002

08002098 <HAL_UART_IDLE_Callback>:

void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d127      	bne.n	80020f8 <HAL_UART_IDLE_Callback+0x60>
	{
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0210 	bic.w	r2, r2, #16
 80020b6:	601a      	str	r2, [r3, #0]
		rx_uart_buffer_len = rx_uart_buffer_size - huart->RxXferCount;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f1c3 031e 	rsb	r3, r3, #30
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_UART_IDLE_Callback+0x6c>)
 80020c8:	801a      	strh	r2, [r3, #0]
		HAL_UART_AbortReceive_IT(&huart2);
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020cc:	f003 fbce 	bl	800586c <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2210      	movs	r2, #16
 80020d6:	621a      	str	r2, [r3, #32]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0210 	orr.w	r2, r2, #16
 80020e6:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_uart_buffer, rx_uart_buffer_size);
 80020e8:	221e      	movs	r2, #30
 80020ea:	4907      	ldr	r1, [pc, #28]	; (8002108 <HAL_UART_IDLE_Callback+0x70>)
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <HAL_UART_IDLE_Callback+0x68>)
 80020ee:	f003 fb6f 	bl	80057d0 <HAL_UART_Receive_IT>
		rx_uart_buffer_ready = 1;
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_UART_IDLE_Callback+0x74>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
	}
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000770 	.word	0x20000770
 8002104:	2000069e 	.word	0x2000069e
 8002108:	20000680 	.word	0x20000680
 800210c:	200006a0 	.word	0x200006a0

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	e7fe      	b.n	8002118 <Error_Handler+0x8>
	...

0800211c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <MX_SPI1_Init+0x74>)
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <MX_SPI1_Init+0x78>)
 8002124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MX_SPI1_Init+0x74>)
 8002128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800212c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_SPI1_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_SPI1_Init+0x74>)
 8002136:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800213a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <MX_SPI1_Init+0x74>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MX_SPI1_Init+0x74>)
 8002144:	2200      	movs	r2, #0
 8002146:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_SPI1_Init+0x74>)
 800214a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_SPI1_Init+0x74>)
 8002152:	2208      	movs	r2, #8
 8002154:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_SPI1_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_SPI1_Init+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_SPI1_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_SPI1_Init+0x74>)
 800216a:	2207      	movs	r2, #7
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_SPI1_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_SPI1_Init+0x74>)
 8002176:	2208      	movs	r2, #8
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_SPI1_Init+0x74>)
 800217c:	f002 fa1c 	bl	80045b8 <HAL_SPI_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002186:	f7ff ffc3 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200006c0 	.word	0x200006c0
 8002194:	40013000 	.word	0x40013000

08002198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a25      	ldr	r2, [pc, #148]	; (800224c <HAL_SPI_MspInit+0xb4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d144      	bne.n	8002244 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4a24      	ldr	r2, [pc, #144]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021c4:	6193      	str	r3, [r2, #24]
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	6153      	str	r3, [r2, #20]
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4a18      	ldr	r2, [pc, #96]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6153      	str	r3, [r2, #20]
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_SPI_MspInit+0xb8>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002212:	2305      	movs	r3, #5
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f000 fca6 	bl	8002b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002224:	2308      	movs	r3, #8
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002234:	2305      	movs	r3, #5
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_SPI_MspInit+0xbc>)
 8002240:	f000 fc96 	bl	8002b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40013000 	.word	0x40013000
 8002250:	40021000 	.word	0x40021000
 8002254:	48000400 	.word	0x48000400

08002258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_MspInit+0x44>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_MspInit+0x44>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6193      	str	r3, [r2, #24]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_MspInit+0x44>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_MspInit+0x44>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <HAL_MspInit+0x44>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_MspInit+0x44>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ec:	f000 fa74 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f000 fddb 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}

08002302 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002306:	2002      	movs	r0, #2
 8002308:	f000 fdd4 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002314:	2004      	movs	r0, #4
 8002316:	f000 fdcd 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <TIM4_IRQHandler+0x1c>)
 8002326:	f002 fd9b 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  tim4_counter += 3;
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <TIM4_IRQHandler+0x20>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	3303      	adds	r3, #3
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b03      	ldr	r3, [pc, #12]	; (8002340 <TIM4_IRQHandler+0x20>)
 8002334:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000724 	.word	0x20000724
 8002340:	200006ac 	.word	0x200006ac

08002344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <USART2_IRQHandler+0x10>)
 800234a:	f003 fb55 	bl	80059f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000770 	.word	0x20000770

08002358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800235c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002360:	f000 fda8 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
	return 1;
 800236c:	2301      	movs	r3, #1
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_kill>:

int _kill(int pid, int sig)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002382:	f004 fd77 	bl	8006e74 <__errno>
 8002386:	4603      	mov	r3, r0
 8002388:	2216      	movs	r2, #22
 800238a:	601a      	str	r2, [r3, #0]
	return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_exit>:

void _exit (int status)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ffe7 	bl	8002378 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023aa:	e7fe      	b.n	80023aa <_exit+0x12>

080023ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e00a      	b.n	80023d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023be:	f3af 8000 	nop.w
 80023c2:	4601      	mov	r1, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbf0      	blt.n	80023be <_read+0x12>
	}

return len;
 80023dc:	687b      	ldr	r3, [r7, #4]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e009      	b.n	800240c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	60ba      	str	r2, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbf1      	blt.n	80023f8 <_write+0x12>
	}
	return len;
 8002414:	687b      	ldr	r3, [r7, #4]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_close>:

int _close(int file)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	return -1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002446:	605a      	str	r2, [r3, #4]
	return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_isatty>:

int _isatty(int file)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
	return 1;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
	return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b8:	f004 fcdc 	bl	8006e74 <__errno>
 80024bc:	4603      	mov	r3, r0
 80024be:	220c      	movs	r2, #12
 80024c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20010000 	.word	0x20010000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	200006b0 	.word	0x200006b0
 80024f0:	20000808 	.word	0x20000808

080024f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <SystemInit+0x20>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <SystemInit+0x20>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <MX_TIM4_Init+0x98>)
 8002538:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <MX_TIM4_Init+0x9c>)
 800253a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_TIM4_Init+0x98>)
 800253e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002542:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_TIM4_Init+0x98>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <MX_TIM4_Init+0x98>)
 800254c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002550:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <MX_TIM4_Init+0x98>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_TIM4_Init+0x98>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <MX_TIM4_Init+0x98>)
 8002560:	f002 fbb6 	bl	8004cd0 <HAL_TIM_Base_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800256a:	f7ff fdd1 	bl	8002110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002572:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4619      	mov	r1, r3
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <MX_TIM4_Init+0x98>)
 800257c:	f002 fd8f 	bl	800509e <HAL_TIM_ConfigClockSource>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002586:	f7ff fdc3 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <MX_TIM4_Init+0x98>)
 8002598:	f002 ffb4 	bl	8005504 <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80025a2:	f7ff fdb5 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000724 	.word	0x20000724
 80025b4:	40000800 	.word	0x40000800

080025b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_TIM_Base_MspInit+0x44>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d113      	bne.n	80025f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_TIM_Base_MspInit+0x48>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <HAL_TIM_Base_MspInit+0x48>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_TIM_Base_MspInit+0x48>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	201e      	movs	r0, #30
 80025e8:	f000 fa15 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025ec:	201e      	movs	r0, #30
 80025ee:	f000 fa2e 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40000800 	.word	0x40000800
 8002600:	40021000 	.word	0x40021000

08002604 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <MX_USART2_UART_Init+0x58>)
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <MX_USART2_UART_Init+0x5c>)
 800260c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <MX_USART2_UART_Init+0x58>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <MX_USART2_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <MX_USART2_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <MX_USART2_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_USART2_UART_Init+0x58>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <MX_USART2_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <MX_USART2_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <MX_USART2_UART_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_USART2_UART_Init+0x58>)
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_USART2_UART_Init+0x58>)
 8002648:	f003 f806 	bl	8005658 <HAL_UART_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002652:	f7ff fd5d 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000770 	.word	0x20000770
 8002660:	40004400 	.word	0x40004400

08002664 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <HAL_UART_MspInit+0x8c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d130      	bne.n	80026e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_UART_MspInit+0x90>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_UART_MspInit+0x90>)
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_UART_MspInit+0x90>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_UART_MspInit+0x90>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_UART_MspInit+0x90>)
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_UART_MspInit+0x90>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026b6:	230c      	movs	r3, #12
 80026b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c2:	2303      	movs	r3, #3
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c6:	2307      	movs	r3, #7
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d4:	f000 fa4c 	bl	8002b70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	2026      	movs	r0, #38	; 0x26
 80026de:	f000 f99a 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026e2:	2026      	movs	r0, #38	; 0x26
 80026e4:	f000 f9b3 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40004400 	.word	0x40004400
 80026f4:	40021000 	.word	0x40021000

080026f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002730 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <LoopForever+0x6>)
  ldr r1, =_edata
 80026fe:	490e      	ldr	r1, [pc, #56]	; (8002738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <LoopForever+0xe>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002714:	4c0b      	ldr	r4, [pc, #44]	; (8002744 <LoopForever+0x16>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002722:	f7ff fee7 	bl	80024f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002726:	f004 fbab 	bl	8006e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800272a:	f7fe ffdf 	bl	80016ec <main>

0800272e <LoopForever>:

LoopForever:
    b LoopForever
 800272e:	e7fe      	b.n	800272e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002730:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800273c:	0800c23c 	.word	0x0800c23c
  ldr r2, =_sbss
 8002740:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002744:	20000808 	.word	0x20000808

08002748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC1_2_IRQHandler>
	...

0800274c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x28>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x28>)
 8002756:	f043 0310 	orr.w	r3, r3, #16
 800275a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f94f 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	200f      	movs	r0, #15
 8002764:	f000 f808 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7ff fd76 	bl	8002258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000

08002778 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x54>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x58>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f967 	bl	8002a6a <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f000 f92f 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <HAL_InitTick+0x5c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000004 	.word	0x20000004
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	20000008 	.word	0x20000008

080027d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	200007f4 	.word	0x200007f4

08002800 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;  
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200007f4 	.word	0x200007f4

08002818 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000000c 	.word	0x2000000c

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e020      	b.n	8002ae8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 020e 	bic.w	r2, r2, #14
 8002ab4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e027      	b.n	8002b66 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020e 	bic.w	r2, r2, #14
 8002b24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
    } 
  }
  return status;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7e:	e160      	b.n	8002e42 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8152 	beq.w	8002e3c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d005      	beq.n	8002bb0 <HAL_GPIO_Init+0x40>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d130      	bne.n	8002c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be6:	2201      	movs	r2, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 0201 	and.w	r2, r3, #1
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d017      	beq.n	8002c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d123      	bne.n	8002ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	6939      	ldr	r1, [r7, #16]
 8002c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80ac 	beq.w	8002e3c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	; (8002e60 <HAL_GPIO_Init+0x2f0>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4a5d      	ldr	r2, [pc, #372]	; (8002e60 <HAL_GPIO_Init+0x2f0>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6193      	str	r3, [r2, #24]
 8002cf0:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <HAL_GPIO_Init+0x2f0>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cfc:	4a59      	ldr	r2, [pc, #356]	; (8002e64 <HAL_GPIO_Init+0x2f4>)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d26:	d025      	beq.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_GPIO_Init+0x2f8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01f      	beq.n	8002d70 <HAL_GPIO_Init+0x200>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_GPIO_Init+0x2fc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d019      	beq.n	8002d6c <HAL_GPIO_Init+0x1fc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_GPIO_Init+0x300>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d013      	beq.n	8002d68 <HAL_GPIO_Init+0x1f8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x304>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00d      	beq.n	8002d64 <HAL_GPIO_Init+0x1f4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_GPIO_Init+0x308>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <HAL_GPIO_Init+0x1f0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_GPIO_Init+0x30c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_GPIO_Init+0x1ec>
 8002d58:	2306      	movs	r3, #6
 8002d5a:	e00c      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d5c:	2307      	movs	r3, #7
 8002d5e:	e00a      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d60:	2305      	movs	r3, #5
 8002d62:	e008      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e006      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d74:	2300      	movs	r3, #0
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d86:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x2f4>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002db8:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dbe:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002de2:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f ae97 	bne.w	8002b80 <HAL_GPIO_Init+0x10>
  }
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	48000c00 	.word	0x48000c00
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48001400 	.word	0x48001400
 8002e7c:	48001800 	.word	0x48001800
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
 8002e90:	4613      	mov	r3, r2
 8002e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e94:	787b      	ldrb	r3, [r7, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fe28 	bl	8001b28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f000 bf01 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8160 	beq.w	80031ce <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f0e:	4bae      	ldr	r3, [pc, #696]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1a:	4bab      	ldr	r3, [pc, #684]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d159      	bne.n	8002fda <HAL_RCC_OscConfig+0xf6>
 8002f26:	4ba8      	ldr	r3, [pc, #672]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d152      	bne.n	8002fda <HAL_RCC_OscConfig+0xf6>
 8002f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f38:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_OscConfig+0x82>
 8002f60:	4b99      	ldr	r3, [pc, #612]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	e015      	b.n	8002f92 <HAL_RCC_OscConfig+0xae>
 8002f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f82:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f8e:	4b8e      	ldr	r3, [pc, #568]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f96:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002f9a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002f9e:	fa92 f2a2 	rbit	r2, r2
 8002fa2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002fa6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002faa:	fab2 f282 	clz	r2, r2
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f002 021f 	and.w	r2, r2, #31
 8002fba:	2101      	movs	r1, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8102 	beq.w	80031cc <HAL_RCC_OscConfig+0x2e8>
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 80fc 	bne.w	80031cc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f000 be93 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x110>
 8002fe6:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a77      	ldr	r2, [pc, #476]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e030      	b.n	8003056 <HAL_RCC_OscConfig+0x172>
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x134>
 8002ffe:	4b72      	ldr	r3, [pc, #456]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a71      	ldr	r2, [pc, #452]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01e      	b.n	8003056 <HAL_RCC_OscConfig+0x172>
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003022:	d10c      	bne.n	800303e <HAL_RCC_OscConfig+0x15a>
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a67      	ldr	r2, [pc, #412]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 800302a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a64      	ldr	r2, [pc, #400]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	e00b      	b.n	8003056 <HAL_RCC_OscConfig+0x172>
 800303e:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a61      	ldr	r2, [pc, #388]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5e      	ldr	r2, [pc, #376]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d059      	beq.n	8003114 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff fbce 	bl	8002800 <HAL_GetTick>
 8003064:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306a:	f7ff fbc9 	bl	8002800 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d902      	bls.n	8003080 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	f000 be40 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003084:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003094:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_OscConfig+0x1ce>
 80030ac:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	e015      	b.n	80030de <HAL_RCC_OscConfig+0x1fa>
 80030b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80030c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030e2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80030e6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80030f2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80030f6:	fab2 f282 	clz	r2, r2
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	f042 0220 	orr.w	r2, r2, #32
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	f002 021f 	and.w	r2, r2, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f202 	lsl.w	r2, r1, r2
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ab      	beq.n	800306a <HAL_RCC_OscConfig+0x186>
 8003112:	e05c      	b.n	80031ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7ff fb74 	bl	8002800 <HAL_GetTick>
 8003118:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800311e:	f7ff fb6f 	bl	8002800 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d902      	bls.n	8003134 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	f000 bde6 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003138:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003148:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HAL_RCC_OscConfig+0x282>
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e015      	b.n	8003192 <HAL_RCC_OscConfig+0x2ae>
 8003166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800316a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800317a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003182:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_RCC_OscConfig+0x2e4>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003196:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800319a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800319e:	fa92 f2a2 	rbit	r2, r2
 80031a2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80031a6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80031aa:	fab2 f282 	clz	r2, r2
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f002 021f 	and.w	r2, r2, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1ab      	bne.n	800311e <HAL_RCC_OscConfig+0x23a>
 80031c6:	e002      	b.n	80031ce <HAL_RCC_OscConfig+0x2ea>
 80031c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8170 	beq.w	80034be <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031de:	4bd0      	ldr	r3, [pc, #832]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031ea:	4bcd      	ldr	r3, [pc, #820]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d16d      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3ee>
 80031f6:	4bca      	ldr	r3, [pc, #808]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d166      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3ee>
 8003204:	2302      	movs	r3, #2
 8003206:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003216:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_RCC_OscConfig+0x350>
 800322e:	4bbc      	ldr	r3, [pc, #752]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e013      	b.n	800325c <HAL_RCC_OscConfig+0x378>
 8003234:	2302      	movs	r3, #2
 8003236:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800324c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003258:	4bb1      	ldr	r3, [pc, #708]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2202      	movs	r2, #2
 800325e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003262:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003266:	fa92 f2a2 	rbit	r2, r2
 800326a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800326e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <HAL_RCC_OscConfig+0x3ba>
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d002      	beq.n	800329e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f000 bd31 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	21f8      	movs	r1, #248	; 0xf8
 80032ae:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80032b6:	fa91 f1a1 	rbit	r1, r1
 80032ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80032be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032c2:	fab1 f181 	clz	r1, r1
 80032c6:	b2c9      	uxtb	r1, r1
 80032c8:	408b      	lsls	r3, r1
 80032ca:	4995      	ldr	r1, [pc, #596]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d0:	e0f5      	b.n	80034be <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8085 	beq.w	80033e8 <HAL_RCC_OscConfig+0x504>
 80032de:	2301      	movs	r3, #1
 80032e0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80032f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	461a      	mov	r2, r3
 8003306:	2301      	movs	r3, #1
 8003308:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7ff fa79 	bl	8002800 <HAL_GetTick>
 800330e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003314:	f7ff fa74 	bl	8002800 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d902      	bls.n	800332a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	f000 bceb 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 800332a:	2302      	movs	r3, #2
 800332c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800333c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_RCC_OscConfig+0x476>
 8003354:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	e013      	b.n	8003382 <HAL_RCC_OscConfig+0x49e>
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800336c:	2302      	movs	r3, #2
 800336e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003372:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800337e:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2202      	movs	r2, #2
 8003384:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003388:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800338c:	fa92 f2a2 	rbit	r2, r2
 8003390:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003394:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f002 021f 	and.w	r2, r2, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0af      	beq.n	8003314 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	21f8      	movs	r1, #248	; 0xf8
 80033c4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80033cc:	fa91 f1a1 	rbit	r1, r1
 80033d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80033d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80033d8:	fab1 f181 	clz	r1, r1
 80033dc:	b2c9      	uxtb	r1, r1
 80033de:	408b      	lsls	r3, r1
 80033e0:	494f      	ldr	r1, [pc, #316]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
 80033e6:	e06a      	b.n	80034be <HAL_RCC_OscConfig+0x5da>
 80033e8:	2301      	movs	r3, #1
 80033ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80033fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	2300      	movs	r3, #0
 8003412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7ff f9f4 	bl	8002800 <HAL_GetTick>
 8003418:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7ff f9ef 	bl	8002800 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	f000 bc66 	b.w	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003434:	2302      	movs	r3, #2
 8003436:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003446:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_RCC_OscConfig+0x580>
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e013      	b.n	800348c <HAL_RCC_OscConfig+0x5a8>
 8003464:	2302      	movs	r3, #2
 8003466:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003476:	2302      	movs	r3, #2
 8003478:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800347c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_OscConfig+0x63c>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	2202      	movs	r2, #2
 800348e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003492:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003496:	fa92 f2a2 	rbit	r2, r2
 800349a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800349e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034a2:	fab2 f282 	clz	r2, r2
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	f042 0220 	orr.w	r2, r2, #32
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f002 021f 	and.w	r2, r2, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f202 	lsl.w	r2, r1, r2
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1af      	bne.n	800341e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80da 	beq.w	8003682 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d069      	beq.n	80035ac <HAL_RCC_OscConfig+0x6c8>
 80034d8:	2301      	movs	r3, #1
 80034da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80034ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x640>)
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	461a      	mov	r2, r3
 80034fe:	2301      	movs	r3, #1
 8003500:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7ff f97d 	bl	8002800 <HAL_GetTick>
 8003506:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e00d      	b.n	8003528 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350c:	f7ff f978 	bl	8002800 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d905      	bls.n	8003528 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e3ef      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003520:	40021000 	.word	0x40021000
 8003524:	10908120 	.word	0x10908120
 8003528:	2302      	movs	r3, #2
 800352a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003532:	fa93 f2a3 	rbit	r2, r3
 8003536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003540:	2202      	movs	r2, #2
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f2a3 	rbit	r2, r3
 800354e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003558:	2202      	movs	r2, #2
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800356a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356c:	4ba4      	ldr	r3, [pc, #656]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800356e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003570:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003574:	2102      	movs	r1, #2
 8003576:	6019      	str	r1, [r3, #0]
 8003578:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f1a3 	rbit	r1, r3
 8003582:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003586:	6019      	str	r1, [r3, #0]
  return result;
 8003588:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0b0      	beq.n	800350c <HAL_RCC_OscConfig+0x628>
 80035aa:	e06a      	b.n	8003682 <HAL_RCC_OscConfig+0x79e>
 80035ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035c2:	601a      	str	r2, [r3, #0]
  return result;
 80035c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b8c      	ldr	r3, [pc, #560]	; (8003804 <HAL_RCC_OscConfig+0x920>)
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	461a      	mov	r2, r3
 80035da:	2300      	movs	r3, #0
 80035dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7ff f90f 	bl	8002800 <HAL_GetTick>
 80035e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e6:	e009      	b.n	80035fc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e8:	f7ff f90a 	bl	8002800 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e381      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 80035fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003600:	2202      	movs	r2, #2
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003618:	2202      	movs	r2, #2
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003630:	2202      	movs	r2, #2
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003642:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	4b6e      	ldr	r3, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003648:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800364c:	2102      	movs	r1, #2
 800364e:	6019      	str	r1, [r3, #0]
 8003650:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	fa93 f1a3 	rbit	r1, r3
 800365a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800365e:	6019      	str	r1, [r3, #0]
  return result;
 8003660:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	2101      	movs	r1, #1
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1b2      	bne.n	80035e8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8157 	beq.w	8003940 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003698:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d112      	bne.n	80036ca <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a4:	4b56      	ldr	r3, [pc, #344]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	4a55      	ldr	r2, [pc, #340]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80036aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ae:	61d3      	str	r3, [r2, #28]
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11a      	bne.n	800370c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d6:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7ff f88d 	bl	8002800 <HAL_GetTick>
 80036e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	e009      	b.n	8003700 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7ff f888 	bl	8002800 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b64      	cmp	r3, #100	; 0x64
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e2ff      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b41      	ldr	r3, [pc, #260]	; (8003808 <HAL_RCC_OscConfig+0x924>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ef      	beq.n	80036ec <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x840>
 8003716:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a39      	ldr	r2, [pc, #228]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	6213      	str	r3, [r2, #32]
 8003722:	e02f      	b.n	8003784 <HAL_RCC_OscConfig+0x8a0>
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x864>
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4a30      	ldr	r2, [pc, #192]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	6213      	str	r3, [r2, #32]
 8003746:	e01d      	b.n	8003784 <HAL_RCC_OscConfig+0x8a0>
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x888>
 8003752:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	6213      	str	r3, [r2, #32]
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a27      	ldr	r2, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0x8a0>
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6213      	str	r3, [r2, #32]
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 800377e:	f023 0304 	bic.w	r3, r3, #4
 8003782:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06a      	beq.n	8003864 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7ff f837 	bl	8002800 <HAL_GetTick>
 8003792:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7ff f832 	bl	8002800 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e2a7      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 80037b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037b4:	2202      	movs	r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037de:	601a      	str	r2, [r3, #0]
  return result;
 80037e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80037e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d108      	bne.n	800380c <HAL_RCC_OscConfig+0x928>
 80037fa:	4b01      	ldr	r3, [pc, #4]	; (8003800 <HAL_RCC_OscConfig+0x91c>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	e013      	b.n	8003828 <HAL_RCC_OscConfig+0x944>
 8003800:	40021000 	.word	0x40021000
 8003804:	10908120 	.word	0x10908120
 8003808:	40007000 	.word	0x40007000
 800380c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003810:	2202      	movs	r2, #2
 8003812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	4bc0      	ldr	r3, [pc, #768]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800382c:	2102      	movs	r1, #2
 800382e:	6011      	str	r1, [r2, #0]
 8003830:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	fa92 f1a2 	rbit	r1, r2
 800383a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800383e:	6011      	str	r1, [r2, #0]
  return result;
 8003840:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	fab2 f282 	clz	r2, r2
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f002 021f 	and.w	r2, r2, #31
 8003856:	2101      	movs	r1, #1
 8003858:	fa01 f202 	lsl.w	r2, r1, r2
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d09a      	beq.n	8003798 <HAL_RCC_OscConfig+0x8b4>
 8003862:	e063      	b.n	800392c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe ffcc 	bl	8002800 <HAL_GetTick>
 8003868:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	e00b      	b.n	8003886 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe ffc7 	bl	8002800 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e23c      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003886:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800388a:	2202      	movs	r2, #2
 800388c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038a2:	2202      	movs	r2, #2
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038b4:	601a      	str	r2, [r3, #0]
  return result;
 80038b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_OscConfig+0x9f2>
 80038d0:	4b95      	ldr	r3, [pc, #596]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	e00d      	b.n	80038f2 <HAL_RCC_OscConfig+0xa0e>
 80038d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038da:	2202      	movs	r2, #2
 80038dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	4b8e      	ldr	r3, [pc, #568]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80038f6:	2102      	movs	r1, #2
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	fa92 f1a2 	rbit	r1, r2
 8003904:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003908:	6011      	str	r1, [r2, #0]
  return result;
 800390a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fab2 f282 	clz	r2, r2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1a0      	bne.n	800386e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800392c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003930:	2b01      	cmp	r3, #1
 8003932:	d105      	bne.n	8003940 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003934:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	4a7b      	ldr	r2, [pc, #492]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 81d9 	beq.w	8003cfe <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394c:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	f000 81a6 	beq.w	8003ca6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b02      	cmp	r3, #2
 8003962:	f040 811e 	bne.w	8003ba2 <HAL_RCC_OscConfig+0xcbe>
 8003966:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800396a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800396e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800397e:	601a      	str	r2, [r3, #0]
  return result;
 8003980:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003984:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe ff30 	bl	8002800 <HAL_GetTick>
 80039a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	e009      	b.n	80039ba <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe ff2b 	bl	8002800 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1a2      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 80039ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fa93 f2a3 	rbit	r2, r3
 80039ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039d2:	601a      	str	r2, [r3, #0]
  return result;
 80039d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_OscConfig+0xb10>
 80039ee:	4b4e      	ldr	r3, [pc, #312]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	e01b      	b.n	8003a2c <HAL_RCC_OscConfig+0xb48>
 80039f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80039f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fa93 f2a3 	rbit	r2, r3
 8003a08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	fa93 f2a3 	rbit	r2, r3
 8003a22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003a30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a34:	6011      	str	r1, [r2, #0]
 8003a36:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	fa92 f1a2 	rbit	r1, r2
 8003a40:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a44:	6011      	str	r1, [r2, #0]
  return result;
 8003a46:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	fab2 f282 	clz	r2, r2
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	f042 0220 	orr.w	r2, r2, #32
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f002 021f 	and.w	r2, r2, #31
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d19e      	bne.n	80039a6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f023 020f 	bic.w	r2, r3, #15
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	492c      	ldr	r1, [pc, #176]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a19      	ldr	r1, [r3, #32]
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	4925      	ldr	r1, [pc, #148]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fa93 f2a3 	rbit	r2, r3
 8003aac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ab0:	601a      	str	r2, [r3, #0]
  return result;
 8003ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ab6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2301      	movs	r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fe97 	bl	8002800 <HAL_GetTick>
 8003ad2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ad6:	e009      	b.n	8003aec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fe fe92 	bl	8002800 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e109      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003aec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	fa93 f2a3 	rbit	r2, r3
 8003b00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b04:	601a      	str	r2, [r3, #0]
  return result;
 8003b06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCC_OscConfig+0xc48>
 8003b20:	4b01      	ldr	r3, [pc, #4]	; (8003b28 <HAL_RCC_OscConfig+0xc44>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	e01e      	b.n	8003b64 <HAL_RCC_OscConfig+0xc80>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa93 f2a3 	rbit	r2, r3
 8003b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	fa93 f2a3 	rbit	r2, r3
 8003b5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b6c:	6011      	str	r1, [r2, #0]
 8003b6e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	fa92 f1a2 	rbit	r1, r2
 8003b78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b7c:	6011      	str	r1, [r2, #0]
  return result;
 8003b7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f002 021f 	and.w	r2, r2, #31
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d09b      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xbf4>
 8003ba0:	e0ad      	b.n	8003cfe <HAL_RCC_OscConfig+0xe1a>
 8003ba2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	fa93 f2a3 	rbit	r2, r3
 8003bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bba:	601a      	str	r2, [r3, #0]
  return result;
 8003bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fe12 	bl	8002800 <HAL_GetTick>
 8003bdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	e009      	b.n	8003bf6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be2:	f7fe fe0d 	bl	8002800 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e084      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
 8003bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	fa93 f2a3 	rbit	r2, r3
 8003c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c0e:	601a      	str	r2, [r3, #0]
  return result;
 8003c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_RCC_OscConfig+0xd4c>
 8003c2a:	4b38      	ldr	r3, [pc, #224]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0xd84>
 8003c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fa93 f2a3 	rbit	r2, r3
 8003c44:	f107 0320 	add.w	r3, r7, #32
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f107 031c 	add.w	r3, r7, #28
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	fa93 f2a3 	rbit	r2, r3
 8003c5e:	f107 0318 	add.w	r3, r7, #24
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f107 0214 	add.w	r2, r7, #20
 8003c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	f107 0214 	add.w	r2, r7, #20
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	fa92 f1a2 	rbit	r1, r2
 8003c7c:	f107 0210 	add.w	r2, r7, #16
 8003c80:	6011      	str	r1, [r2, #0]
  return result;
 8003c82:	f107 0210 	add.w	r2, r7, #16
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	fab2 f282 	clz	r2, r2
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f042 0220 	orr.w	r2, r2, #32
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f002 021f 	and.w	r2, r2, #31
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d19e      	bne.n	8003be2 <HAL_RCC_OscConfig+0xcfe>
 8003ca4:	e02b      	b.n	8003cfe <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e025      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_RCC_OscConfig+0xe28>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cc8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d111      	bne.n	8003cfa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003cd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d108      	bne.n	8003cfa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cec:	f003 020f 	and.w	r2, r3, #15
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b09e      	sub	sp, #120	; 0x78
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e162      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b90      	ldr	r3, [pc, #576]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	498b      	ldr	r1, [pc, #556]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e14a      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b82      	ldr	r3, [pc, #520]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	497f      	ldr	r1, [pc, #508]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80dc 	beq.w	8003f3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d13c      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xf6>
 8003d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xa6>
 8003db0:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e00f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0xc6>
 8003db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dda:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003de6:	fab2 f282 	clz	r2, r2
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	f042 0220 	orr.w	r2, r2, #32
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	f002 021f 	and.w	r2, r2, #31
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d17b      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0f3      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d13c      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x178>
 8003e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x128>
 8003e32:	4b4f      	ldr	r3, [pc, #316]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	e00f      	b.n	8003e58 <HAL_RCC_ClockConfig+0x148>
 8003e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	647b      	str	r3, [r7, #68]	; 0x44
 8003e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e60:	fa92 f2a2 	rbit	r2, r2
 8003e64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e68:	fab2 f282 	clz	r2, r2
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f042 0220 	orr.w	r2, r2, #32
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	f002 021f 	and.w	r2, r2, #31
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13a      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b2      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x1a0>
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	e00d      	b.n	8003ecc <HAL_RCC_ClockConfig+0x1bc>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2202      	movs	r2, #2
 8003ece:	61ba      	str	r2, [r7, #24]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	fa92 f2a2 	rbit	r2, r2
 8003ed6:	617a      	str	r2, [r7, #20]
  return result;
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	fab2 f282 	clz	r2, r2
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f042 0220 	orr.w	r2, r2, #32
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f002 021f 	and.w	r2, r2, #31
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e079      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	491a      	ldr	r1, [pc, #104]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fe fc78 	bl	8002800 <HAL_GetTick>
 8003f10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f14:	f7fe fc74 	bl	8002800 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e061      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d214      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 0207 	bic.w	r2, r3, #7
 8003f52:	4906      	ldr	r1, [pc, #24]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_ClockConfig+0x25c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e040      	b.n	8003fee <HAL_RCC_ClockConfig+0x2de>
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	491a      	ldr	r1, [pc, #104]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4912      	ldr	r1, [pc, #72]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fb2:	f000 f829 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	22f0      	movs	r2, #240	; 0xf0
 8003fc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	fa92 f2a2 	rbit	r2, r2
 8003fca:	60fa      	str	r2, [r7, #12]
  return result;
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	fab2 f282 	clz	r2, r2
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	40d3      	lsrs	r3, r2
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x2ec>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	fa21 f303 	lsr.w	r3, r1, r3
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <HAL_RCC_ClockConfig+0x2f0>)
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_RCC_ClockConfig+0x2f4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fbc6 	bl	8002778 <HAL_InitTick>
  
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3778      	adds	r7, #120	; 0x78
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	0800bd48 	.word	0x0800bd48
 8004000:	20000004 	.word	0x20000004
 8004004:	20000008 	.word	0x20000008

08004008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	b08b      	sub	sp, #44	; 0x2c
 800400c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	2300      	movs	r3, #0
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b04      	cmp	r3, #4
 8004030:	d002      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x30>
 8004032:	2b08      	cmp	r3, #8
 8004034:	d003      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x36>
 8004036:	e03f      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800403a:	623b      	str	r3, [r7, #32]
      break;
 800403c:	e03f      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004044:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004048:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	fa92 f2a2 	rbit	r2, r2
 8004050:	607a      	str	r2, [r7, #4]
  return result;
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	fab2 f282 	clz	r2, r2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	40d3      	lsrs	r3, r2
 800405c:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	220f      	movs	r2, #15
 800406c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	fa92 f2a2 	rbit	r2, r2
 8004074:	60fa      	str	r2, [r7, #12]
  return result;
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	fab2 f282 	clz	r2, r2
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	40d3      	lsrs	r3, r2
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004090:	4a0f      	ldr	r2, [pc, #60]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	fbb2 f2f3 	udiv	r2, r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	e007      	b.n	80040b2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040a2:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	623b      	str	r3, [r7, #32]
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80040ba:	623b      	str	r3, [r7, #32]
      break;
 80040bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040be:	6a3b      	ldr	r3, [r7, #32]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	372c      	adds	r7, #44	; 0x2c
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40021000 	.word	0x40021000
 80040d0:	007a1200 	.word	0x007a1200
 80040d4:	0800bd60 	.word	0x0800bd60
 80040d8:	0800bd70 	.word	0x0800bd70

080040dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000004 	.word	0x20000004

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80040fa:	f7ff ffef 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fe:	4601      	mov	r1, r0
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004108:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800410c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	fa92 f2a2 	rbit	r2, r2
 8004114:	603a      	str	r2, [r7, #0]
  return result;
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	fab2 f282 	clz	r2, r2
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	40d3      	lsrs	r3, r2
 8004120:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	0800bd58 	.word	0x0800bd58

08004138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800413e:	f7ff ffcd 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 8004142:	4601      	mov	r1, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800414c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004150:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	fa92 f2a2 	rbit	r2, r2
 8004158:	603a      	str	r2, [r7, #0]
  return result;
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	40d3      	lsrs	r3, r2
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	0800bd58 	.word	0x0800bd58

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b092      	sub	sp, #72	; 0x48
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80d4 	beq.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a0:	4b4e      	ldr	r3, [pc, #312]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10e      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	61d3      	str	r3, [r2, #28]
 80041b8:	4b48      	ldr	r3, [pc, #288]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d118      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d6:	4b42      	ldr	r3, [pc, #264]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a41      	ldr	r2, [pc, #260]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e2:	f7fe fb0d 	bl	8002800 <HAL_GetTick>
 80041e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7fe fb09 	bl	8002800 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b64      	cmp	r3, #100	; 0x64
 80041f6:	d901      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e1d6      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b38      	ldr	r3, [pc, #224]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004208:	4b34      	ldr	r3, [pc, #208]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8084 	beq.w	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004224:	429a      	cmp	r2, r3
 8004226:	d07c      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004228:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	461a      	mov	r2, r3
 8004252:	2301      	movs	r3, #1
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	461a      	mov	r2, r3
 8004276:	2300      	movs	r3, #0
 8004278:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d04b      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428a:	f7fe fab9 	bl	8002800 <HAL_GetTick>
 800428e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fe fab5 	bl	8002800 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e180      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042a8:	2302      	movs	r3, #2
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	2302      	movs	r3, #2
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	61fb      	str	r3, [r7, #28]
  return result;
 80042c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d108      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042d6:	4b01      	ldr	r3, [pc, #4]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	e00d      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40007000 	.word	0x40007000
 80042e4:	10908100 	.word	0x10908100
 80042e8:	2302      	movs	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	4ba0      	ldr	r3, [pc, #640]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2202      	movs	r2, #2
 80042fa:	613a      	str	r2, [r7, #16]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	fa92 f2a2 	rbit	r2, r2
 8004302:	60fa      	str	r2, [r7, #12]
  return result;
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	fab2 f282 	clz	r2, r2
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f002 021f 	and.w	r2, r2, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f202 	lsl.w	r2, r1, r2
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0b7      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004322:	4b95      	ldr	r3, [pc, #596]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4992      	ldr	r1, [pc, #584]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004334:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433c:	4b8e      	ldr	r3, [pc, #568]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	4a8d      	ldr	r2, [pc, #564]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004346:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004354:	4b88      	ldr	r3, [pc, #544]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f023 0203 	bic.w	r2, r3, #3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4985      	ldr	r1, [pc, #532]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004372:	4b81      	ldr	r3, [pc, #516]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	497e      	ldr	r1, [pc, #504]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004390:	4b79      	ldr	r3, [pc, #484]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4976      	ldr	r1, [pc, #472]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ae:	4b72      	ldr	r3, [pc, #456]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f023 0210 	bic.w	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	496f      	ldr	r1, [pc, #444]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043cc:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	4967      	ldr	r1, [pc, #412]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ea:	4b63      	ldr	r3, [pc, #396]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f023 0220 	bic.w	r2, r3, #32
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4960      	ldr	r1, [pc, #384]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004408:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	4958      	ldr	r1, [pc, #352]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004426:	4b54      	ldr	r3, [pc, #336]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4951      	ldr	r1, [pc, #324]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004444:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	4949      	ldr	r1, [pc, #292]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004462:	4b45      	ldr	r3, [pc, #276]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4942      	ldr	r1, [pc, #264]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004480:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	493a      	ldr	r1, [pc, #232]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800449e:	4b36      	ldr	r3, [pc, #216]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4933      	ldr	r1, [pc, #204]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044bc:	4b2e      	ldr	r3, [pc, #184]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	492b      	ldr	r1, [pc, #172]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80044da:	4b27      	ldr	r3, [pc, #156]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	4924      	ldr	r1, [pc, #144]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80044f8:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	491c      	ldr	r1, [pc, #112]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004506:	4313      	orrs	r3, r2
 8004508:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	4915      	ldr	r1, [pc, #84]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	490d      	ldr	r1, [pc, #52]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455e:	4906      	ldr	r1, [pc, #24]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004560:	4313      	orrs	r3, r2
 8004562:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00c      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	e002      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	490b      	ldr	r1, [pc, #44]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004586:	4313      	orrs	r3, r2
 8004588:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	4904      	ldr	r1, [pc, #16]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3748      	adds	r7, #72	; 0x48
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e09d      	b.n	8004706 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d108      	bne.n	80045e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045da:	d009      	beq.n	80045f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	61da      	str	r2, [r3, #28]
 80045e2:	e005      	b.n	80045f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fdc4 	bl	8002198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004630:	d902      	bls.n	8004638 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e002      	b.n	800463e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800463c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004646:	d007      	beq.n	8004658 <HAL_SPI_Init+0xa0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004650:	d002      	beq.n	8004658 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	ea42 0103 	orr.w	r1, r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	f003 0204 	and.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046d4:	ea42 0103 	orr.w	r1, r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b088      	sub	sp, #32
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_SPI_Transmit+0x22>
 800472c:	2302      	movs	r3, #2
 800472e:	e158      	b.n	80049e2 <HAL_SPI_Transmit+0x2d4>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004738:	f7fe f862 	bl	8002800 <HAL_GetTick>
 800473c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d002      	beq.n	8004754 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004752:	e13d      	b.n	80049d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_SPI_Transmit+0x52>
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004764:	e134      	b.n	80049d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	d10f      	bne.n	80047d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d007      	beq.n	80047f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f8:	d94b      	bls.n	8004892 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_SPI_Transmit+0xfa>
 8004802:	8afb      	ldrh	r3, [r7, #22]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d13e      	bne.n	8004886 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800482c:	e02b      	b.n	8004886 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d112      	bne.n	8004862 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	881a      	ldrh	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	1c9a      	adds	r2, r3, #2
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004860:	e011      	b.n	8004886 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004862:	f7fd ffcd 	bl	8002800 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d803      	bhi.n	800487a <HAL_SPI_Transmit+0x16c>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d102      	bne.n	8004880 <HAL_SPI_Transmit+0x172>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004884:	e0a4      	b.n	80049d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ce      	bne.n	800482e <HAL_SPI_Transmit+0x120>
 8004890:	e07c      	b.n	800498c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_SPI_Transmit+0x192>
 800489a:	8afb      	ldrh	r3, [r7, #22]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d170      	bne.n	8004982 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d912      	bls.n	80048d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	1c9a      	adds	r2, r3, #2
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b02      	subs	r3, #2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ce:	e058      	b.n	8004982 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80048f6:	e044      	b.n	8004982 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d12b      	bne.n	800495e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d912      	bls.n	8004936 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	881a      	ldrh	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	1c9a      	adds	r2, r3, #2
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b02      	subs	r3, #2
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004934:	e025      	b.n	8004982 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	7812      	ldrb	r2, [r2, #0]
 8004942:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495c:	e011      	b.n	8004982 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495e:	f7fd ff4f 	bl	8002800 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d803      	bhi.n	8004976 <HAL_SPI_Transmit+0x268>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d102      	bne.n	800497c <HAL_SPI_Transmit+0x26e>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004980:	e026      	b.n	80049d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1b5      	bne.n	80048f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f957 	bl	8004c44 <SPI_EndRxTxTransaction>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e000      	b.n	80049d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80049ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049f8:	b2db      	uxtb	r3, r3
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a18:	f7fd fef2 	bl	8002800 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a28:	f7fd feea 	bl	8002800 <HAL_GetTick>
 8004a2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	015b      	lsls	r3, r3, #5
 8004a34:	0d1b      	lsrs	r3, r3, #20
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a3e:	e054      	b.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d050      	beq.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a48:	f7fd feda 	bl	8002800 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d902      	bls.n	8004a5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d13d      	bne.n	8004ada <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a76:	d111      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	d004      	beq.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d107      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa4:	d10f      	bne.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e017      	b.n	8004b0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4013      	ands	r3, r2
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	bf0c      	ite	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	2300      	movne	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d19b      	bne.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000004 	.word	0x20000004

08004b18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b2a:	f7fd fe69 	bl	8002800 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	4413      	add	r3, r2
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b3a:	f7fd fe61 	bl	8002800 <HAL_GetTick>
 8004b3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b48:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	00da      	lsls	r2, r3, #3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	0d1b      	lsrs	r3, r3, #20
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b60:	e060      	b.n	8004c24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b68:	d107      	bne.n	8004b7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d050      	beq.n	8004c24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b82:	f7fd fe3d 	bl	8002800 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d902      	bls.n	8004b98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d13d      	bne.n	8004c14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb0:	d111      	bne.n	8004bd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bba:	d004      	beq.n	8004bc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc4:	d107      	bne.n	8004bd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d10f      	bne.n	8004c00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e010      	b.n	8004c36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d196      	bne.n	8004b62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3728      	adds	r7, #40	; 0x28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000004 	.word	0x20000004

08004c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff5b 	bl	8004b18 <SPI_WaitFifoStateUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e027      	b.n	8004cc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff fec0 	bl	8004a08 <SPI_WaitFlagStateUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e014      	b.n	8004cc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff ff34 	bl	8004b18 <SPI_WaitFifoStateUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e000      	b.n	8004cc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e049      	b.n	8004d76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd fc5e 	bl	80025b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f000 fac0 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d001      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e04f      	b.n	8004e38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01d      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc2:	d018      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00e      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d009      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_TIM_Base_Start_IT+0x76>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d115      	bne.n	8004e22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b06      	cmp	r3, #6
 8004e06:	d015      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d011      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e20:	e008      	b.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	e000      	b.n	8004e36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40013400 	.word	0x40013400
 8004e54:	40014000 	.word	0x40014000
 8004e58:	40015000 	.word	0x40015000
 8004e5c:	00010007 	.word	0x00010007

08004e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0202 	mvn.w	r2, #2
 8004e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9d8 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9ca 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f9db 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0204 	mvn.w	r2, #4
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9ae 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9a0 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9b1 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0208 	mvn.w	r2, #8
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f984 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f976 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f987 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0210 	mvn.w	r2, #16
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f95a 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f94c 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f95d 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0201 	mvn.w	r2, #1
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f926 	bl	8005230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d10e      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fb10 	bl	8005630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501e:	d10e      	bne.n	800503e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d107      	bne.n	800503e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fb03 	bl	8005644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d10e      	bne.n	800506a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d107      	bne.n	800506a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f90b 	bl	8005280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b20      	cmp	r3, #32
 8005076:	d10e      	bne.n	8005096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d107      	bne.n	8005096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0220 	mvn.w	r2, #32
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fac3 	bl	800561c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_TIM_ConfigClockSource+0x1c>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e0b6      	b.n	8005228 <HAL_TIM_ConfigClockSource+0x18a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f6:	d03e      	beq.n	8005176 <HAL_TIM_ConfigClockSource+0xd8>
 80050f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fc:	f200 8087 	bhi.w	800520e <HAL_TIM_ConfigClockSource+0x170>
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005104:	f000 8086 	beq.w	8005214 <HAL_TIM_ConfigClockSource+0x176>
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d87f      	bhi.n	800520e <HAL_TIM_ConfigClockSource+0x170>
 800510e:	2b70      	cmp	r3, #112	; 0x70
 8005110:	d01a      	beq.n	8005148 <HAL_TIM_ConfigClockSource+0xaa>
 8005112:	2b70      	cmp	r3, #112	; 0x70
 8005114:	d87b      	bhi.n	800520e <HAL_TIM_ConfigClockSource+0x170>
 8005116:	2b60      	cmp	r3, #96	; 0x60
 8005118:	d050      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x11e>
 800511a:	2b60      	cmp	r3, #96	; 0x60
 800511c:	d877      	bhi.n	800520e <HAL_TIM_ConfigClockSource+0x170>
 800511e:	2b50      	cmp	r3, #80	; 0x50
 8005120:	d03c      	beq.n	800519c <HAL_TIM_ConfigClockSource+0xfe>
 8005122:	2b50      	cmp	r3, #80	; 0x50
 8005124:	d873      	bhi.n	800520e <HAL_TIM_ConfigClockSource+0x170>
 8005126:	2b40      	cmp	r3, #64	; 0x40
 8005128:	d058      	beq.n	80051dc <HAL_TIM_ConfigClockSource+0x13e>
 800512a:	2b40      	cmp	r3, #64	; 0x40
 800512c:	d86f      	bhi.n	800520e <HAL_TIM_ConfigClockSource+0x170>
 800512e:	2b30      	cmp	r3, #48	; 0x30
 8005130:	d064      	beq.n	80051fc <HAL_TIM_ConfigClockSource+0x15e>
 8005132:	2b30      	cmp	r3, #48	; 0x30
 8005134:	d86b      	bhi.n	800520e <HAL_TIM_ConfigClockSource+0x170>
 8005136:	2b20      	cmp	r3, #32
 8005138:	d060      	beq.n	80051fc <HAL_TIM_ConfigClockSource+0x15e>
 800513a:	2b20      	cmp	r3, #32
 800513c:	d867      	bhi.n	800520e <HAL_TIM_ConfigClockSource+0x170>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d05c      	beq.n	80051fc <HAL_TIM_ConfigClockSource+0x15e>
 8005142:	2b10      	cmp	r3, #16
 8005144:	d05a      	beq.n	80051fc <HAL_TIM_ConfigClockSource+0x15e>
 8005146:	e062      	b.n	800520e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6899      	ldr	r1, [r3, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f000 f9b4 	bl	80054c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800516a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	609a      	str	r2, [r3, #8]
      break;
 8005174:	e04f      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	6899      	ldr	r1, [r3, #8]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f000 f99d 	bl	80054c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005198:	609a      	str	r2, [r3, #8]
      break;
 800519a:	e03c      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f000 f911 	bl	80053d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2150      	movs	r1, #80	; 0x50
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f96a 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 80051ba:	e02c      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f000 f930 	bl	800542e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2160      	movs	r1, #96	; 0x60
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f95a 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 80051da:	e01c      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	461a      	mov	r2, r3
 80051ea:	f000 f8f1 	bl	80053d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2140      	movs	r1, #64	; 0x40
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f94a 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 80051fa:	e00c      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 f941 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 800520c:	e003      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
      break;
 8005212:	e000      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005214:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a42      	ldr	r2, [pc, #264]	; (80053b0 <TIM_Base_SetConfig+0x11c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d00f      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3f      	ldr	r2, [pc, #252]	; (80053b4 <TIM_Base_SetConfig+0x120>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3e      	ldr	r2, [pc, #248]	; (80053b8 <TIM_Base_SetConfig+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3d      	ldr	r2, [pc, #244]	; (80053bc <TIM_Base_SetConfig+0x128>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <TIM_Base_SetConfig+0x12c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d108      	bne.n	80052e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a31      	ldr	r2, [pc, #196]	; (80053b0 <TIM_Base_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2e      	ldr	r2, [pc, #184]	; (80053b4 <TIM_Base_SetConfig+0x120>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <TIM_Base_SetConfig+0x124>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <TIM_Base_SetConfig+0x128>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <TIM_Base_SetConfig+0x130>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <TIM_Base_SetConfig+0x134>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2a      	ldr	r2, [pc, #168]	; (80053cc <TIM_Base_SetConfig+0x138>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <TIM_Base_SetConfig+0x12c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <TIM_Base_SetConfig+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <TIM_Base_SetConfig+0x100>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a13      	ldr	r2, [pc, #76]	; (80053bc <TIM_Base_SetConfig+0x128>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00f      	beq.n	8005394 <TIM_Base_SetConfig+0x100>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <TIM_Base_SetConfig+0x130>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00b      	beq.n	8005394 <TIM_Base_SetConfig+0x100>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <TIM_Base_SetConfig+0x134>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_Base_SetConfig+0x100>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a11      	ldr	r2, [pc, #68]	; (80053cc <TIM_Base_SetConfig+0x138>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_Base_SetConfig+0x100>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <TIM_Base_SetConfig+0x12c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d103      	bne.n	800539c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	615a      	str	r2, [r3, #20]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40015000 	.word	0x40015000
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800

080053d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0201 	bic.w	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 030a 	bic.w	r3, r3, #10
 800540c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0210 	bic.w	r2, r3, #16
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	031b      	lsls	r3, r3, #12
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800546a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	621a      	str	r2, [r3, #32]
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f043 0307 	orr.w	r3, r3, #7
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	609a      	str	r2, [r3, #8]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005518:	2302      	movs	r3, #2
 800551a:	e06d      	b.n	80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a30      	ldr	r2, [pc, #192]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2d      	ldr	r2, [pc, #180]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d108      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005560:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d01d      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d018      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a15      	ldr	r2, [pc, #84]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10c      	bne.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40013400 	.word	0x40013400
 800560c:	40015000 	.word	0x40015000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40014000 	.word	0x40014000

0800561c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e040      	b.n	80056ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc fff2 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2224      	movs	r2, #36	; 0x24
 8005684:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fcd0 	bl	800603c <UART_SetConfig>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e022      	b.n	80056ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fe9a 	bl	80063e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 ff21 	bl	800652c <UART_CheckIdleState>
 80056ea:	4603      	mov	r3, r0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b08b      	sub	sp, #44	; 0x2c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005706:	2b20      	cmp	r3, #32
 8005708:	d156      	bne.n	80057b8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Transmit_IT+0x22>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e04f      	b.n	80057ba <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_UART_Transmit_IT+0x34>
 8005724:	2302      	movs	r3, #2
 8005726:	e048      	b.n	80057ba <HAL_UART_Transmit_IT+0xc6>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2221      	movs	r2, #33	; 0x21
 8005758:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005762:	d107      	bne.n	8005774 <HAL_UART_Transmit_IT+0x80>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <HAL_UART_Transmit_IT+0xd4>)
 8005770:	669a      	str	r2, [r3, #104]	; 0x68
 8005772:	e002      	b.n	800577a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <HAL_UART_Transmit_IT+0xd8>)
 8005778:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	613b      	str	r3, [r7, #16]
   return(result);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	623b      	str	r3, [r7, #32]
 80057a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e6      	bne.n	8005782 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e000      	b.n	80057ba <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	372c      	adds	r7, #44	; 0x2c
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	08006a93 	.word	0x08006a93
 80057cc:	080069db 	.word	0x080069db

080057d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	; 0x28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d13d      	bne.n	8005862 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_UART_Receive_IT+0x22>
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e036      	b.n	8005864 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_UART_Receive_IT+0x34>
 8005800:	2302      	movs	r3, #2
 8005802:	e02f      	b.n	8005864 <HAL_UART_Receive_IT+0x94>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d018      	beq.n	8005852 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	613b      	str	r3, [r7, #16]
   return(result);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	623b      	str	r3, [r7, #32]
 8005840:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	69f9      	ldr	r1, [r7, #28]
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	61bb      	str	r3, [r7, #24]
   return(result);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e6      	bne.n	8005820 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	461a      	mov	r2, r3
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 ff75 	bl	8006748 <UART_Start_Receive_IT>
 800585e:	4603      	mov	r3, r0
 8005860:	e000      	b.n	8005864 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3728      	adds	r7, #40	; 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b09a      	sub	sp, #104	; 0x68
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005888:	667b      	str	r3, [r7, #100]	; 0x64
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005892:	657b      	str	r3, [r7, #84]	; 0x54
 8005894:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e6      	bne.n	8005874 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3308      	adds	r3, #8
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	663b      	str	r3, [r7, #96]	; 0x60
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058c6:	643a      	str	r2, [r7, #64]	; 0x40
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e5      	bne.n	80058a6 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d118      	bne.n	8005914 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f023 0310 	bic.w	r3, r3, #16
 80058f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005902:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e6      	bne.n	80058e2 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d14e      	bne.n	80059c0 <HAL_UART_AbortReceive_IT+0x154>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	60bb      	str	r3, [r7, #8]
   return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005938:	65bb      	str	r3, [r7, #88]	; 0x58
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005942:	61ba      	str	r2, [r7, #24]
 8005944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	613b      	str	r3, [r7, #16]
   return(result);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	2b00      	cmp	r3, #0
 800595c:	d013      	beq.n	8005986 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <HAL_UART_AbortReceive_IT+0x188>)
 8005964:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd f8c2 	bl	8002af4 <HAL_DMA_Abort_IT>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d038      	beq.n	80059e8 <HAL_UART_AbortReceive_IT+0x17c>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005980:	4610      	mov	r0, r2
 8005982:	4798      	blx	r3
 8005984:	e030      	b.n	80059e8 <HAL_UART_AbortReceive_IT+0x17c>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	220f      	movs	r2, #15
 800599a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0208 	orr.w	r2, r2, #8
 80059aa:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb29 	bl	8006010 <HAL_UART_AbortReceiveCpltCallback>
 80059be:	e013      	b.n	80059e8 <HAL_UART_AbortReceive_IT+0x17c>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	220f      	movs	r2, #15
 80059d4:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fb14 	bl	8006010 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3768      	adds	r7, #104	; 0x68
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	08006993 	.word	0x08006993

080059f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b0ba      	sub	sp, #232	; 0xe8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a22:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a26:	4013      	ands	r3, r2
 8005a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d115      	bne.n	8005a60 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00f      	beq.n	8005a60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 82b3 	beq.w	8005fbc <HAL_UART_IRQHandler+0x5c4>
      {
        huart->RxISR(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
      }
      return;
 8005a5e:	e2ad      	b.n	8005fbc <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8117 	beq.w	8005c98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a7a:	4b85      	ldr	r3, [pc, #532]	; (8005c90 <HAL_UART_IRQHandler+0x298>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 810a 	beq.w	8005c98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d011      	beq.n	8005ab4 <HAL_UART_IRQHandler+0xbc>
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d011      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xec>
 8005ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ada:	f043 0204 	orr.w	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d011      	beq.n	8005b14 <HAL_UART_IRQHandler+0x11c>
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2204      	movs	r2, #4
 8005b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b0a:	f043 0202 	orr.w	r2, r3, #2
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d017      	beq.n	8005b50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b46:	f043 0208 	orr.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <HAL_UART_IRQHandler+0x18a>
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8219 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x5c8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d005      	beq.n	8005bda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d04f      	beq.n	8005c7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fe60 	bl	80068a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d141      	bne.n	8005c72 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1d9      	bne.n	8005bee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d013      	beq.n	8005c6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	4a13      	ldr	r2, [pc, #76]	; (8005c94 <HAL_UART_IRQHandler+0x29c>)
 8005c48:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fc ff50 	bl	8002af4 <HAL_DMA_Abort_IT>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d017      	beq.n	8005c8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005c64:	4610      	mov	r0, r2
 8005c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	e00f      	b.n	8005c8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9c6 	bl	8005ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	e00b      	b.n	8005c8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9c2 	bl	8005ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	e007      	b.n	8005c8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9be 	bl	8005ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005c88:	e19a      	b.n	8005fc0 <HAL_UART_IRQHandler+0x5c8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8a:	bf00      	nop
    return;
 8005c8c:	e198      	b.n	8005fc0 <HAL_UART_IRQHandler+0x5c8>
 8005c8e:	bf00      	nop
 8005c90:	04000120 	.word	0x04000120
 8005c94:	08006967 	.word	0x08006967

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	f040 8143 	bne.w	8005f28 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 813c 	beq.w	8005f28 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8135 	beq.w	8005f28 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	f040 80b1 	bne.w	8005e38 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ce2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 816c 	beq.w	8005fc4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	f080 8164 	bcs.w	8005fc4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	f000 8085 	beq.w	8005e1c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1da      	bne.n	8005d12 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3308      	adds	r3, #8
 8005d62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e1      	bne.n	8005d5c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3308      	adds	r3, #8
 8005db8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005dbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e3      	bne.n	8005d98 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dec:	f023 0310 	bic.w	r3, r3, #16
 8005df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e4      	bne.n	8005ddc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fe33 	bl	8002a82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8f7 	bl	8006024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e36:	e0c5      	b.n	8005fc4 <HAL_UART_IRQHandler+0x5cc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80b7 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x5d0>
          && (nb_rx_data > 0U))
 8005e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80b2 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x5d0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e86:	647b      	str	r3, [r7, #68]	; 0x44
 8005e88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e4      	bne.n	8005e64 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ebe:	633a      	str	r2, [r7, #48]	; 0x30
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e3      	bne.n	8005e9a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f023 0310 	bic.w	r3, r3, #16
 8005ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	69b9      	ldr	r1, [r7, #24]
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	617b      	str	r3, [r7, #20]
   return(result);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e4      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f87f 	bl	8006024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f26:	e04f      	b.n	8005fc8 <HAL_UART_IRQHandler+0x5d0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <HAL_UART_IRQHandler+0x55a>
 8005f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 ff87 	bl	8006e5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f50:	e03d      	b.n	8005fce <HAL_UART_IRQHandler+0x5d6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00e      	beq.n	8005f7c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02c      	beq.n	8005fcc <HAL_UART_IRQHandler+0x5d4>
    {
      huart->TxISR(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
    }
    return;
 8005f7a:	e027      	b.n	8005fcc <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_UART_IRQHandler+0x5a4>
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_UART_IRQHandler+0x5a4>
  {
    UART_EndTransmit_IT(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fddc 	bl	8006b52 <UART_EndTransmit_IT>
    return;
 8005f9a:	e018      	b.n	8005fce <HAL_UART_IRQHandler+0x5d6>
  }

  if (((isrflags & USART_ISR_IDLE) != 0U) && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d012      	beq.n	8005fce <HAL_UART_IRQHandler+0x5d6>
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <HAL_UART_IRQHandler+0x5d6>
    {
	  HAL_UART_IDLE_Callback(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fc f86f 	bl	8002098 <HAL_UART_IDLE_Callback>
      return;
 8005fba:	e008      	b.n	8005fce <HAL_UART_IRQHandler+0x5d6>
      return;
 8005fbc:	bf00      	nop
 8005fbe:	e006      	b.n	8005fce <HAL_UART_IRQHandler+0x5d6>
    return;
 8005fc0:	bf00      	nop
 8005fc2:	e004      	b.n	8005fce <HAL_UART_IRQHandler+0x5d6>
      return;
 8005fc4:	bf00      	nop
 8005fc6:	e002      	b.n	8005fce <HAL_UART_IRQHandler+0x5d6>
      return;
 8005fc8:	bf00      	nop
 8005fca:	e000      	b.n	8005fce <HAL_UART_IRQHandler+0x5d6>
    return;
 8005fcc:	bf00      	nop
    }
}
 8005fce:	37e8      	adds	r7, #232	; 0xe8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4bab      	ldr	r3, [pc, #684]	; (8006314 <UART_SetConfig+0x2d8>)
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	6979      	ldr	r1, [r7, #20]
 8006070:	430b      	orrs	r3, r1
 8006072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a99      	ldr	r2, [pc, #612]	; (8006318 <UART_SetConfig+0x2dc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d120      	bne.n	80060fa <UART_SetConfig+0xbe>
 80060b8:	4b98      	ldr	r3, [pc, #608]	; (800631c <UART_SetConfig+0x2e0>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d817      	bhi.n	80060f4 <UART_SetConfig+0xb8>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <UART_SetConfig+0x90>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060dd 	.word	0x080060dd
 80060d0:	080060e9 	.word	0x080060e9
 80060d4:	080060ef 	.word	0x080060ef
 80060d8:	080060e3 	.word	0x080060e3
 80060dc:	2301      	movs	r3, #1
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e0b5      	b.n	800624e <UART_SetConfig+0x212>
 80060e2:	2302      	movs	r3, #2
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e0b2      	b.n	800624e <UART_SetConfig+0x212>
 80060e8:	2304      	movs	r3, #4
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e0af      	b.n	800624e <UART_SetConfig+0x212>
 80060ee:	2308      	movs	r3, #8
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e0ac      	b.n	800624e <UART_SetConfig+0x212>
 80060f4:	2310      	movs	r3, #16
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e0a9      	b.n	800624e <UART_SetConfig+0x212>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a88      	ldr	r2, [pc, #544]	; (8006320 <UART_SetConfig+0x2e4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d124      	bne.n	800614e <UART_SetConfig+0x112>
 8006104:	4b85      	ldr	r3, [pc, #532]	; (800631c <UART_SetConfig+0x2e0>)
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800610c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006110:	d011      	beq.n	8006136 <UART_SetConfig+0xfa>
 8006112:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006116:	d817      	bhi.n	8006148 <UART_SetConfig+0x10c>
 8006118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800611c:	d011      	beq.n	8006142 <UART_SetConfig+0x106>
 800611e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006122:	d811      	bhi.n	8006148 <UART_SetConfig+0x10c>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <UART_SetConfig+0xf4>
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	d006      	beq.n	800613c <UART_SetConfig+0x100>
 800612e:	e00b      	b.n	8006148 <UART_SetConfig+0x10c>
 8006130:	2300      	movs	r3, #0
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e08b      	b.n	800624e <UART_SetConfig+0x212>
 8006136:	2302      	movs	r3, #2
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e088      	b.n	800624e <UART_SetConfig+0x212>
 800613c:	2304      	movs	r3, #4
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e085      	b.n	800624e <UART_SetConfig+0x212>
 8006142:	2308      	movs	r3, #8
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e082      	b.n	800624e <UART_SetConfig+0x212>
 8006148:	2310      	movs	r3, #16
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e07f      	b.n	800624e <UART_SetConfig+0x212>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a74      	ldr	r2, [pc, #464]	; (8006324 <UART_SetConfig+0x2e8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d124      	bne.n	80061a2 <UART_SetConfig+0x166>
 8006158:	4b70      	ldr	r3, [pc, #448]	; (800631c <UART_SetConfig+0x2e0>)
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006160:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006164:	d011      	beq.n	800618a <UART_SetConfig+0x14e>
 8006166:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800616a:	d817      	bhi.n	800619c <UART_SetConfig+0x160>
 800616c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006170:	d011      	beq.n	8006196 <UART_SetConfig+0x15a>
 8006172:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006176:	d811      	bhi.n	800619c <UART_SetConfig+0x160>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <UART_SetConfig+0x148>
 800617c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006180:	d006      	beq.n	8006190 <UART_SetConfig+0x154>
 8006182:	e00b      	b.n	800619c <UART_SetConfig+0x160>
 8006184:	2300      	movs	r3, #0
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e061      	b.n	800624e <UART_SetConfig+0x212>
 800618a:	2302      	movs	r3, #2
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e05e      	b.n	800624e <UART_SetConfig+0x212>
 8006190:	2304      	movs	r3, #4
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e05b      	b.n	800624e <UART_SetConfig+0x212>
 8006196:	2308      	movs	r3, #8
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e058      	b.n	800624e <UART_SetConfig+0x212>
 800619c:	2310      	movs	r3, #16
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e055      	b.n	800624e <UART_SetConfig+0x212>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a60      	ldr	r2, [pc, #384]	; (8006328 <UART_SetConfig+0x2ec>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d124      	bne.n	80061f6 <UART_SetConfig+0x1ba>
 80061ac:	4b5b      	ldr	r3, [pc, #364]	; (800631c <UART_SetConfig+0x2e0>)
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061b8:	d011      	beq.n	80061de <UART_SetConfig+0x1a2>
 80061ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061be:	d817      	bhi.n	80061f0 <UART_SetConfig+0x1b4>
 80061c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c4:	d011      	beq.n	80061ea <UART_SetConfig+0x1ae>
 80061c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ca:	d811      	bhi.n	80061f0 <UART_SetConfig+0x1b4>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <UART_SetConfig+0x19c>
 80061d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d4:	d006      	beq.n	80061e4 <UART_SetConfig+0x1a8>
 80061d6:	e00b      	b.n	80061f0 <UART_SetConfig+0x1b4>
 80061d8:	2300      	movs	r3, #0
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e037      	b.n	800624e <UART_SetConfig+0x212>
 80061de:	2302      	movs	r3, #2
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e034      	b.n	800624e <UART_SetConfig+0x212>
 80061e4:	2304      	movs	r3, #4
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e031      	b.n	800624e <UART_SetConfig+0x212>
 80061ea:	2308      	movs	r3, #8
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e02e      	b.n	800624e <UART_SetConfig+0x212>
 80061f0:	2310      	movs	r3, #16
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e02b      	b.n	800624e <UART_SetConfig+0x212>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a4c      	ldr	r2, [pc, #304]	; (800632c <UART_SetConfig+0x2f0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d124      	bne.n	800624a <UART_SetConfig+0x20e>
 8006200:	4b46      	ldr	r3, [pc, #280]	; (800631c <UART_SetConfig+0x2e0>)
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006208:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800620c:	d011      	beq.n	8006232 <UART_SetConfig+0x1f6>
 800620e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006212:	d817      	bhi.n	8006244 <UART_SetConfig+0x208>
 8006214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006218:	d011      	beq.n	800623e <UART_SetConfig+0x202>
 800621a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800621e:	d811      	bhi.n	8006244 <UART_SetConfig+0x208>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <UART_SetConfig+0x1f0>
 8006224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006228:	d006      	beq.n	8006238 <UART_SetConfig+0x1fc>
 800622a:	e00b      	b.n	8006244 <UART_SetConfig+0x208>
 800622c:	2300      	movs	r3, #0
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e00d      	b.n	800624e <UART_SetConfig+0x212>
 8006232:	2302      	movs	r3, #2
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e00a      	b.n	800624e <UART_SetConfig+0x212>
 8006238:	2304      	movs	r3, #4
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e007      	b.n	800624e <UART_SetConfig+0x212>
 800623e:	2308      	movs	r3, #8
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e004      	b.n	800624e <UART_SetConfig+0x212>
 8006244:	2310      	movs	r3, #16
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e001      	b.n	800624e <UART_SetConfig+0x212>
 800624a:	2310      	movs	r3, #16
 800624c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006256:	d16d      	bne.n	8006334 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8006258:	7ffb      	ldrb	r3, [r7, #31]
 800625a:	2b08      	cmp	r3, #8
 800625c:	d827      	bhi.n	80062ae <UART_SetConfig+0x272>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <UART_SetConfig+0x228>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006289 	.word	0x08006289
 8006268:	08006291 	.word	0x08006291
 800626c:	08006299 	.word	0x08006299
 8006270:	080062af 	.word	0x080062af
 8006274:	0800629f 	.word	0x0800629f
 8006278:	080062af 	.word	0x080062af
 800627c:	080062af 	.word	0x080062af
 8006280:	080062af 	.word	0x080062af
 8006284:	080062a7 	.word	0x080062a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006288:	f7fd ff34 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 800628c:	61b8      	str	r0, [r7, #24]
        break;
 800628e:	e013      	b.n	80062b8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006290:	f7fd ff52 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 8006294:	61b8      	str	r0, [r7, #24]
        break;
 8006296:	e00f      	b.n	80062b8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <UART_SetConfig+0x2f4>)
 800629a:	61bb      	str	r3, [r7, #24]
        break;
 800629c:	e00c      	b.n	80062b8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629e:	f7fd feb3 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 80062a2:	61b8      	str	r0, [r7, #24]
        break;
 80062a4:	e008      	b.n	80062b8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062aa:	61bb      	str	r3, [r7, #24]
        break;
 80062ac:	e004      	b.n	80062b8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	77bb      	strb	r3, [r7, #30]
        break;
 80062b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8086 	beq.w	80063cc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	005a      	lsls	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	441a      	add	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b0f      	cmp	r3, #15
 80062dc:	d916      	bls.n	800630c <UART_SetConfig+0x2d0>
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e4:	d212      	bcs.n	800630c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f023 030f 	bic.w	r3, r3, #15
 80062ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	89fb      	ldrh	r3, [r7, #14]
 80062fe:	4313      	orrs	r3, r2
 8006300:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	89fa      	ldrh	r2, [r7, #14]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	e05f      	b.n	80063cc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	77bb      	strb	r3, [r7, #30]
 8006310:	e05c      	b.n	80063cc <UART_SetConfig+0x390>
 8006312:	bf00      	nop
 8006314:	efff69f3 	.word	0xefff69f3
 8006318:	40013800 	.word	0x40013800
 800631c:	40021000 	.word	0x40021000
 8006320:	40004400 	.word	0x40004400
 8006324:	40004800 	.word	0x40004800
 8006328:	40004c00 	.word	0x40004c00
 800632c:	40005000 	.word	0x40005000
 8006330:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006334:	7ffb      	ldrb	r3, [r7, #31]
 8006336:	2b08      	cmp	r3, #8
 8006338:	d827      	bhi.n	800638a <UART_SetConfig+0x34e>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x304>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fd fec6 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 8006368:	61b8      	str	r0, [r7, #24]
        break;
 800636a:	e013      	b.n	8006394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd fee4 	bl	8004138 <HAL_RCC_GetPCLK2Freq>
 8006370:	61b8      	str	r0, [r7, #24]
        break;
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <UART_SetConfig+0x3a8>)
 8006376:	61bb      	str	r3, [r7, #24]
        break;
 8006378:	e00c      	b.n	8006394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fd fe45 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 800637e:	61b8      	str	r0, [r7, #24]
        break;
 8006380:	e008      	b.n	8006394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006386:	61bb      	str	r3, [r7, #24]
        break;
 8006388:	e004      	b.n	8006394 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	77bb      	strb	r3, [r7, #30]
        break;
 8006392:	bf00      	nop
    }

    if (pclk != 0U)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d018      	beq.n	80063cc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085a      	lsrs	r2, r3, #1
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	441a      	add	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d908      	bls.n	80063c8 <UART_SetConfig+0x38c>
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063bc:	d204      	bcs.n	80063c8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	e001      	b.n	80063cc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3720      	adds	r7, #32
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	007a1200 	.word	0x007a1200

080063e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01a      	beq.n	80064fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e6:	d10a      	bne.n	80064fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af02      	add	r7, sp, #8
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800653c:	f7fc f960 	bl	8002800 <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b08      	cmp	r3, #8
 800654e:	d10e      	bne.n	800656e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f82d 	bl	80065be <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e023      	b.n	80065b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b04      	cmp	r3, #4
 800657a:	d10e      	bne.n	800659a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800657c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f817 	bl	80065be <UART_WaitOnFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e00d      	b.n	80065b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b09c      	sub	sp, #112	; 0x70
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	4613      	mov	r3, r2
 80065cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ce:	e0a5      	b.n	800671c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d6:	f000 80a1 	beq.w	800671c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fc f911 	bl	8002800 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80065ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d13e      	bne.n	800666e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006600:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006604:	667b      	str	r3, [r7, #100]	; 0x64
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800660e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006610:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006614:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800661c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	663b      	str	r3, [r7, #96]	; 0x60
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006642:	64ba      	str	r2, [r7, #72]	; 0x48
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e5      	bne.n	8006622 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e067      	b.n	800673e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d04f      	beq.n	800671c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800668a:	d147      	bne.n	800671c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006694:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
 80066b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	613b      	str	r3, [r7, #16]
   return(result);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	66bb      	str	r3, [r7, #104]	; 0x68
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066e8:	623a      	str	r2, [r7, #32]
 80066ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	69f9      	ldr	r1, [r7, #28]
 80066ee:	6a3a      	ldr	r2, [r7, #32]
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e5      	bne.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e010      	b.n	800673e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	69da      	ldr	r2, [r3, #28]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4013      	ands	r3, r2
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	461a      	mov	r2, r3
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	429a      	cmp	r2, r3
 8006738:	f43f af4a 	beq.w	80065d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3770      	adds	r7, #112	; 0x70
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006748:	b480      	push	{r7}
 800674a:	b091      	sub	sp, #68	; 0x44
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677a:	d10e      	bne.n	800679a <UART_Start_Receive_IT+0x52>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <UART_Start_Receive_IT+0x48>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f240 12ff 	movw	r2, #511	; 0x1ff
 800678a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800678e:	e02d      	b.n	80067ec <UART_Start_Receive_IT+0xa4>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	22ff      	movs	r2, #255	; 0xff
 8006794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006798:	e028      	b.n	80067ec <UART_Start_Receive_IT+0xa4>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10d      	bne.n	80067be <UART_Start_Receive_IT+0x76>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <UART_Start_Receive_IT+0x6c>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	22ff      	movs	r2, #255	; 0xff
 80067ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067b2:	e01b      	b.n	80067ec <UART_Start_Receive_IT+0xa4>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	227f      	movs	r2, #127	; 0x7f
 80067b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067bc:	e016      	b.n	80067ec <UART_Start_Receive_IT+0xa4>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c6:	d10d      	bne.n	80067e4 <UART_Start_Receive_IT+0x9c>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <UART_Start_Receive_IT+0x92>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	227f      	movs	r2, #127	; 0x7f
 80067d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067d8:	e008      	b.n	80067ec <UART_Start_Receive_IT+0xa4>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	223f      	movs	r2, #63	; 0x3f
 80067de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067e2:	e003      	b.n	80067ec <UART_Start_Receive_IT+0xa4>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2222      	movs	r2, #34	; 0x22
 80067f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800681a:	637a      	str	r2, [r7, #52]	; 0x34
 800681c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e5      	bne.n	80067fa <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006836:	d107      	bne.n	8006848 <UART_Start_Receive_IT+0x100>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <UART_Start_Receive_IT+0x150>)
 8006844:	665a      	str	r2, [r3, #100]	; 0x64
 8006846:	e002      	b.n	800684e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a14      	ldr	r2, [pc, #80]	; (800689c <UART_Start_Receive_IT+0x154>)
 800684c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	613b      	str	r3, [r7, #16]
   return(result);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	69f9      	ldr	r1, [r7, #28]
 800687a:	6a3a      	ldr	r2, [r7, #32]
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	61bb      	str	r3, [r7, #24]
   return(result);
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e6      	bne.n	8006856 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3744      	adds	r7, #68	; 0x44
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	08006d03 	.word	0x08006d03
 800689c:	08006ba7 	.word	0x08006ba7

080068a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b095      	sub	sp, #84	; 0x54
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	643b      	str	r3, [r7, #64]	; 0x40
 80068c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3308      	adds	r3, #8
 80068e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e5      	bne.n	80068da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006912:	2b01      	cmp	r3, #1
 8006914:	d118      	bne.n	8006948 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	60bb      	str	r3, [r7, #8]
   return(result);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	647b      	str	r3, [r7, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	665a      	str	r2, [r3, #100]	; 0x64
}
 800695a:	bf00      	nop
 800695c:	3754      	adds	r7, #84	; 0x54
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fb39 	bl	8005ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	220f      	movs	r2, #15
 80069ae:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0208 	orr.w	r2, r2, #8
 80069be:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fb1f 	bl	8006010 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069da:	b480      	push	{r7}
 80069dc:	b08f      	sub	sp, #60	; 0x3c
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e6:	2b21      	cmp	r3, #33	; 0x21
 80069e8:	d14d      	bne.n	8006a86 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d132      	bne.n	8006a5c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a16:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e6      	bne.n	80069f6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6979      	ldr	r1, [r7, #20]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	613b      	str	r3, [r7, #16]
   return(result);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e6      	bne.n	8006a28 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006a5a:	e014      	b.n	8006a86 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	b292      	uxth	r2, r2
 8006a68:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006a86:	bf00      	nop
 8006a88:	373c      	adds	r7, #60	; 0x3c
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b091      	sub	sp, #68	; 0x44
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a9e:	2b21      	cmp	r3, #33	; 0x21
 8006aa0:	d151      	bne.n	8006b46 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d132      	bne.n	8006b14 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	623b      	str	r3, [r7, #32]
   return(result);
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	633b      	str	r3, [r7, #48]	; 0x30
 8006ace:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e6      	bne.n	8006aae <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	69b9      	ldr	r1, [r7, #24]
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e6      	bne.n	8006ae0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006b12:	e018      	b.n	8006b46 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1c:	881a      	ldrh	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b26:	b292      	uxth	r2, r2
 8006b28:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2e:	1c9a      	adds	r2, r3, #2
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006b46:	bf00      	nop
 8006b48:	3744      	adds	r7, #68	; 0x44
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	613b      	str	r3, [r7, #16]
   return(result);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e6      	bne.n	8006b5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fa1b 	bl	8005fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9e:	bf00      	nop
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b096      	sub	sp, #88	; 0x58
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bbc:	2b22      	cmp	r3, #34	; 0x22
 8006bbe:	f040 8094 	bne.w	8006cea <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bc8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bcc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006bd0:	b2d9      	uxtb	r1, r3
 8006bd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	400a      	ands	r2, r1
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d177      	bne.n	8006cfa <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c28:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c5c:	633a      	str	r2, [r7, #48]	; 0x30
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d12e      	bne.n	8006ce2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0310 	bic.w	r3, r3, #16
 8006c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e6      	bne.n	8006c8a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d103      	bne.n	8006cd2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2210      	movs	r2, #16
 8006cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff f9a2 	bl	8006024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ce0:	e00b      	b.n	8006cfa <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff f980 	bl	8005fe8 <HAL_UART_RxCpltCallback>
}
 8006ce8:	e007      	b.n	8006cfa <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0208 	orr.w	r2, r2, #8
 8006cf8:	619a      	str	r2, [r3, #24]
}
 8006cfa:	bf00      	nop
 8006cfc:	3758      	adds	r7, #88	; 0x58
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b096      	sub	sp, #88	; 0x58
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d18:	2b22      	cmp	r3, #34	; 0x22
 8006d1a:	f040 8094 	bne.w	8006e46 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d2e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d36:	4013      	ands	r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d42:	1c9a      	adds	r2, r3, #2
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d177      	bne.n	8006e56 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d84:	643b      	str	r3, [r7, #64]	; 0x40
 8006d86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e6      	bne.n	8006d66 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e5      	bne.n	8006d98 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d12e      	bne.n	8006e3e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f023 0310 	bic.w	r3, r3, #16
 8006dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6979      	ldr	r1, [r7, #20]
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	613b      	str	r3, [r7, #16]
   return(result);
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e6      	bne.n	8006de6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b10      	cmp	r3, #16
 8006e24:	d103      	bne.n	8006e2e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2210      	movs	r2, #16
 8006e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f8f4 	bl	8006024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e3c:	e00b      	b.n	8006e56 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff f8d2 	bl	8005fe8 <HAL_UART_RxCpltCallback>
}
 8006e44:	e007      	b.n	8006e56 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0208 	orr.w	r2, r2, #8
 8006e54:	619a      	str	r2, [r3, #24]
}
 8006e56:	bf00      	nop
 8006e58:	3758      	adds	r7, #88	; 0x58
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <__errno>:
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <__errno+0x8>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000010 	.word	0x20000010

08006e80 <__libc_init_array>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	4d0d      	ldr	r5, [pc, #52]	; (8006eb8 <__libc_init_array+0x38>)
 8006e84:	4c0d      	ldr	r4, [pc, #52]	; (8006ebc <__libc_init_array+0x3c>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	d109      	bne.n	8006ea4 <__libc_init_array+0x24>
 8006e90:	4d0b      	ldr	r5, [pc, #44]	; (8006ec0 <__libc_init_array+0x40>)
 8006e92:	4c0c      	ldr	r4, [pc, #48]	; (8006ec4 <__libc_init_array+0x44>)
 8006e94:	f004 fc44 	bl	800b720 <_init>
 8006e98:	1b64      	subs	r4, r4, r5
 8006e9a:	10a4      	asrs	r4, r4, #2
 8006e9c:	2600      	movs	r6, #0
 8006e9e:	42a6      	cmp	r6, r4
 8006ea0:	d105      	bne.n	8006eae <__libc_init_array+0x2e>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea8:	4798      	blx	r3
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7ee      	b.n	8006e8c <__libc_init_array+0xc>
 8006eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb2:	4798      	blx	r3
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7f2      	b.n	8006e9e <__libc_init_array+0x1e>
 8006eb8:	0800c234 	.word	0x0800c234
 8006ebc:	0800c234 	.word	0x0800c234
 8006ec0:	0800c234 	.word	0x0800c234
 8006ec4:	0800c238 	.word	0x0800c238

08006ec8 <memset>:
 8006ec8:	4402      	add	r2, r0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d100      	bne.n	8006ed2 <memset+0xa>
 8006ed0:	4770      	bx	lr
 8006ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed6:	e7f9      	b.n	8006ecc <memset+0x4>

08006ed8 <__cvt>:
 8006ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	ec55 4b10 	vmov	r4, r5, d0
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	460e      	mov	r6, r1
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	bfbb      	ittet	lt
 8006eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eee:	461d      	movlt	r5, r3
 8006ef0:	2300      	movge	r3, #0
 8006ef2:	232d      	movlt	r3, #45	; 0x2d
 8006ef4:	700b      	strb	r3, [r1, #0]
 8006ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006efc:	4691      	mov	r9, r2
 8006efe:	f023 0820 	bic.w	r8, r3, #32
 8006f02:	bfbc      	itt	lt
 8006f04:	4622      	movlt	r2, r4
 8006f06:	4614      	movlt	r4, r2
 8006f08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f0c:	d005      	beq.n	8006f1a <__cvt+0x42>
 8006f0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f12:	d100      	bne.n	8006f16 <__cvt+0x3e>
 8006f14:	3601      	adds	r6, #1
 8006f16:	2102      	movs	r1, #2
 8006f18:	e000      	b.n	8006f1c <__cvt+0x44>
 8006f1a:	2103      	movs	r1, #3
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	ab02      	add	r3, sp, #8
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	ec45 4b10 	vmov	d0, r4, r5
 8006f28:	4653      	mov	r3, sl
 8006f2a:	4632      	mov	r2, r6
 8006f2c:	f001 fdb4 	bl	8008a98 <_dtoa_r>
 8006f30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f34:	4607      	mov	r7, r0
 8006f36:	d102      	bne.n	8006f3e <__cvt+0x66>
 8006f38:	f019 0f01 	tst.w	r9, #1
 8006f3c:	d022      	beq.n	8006f84 <__cvt+0xac>
 8006f3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f42:	eb07 0906 	add.w	r9, r7, r6
 8006f46:	d110      	bne.n	8006f6a <__cvt+0x92>
 8006f48:	783b      	ldrb	r3, [r7, #0]
 8006f4a:	2b30      	cmp	r3, #48	; 0x30
 8006f4c:	d10a      	bne.n	8006f64 <__cvt+0x8c>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2300      	movs	r3, #0
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f5a:	b918      	cbnz	r0, 8006f64 <__cvt+0x8c>
 8006f5c:	f1c6 0601 	rsb	r6, r6, #1
 8006f60:	f8ca 6000 	str.w	r6, [sl]
 8006f64:	f8da 3000 	ldr.w	r3, [sl]
 8006f68:	4499      	add	r9, r3
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f76:	b108      	cbz	r0, 8006f7c <__cvt+0xa4>
 8006f78:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f7c:	2230      	movs	r2, #48	; 0x30
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	454b      	cmp	r3, r9
 8006f82:	d307      	bcc.n	8006f94 <__cvt+0xbc>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f88:	1bdb      	subs	r3, r3, r7
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	b004      	add	sp, #16
 8006f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f94:	1c59      	adds	r1, r3, #1
 8006f96:	9103      	str	r1, [sp, #12]
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e7f0      	b.n	8006f7e <__cvt+0xa6>

08006f9c <__exponent>:
 8006f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	bfb8      	it	lt
 8006fa4:	4249      	neglt	r1, r1
 8006fa6:	f803 2b02 	strb.w	r2, [r3], #2
 8006faa:	bfb4      	ite	lt
 8006fac:	222d      	movlt	r2, #45	; 0x2d
 8006fae:	222b      	movge	r2, #43	; 0x2b
 8006fb0:	2909      	cmp	r1, #9
 8006fb2:	7042      	strb	r2, [r0, #1]
 8006fb4:	dd2a      	ble.n	800700c <__exponent+0x70>
 8006fb6:	f10d 0407 	add.w	r4, sp, #7
 8006fba:	46a4      	mov	ip, r4
 8006fbc:	270a      	movs	r7, #10
 8006fbe:	46a6      	mov	lr, r4
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fc6:	fb07 1516 	mls	r5, r7, r6, r1
 8006fca:	3530      	adds	r5, #48	; 0x30
 8006fcc:	2a63      	cmp	r2, #99	; 0x63
 8006fce:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	dcf1      	bgt.n	8006fbe <__exponent+0x22>
 8006fda:	3130      	adds	r1, #48	; 0x30
 8006fdc:	f1ae 0502 	sub.w	r5, lr, #2
 8006fe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fe4:	1c44      	adds	r4, r0, #1
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4561      	cmp	r1, ip
 8006fea:	d30a      	bcc.n	8007002 <__exponent+0x66>
 8006fec:	f10d 0209 	add.w	r2, sp, #9
 8006ff0:	eba2 020e 	sub.w	r2, r2, lr
 8006ff4:	4565      	cmp	r5, ip
 8006ff6:	bf88      	it	hi
 8006ff8:	2200      	movhi	r2, #0
 8006ffa:	4413      	add	r3, r2
 8006ffc:	1a18      	subs	r0, r3, r0
 8006ffe:	b003      	add	sp, #12
 8007000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007006:	f804 2f01 	strb.w	r2, [r4, #1]!
 800700a:	e7ed      	b.n	8006fe8 <__exponent+0x4c>
 800700c:	2330      	movs	r3, #48	; 0x30
 800700e:	3130      	adds	r1, #48	; 0x30
 8007010:	7083      	strb	r3, [r0, #2]
 8007012:	70c1      	strb	r1, [r0, #3]
 8007014:	1d03      	adds	r3, r0, #4
 8007016:	e7f1      	b.n	8006ffc <__exponent+0x60>

08007018 <_printf_float>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	ed2d 8b02 	vpush	{d8}
 8007020:	b08d      	sub	sp, #52	; 0x34
 8007022:	460c      	mov	r4, r1
 8007024:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007028:	4616      	mov	r6, r2
 800702a:	461f      	mov	r7, r3
 800702c:	4605      	mov	r5, r0
 800702e:	f002 fe8f 	bl	8009d50 <_localeconv_r>
 8007032:	f8d0 a000 	ldr.w	sl, [r0]
 8007036:	4650      	mov	r0, sl
 8007038:	f7f9 f8d2 	bl	80001e0 <strlen>
 800703c:	2300      	movs	r3, #0
 800703e:	930a      	str	r3, [sp, #40]	; 0x28
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	f8d8 3000 	ldr.w	r3, [r8]
 8007048:	f894 b018 	ldrb.w	fp, [r4, #24]
 800704c:	3307      	adds	r3, #7
 800704e:	f023 0307 	bic.w	r3, r3, #7
 8007052:	f103 0208 	add.w	r2, r3, #8
 8007056:	f8c8 2000 	str.w	r2, [r8]
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007062:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007066:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800706a:	9307      	str	r3, [sp, #28]
 800706c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007070:	ee08 0a10 	vmov	s16, r0
 8007074:	4b9f      	ldr	r3, [pc, #636]	; (80072f4 <_printf_float+0x2dc>)
 8007076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	f7f9 fd5d 	bl	8000b3c <__aeabi_dcmpun>
 8007082:	bb88      	cbnz	r0, 80070e8 <_printf_float+0xd0>
 8007084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007088:	4b9a      	ldr	r3, [pc, #616]	; (80072f4 <_printf_float+0x2dc>)
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	f7f9 fd37 	bl	8000b00 <__aeabi_dcmple>
 8007092:	bb48      	cbnz	r0, 80070e8 <_printf_float+0xd0>
 8007094:	2200      	movs	r2, #0
 8007096:	2300      	movs	r3, #0
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 fd26 	bl	8000aec <__aeabi_dcmplt>
 80070a0:	b110      	cbz	r0, 80070a8 <_printf_float+0x90>
 80070a2:	232d      	movs	r3, #45	; 0x2d
 80070a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a8:	4b93      	ldr	r3, [pc, #588]	; (80072f8 <_printf_float+0x2e0>)
 80070aa:	4894      	ldr	r0, [pc, #592]	; (80072fc <_printf_float+0x2e4>)
 80070ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070b0:	bf94      	ite	ls
 80070b2:	4698      	movls	r8, r3
 80070b4:	4680      	movhi	r8, r0
 80070b6:	2303      	movs	r3, #3
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	9b05      	ldr	r3, [sp, #20]
 80070bc:	f023 0204 	bic.w	r2, r3, #4
 80070c0:	6022      	str	r2, [r4, #0]
 80070c2:	f04f 0900 	mov.w	r9, #0
 80070c6:	9700      	str	r7, [sp, #0]
 80070c8:	4633      	mov	r3, r6
 80070ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 f9d8 	bl	8007484 <_printf_common>
 80070d4:	3001      	adds	r0, #1
 80070d6:	f040 8090 	bne.w	80071fa <_printf_float+0x1e2>
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	b00d      	add	sp, #52	; 0x34
 80070e0:	ecbd 8b02 	vpop	{d8}
 80070e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	4649      	mov	r1, r9
 80070f0:	f7f9 fd24 	bl	8000b3c <__aeabi_dcmpun>
 80070f4:	b140      	cbz	r0, 8007108 <_printf_float+0xf0>
 80070f6:	464b      	mov	r3, r9
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bfbc      	itt	lt
 80070fc:	232d      	movlt	r3, #45	; 0x2d
 80070fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007102:	487f      	ldr	r0, [pc, #508]	; (8007300 <_printf_float+0x2e8>)
 8007104:	4b7f      	ldr	r3, [pc, #508]	; (8007304 <_printf_float+0x2ec>)
 8007106:	e7d1      	b.n	80070ac <_printf_float+0x94>
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800710e:	9206      	str	r2, [sp, #24]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	d13f      	bne.n	8007194 <_printf_float+0x17c>
 8007114:	2306      	movs	r3, #6
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	9b05      	ldr	r3, [sp, #20]
 800711a:	6861      	ldr	r1, [r4, #4]
 800711c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007120:	2300      	movs	r3, #0
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	ab0a      	add	r3, sp, #40	; 0x28
 8007126:	e9cd b301 	strd	fp, r3, [sp, #4]
 800712a:	ab09      	add	r3, sp, #36	; 0x24
 800712c:	ec49 8b10 	vmov	d0, r8, r9
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007138:	4628      	mov	r0, r5
 800713a:	f7ff fecd 	bl	8006ed8 <__cvt>
 800713e:	9b06      	ldr	r3, [sp, #24]
 8007140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007142:	2b47      	cmp	r3, #71	; 0x47
 8007144:	4680      	mov	r8, r0
 8007146:	d108      	bne.n	800715a <_printf_float+0x142>
 8007148:	1cc8      	adds	r0, r1, #3
 800714a:	db02      	blt.n	8007152 <_printf_float+0x13a>
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	4299      	cmp	r1, r3
 8007150:	dd41      	ble.n	80071d6 <_printf_float+0x1be>
 8007152:	f1ab 0b02 	sub.w	fp, fp, #2
 8007156:	fa5f fb8b 	uxtb.w	fp, fp
 800715a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800715e:	d820      	bhi.n	80071a2 <_printf_float+0x18a>
 8007160:	3901      	subs	r1, #1
 8007162:	465a      	mov	r2, fp
 8007164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007168:	9109      	str	r1, [sp, #36]	; 0x24
 800716a:	f7ff ff17 	bl	8006f9c <__exponent>
 800716e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007170:	1813      	adds	r3, r2, r0
 8007172:	2a01      	cmp	r2, #1
 8007174:	4681      	mov	r9, r0
 8007176:	6123      	str	r3, [r4, #16]
 8007178:	dc02      	bgt.n	8007180 <_printf_float+0x168>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	07d2      	lsls	r2, r2, #31
 800717e:	d501      	bpl.n	8007184 <_printf_float+0x16c>
 8007180:	3301      	adds	r3, #1
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007188:	2b00      	cmp	r3, #0
 800718a:	d09c      	beq.n	80070c6 <_printf_float+0xae>
 800718c:	232d      	movs	r3, #45	; 0x2d
 800718e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007192:	e798      	b.n	80070c6 <_printf_float+0xae>
 8007194:	9a06      	ldr	r2, [sp, #24]
 8007196:	2a47      	cmp	r2, #71	; 0x47
 8007198:	d1be      	bne.n	8007118 <_printf_float+0x100>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1bc      	bne.n	8007118 <_printf_float+0x100>
 800719e:	2301      	movs	r3, #1
 80071a0:	e7b9      	b.n	8007116 <_printf_float+0xfe>
 80071a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071a6:	d118      	bne.n	80071da <_printf_float+0x1c2>
 80071a8:	2900      	cmp	r1, #0
 80071aa:	6863      	ldr	r3, [r4, #4]
 80071ac:	dd0b      	ble.n	80071c6 <_printf_float+0x1ae>
 80071ae:	6121      	str	r1, [r4, #16]
 80071b0:	b913      	cbnz	r3, 80071b8 <_printf_float+0x1a0>
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	07d0      	lsls	r0, r2, #31
 80071b6:	d502      	bpl.n	80071be <_printf_float+0x1a6>
 80071b8:	3301      	adds	r3, #1
 80071ba:	440b      	add	r3, r1
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	65a1      	str	r1, [r4, #88]	; 0x58
 80071c0:	f04f 0900 	mov.w	r9, #0
 80071c4:	e7de      	b.n	8007184 <_printf_float+0x16c>
 80071c6:	b913      	cbnz	r3, 80071ce <_printf_float+0x1b6>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	07d2      	lsls	r2, r2, #31
 80071cc:	d501      	bpl.n	80071d2 <_printf_float+0x1ba>
 80071ce:	3302      	adds	r3, #2
 80071d0:	e7f4      	b.n	80071bc <_printf_float+0x1a4>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e7f2      	b.n	80071bc <_printf_float+0x1a4>
 80071d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071dc:	4299      	cmp	r1, r3
 80071de:	db05      	blt.n	80071ec <_printf_float+0x1d4>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	6121      	str	r1, [r4, #16]
 80071e4:	07d8      	lsls	r0, r3, #31
 80071e6:	d5ea      	bpl.n	80071be <_printf_float+0x1a6>
 80071e8:	1c4b      	adds	r3, r1, #1
 80071ea:	e7e7      	b.n	80071bc <_printf_float+0x1a4>
 80071ec:	2900      	cmp	r1, #0
 80071ee:	bfd4      	ite	le
 80071f0:	f1c1 0202 	rsble	r2, r1, #2
 80071f4:	2201      	movgt	r2, #1
 80071f6:	4413      	add	r3, r2
 80071f8:	e7e0      	b.n	80071bc <_printf_float+0x1a4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	055a      	lsls	r2, r3, #21
 80071fe:	d407      	bmi.n	8007210 <_printf_float+0x1f8>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	4642      	mov	r2, r8
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	d12c      	bne.n	8007268 <_printf_float+0x250>
 800720e:	e764      	b.n	80070da <_printf_float+0xc2>
 8007210:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007214:	f240 80e0 	bls.w	80073d8 <_printf_float+0x3c0>
 8007218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800721c:	2200      	movs	r2, #0
 800721e:	2300      	movs	r3, #0
 8007220:	f7f9 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007224:	2800      	cmp	r0, #0
 8007226:	d034      	beq.n	8007292 <_printf_float+0x27a>
 8007228:	4a37      	ldr	r2, [pc, #220]	; (8007308 <_printf_float+0x2f0>)
 800722a:	2301      	movs	r3, #1
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	f43f af51 	beq.w	80070da <_printf_float+0xc2>
 8007238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800723c:	429a      	cmp	r2, r3
 800723e:	db02      	blt.n	8007246 <_printf_float+0x22e>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07d8      	lsls	r0, r3, #31
 8007244:	d510      	bpl.n	8007268 <_printf_float+0x250>
 8007246:	ee18 3a10 	vmov	r3, s16
 800724a:	4652      	mov	r2, sl
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f af41 	beq.w	80070da <_printf_float+0xc2>
 8007258:	f04f 0800 	mov.w	r8, #0
 800725c:	f104 091a 	add.w	r9, r4, #26
 8007260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007262:	3b01      	subs	r3, #1
 8007264:	4543      	cmp	r3, r8
 8007266:	dc09      	bgt.n	800727c <_printf_float+0x264>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	079b      	lsls	r3, r3, #30
 800726c:	f100 8105 	bmi.w	800747a <_printf_float+0x462>
 8007270:	68e0      	ldr	r0, [r4, #12]
 8007272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007274:	4298      	cmp	r0, r3
 8007276:	bfb8      	it	lt
 8007278:	4618      	movlt	r0, r3
 800727a:	e730      	b.n	80070de <_printf_float+0xc6>
 800727c:	2301      	movs	r3, #1
 800727e:	464a      	mov	r2, r9
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f af27 	beq.w	80070da <_printf_float+0xc2>
 800728c:	f108 0801 	add.w	r8, r8, #1
 8007290:	e7e6      	b.n	8007260 <_printf_float+0x248>
 8007292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc39      	bgt.n	800730c <_printf_float+0x2f4>
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <_printf_float+0x2f0>)
 800729a:	2301      	movs	r3, #1
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af19 	beq.w	80070da <_printf_float+0xc2>
 80072a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ac:	4313      	orrs	r3, r2
 80072ae:	d102      	bne.n	80072b6 <_printf_float+0x29e>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	07d9      	lsls	r1, r3, #31
 80072b4:	d5d8      	bpl.n	8007268 <_printf_float+0x250>
 80072b6:	ee18 3a10 	vmov	r3, s16
 80072ba:	4652      	mov	r2, sl
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f af09 	beq.w	80070da <_printf_float+0xc2>
 80072c8:	f04f 0900 	mov.w	r9, #0
 80072cc:	f104 0a1a 	add.w	sl, r4, #26
 80072d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d2:	425b      	negs	r3, r3
 80072d4:	454b      	cmp	r3, r9
 80072d6:	dc01      	bgt.n	80072dc <_printf_float+0x2c4>
 80072d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072da:	e792      	b.n	8007202 <_printf_float+0x1ea>
 80072dc:	2301      	movs	r3, #1
 80072de:	4652      	mov	r2, sl
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f aef7 	beq.w	80070da <_printf_float+0xc2>
 80072ec:	f109 0901 	add.w	r9, r9, #1
 80072f0:	e7ee      	b.n	80072d0 <_printf_float+0x2b8>
 80072f2:	bf00      	nop
 80072f4:	7fefffff 	.word	0x7fefffff
 80072f8:	0800bd84 	.word	0x0800bd84
 80072fc:	0800bd88 	.word	0x0800bd88
 8007300:	0800bd90 	.word	0x0800bd90
 8007304:	0800bd8c 	.word	0x0800bd8c
 8007308:	0800bd94 	.word	0x0800bd94
 800730c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800730e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007310:	429a      	cmp	r2, r3
 8007312:	bfa8      	it	ge
 8007314:	461a      	movge	r2, r3
 8007316:	2a00      	cmp	r2, #0
 8007318:	4691      	mov	r9, r2
 800731a:	dc37      	bgt.n	800738c <_printf_float+0x374>
 800731c:	f04f 0b00 	mov.w	fp, #0
 8007320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007324:	f104 021a 	add.w	r2, r4, #26
 8007328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	eba3 0309 	sub.w	r3, r3, r9
 8007330:	455b      	cmp	r3, fp
 8007332:	dc33      	bgt.n	800739c <_printf_float+0x384>
 8007334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007338:	429a      	cmp	r2, r3
 800733a:	db3b      	blt.n	80073b4 <_printf_float+0x39c>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d438      	bmi.n	80073b4 <_printf_float+0x39c>
 8007342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007344:	9b05      	ldr	r3, [sp, #20]
 8007346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	eba2 0901 	sub.w	r9, r2, r1
 800734e:	4599      	cmp	r9, r3
 8007350:	bfa8      	it	ge
 8007352:	4699      	movge	r9, r3
 8007354:	f1b9 0f00 	cmp.w	r9, #0
 8007358:	dc35      	bgt.n	80073c6 <_printf_float+0x3ae>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007362:	f104 0a1a 	add.w	sl, r4, #26
 8007366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	eba3 0309 	sub.w	r3, r3, r9
 8007370:	4543      	cmp	r3, r8
 8007372:	f77f af79 	ble.w	8007268 <_printf_float+0x250>
 8007376:	2301      	movs	r3, #1
 8007378:	4652      	mov	r2, sl
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f aeaa 	beq.w	80070da <_printf_float+0xc2>
 8007386:	f108 0801 	add.w	r8, r8, #1
 800738a:	e7ec      	b.n	8007366 <_printf_float+0x34e>
 800738c:	4613      	mov	r3, r2
 800738e:	4631      	mov	r1, r6
 8007390:	4642      	mov	r2, r8
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	d1c0      	bne.n	800731c <_printf_float+0x304>
 800739a:	e69e      	b.n	80070da <_printf_float+0xc2>
 800739c:	2301      	movs	r3, #1
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	9205      	str	r2, [sp, #20]
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f ae97 	beq.w	80070da <_printf_float+0xc2>
 80073ac:	9a05      	ldr	r2, [sp, #20]
 80073ae:	f10b 0b01 	add.w	fp, fp, #1
 80073b2:	e7b9      	b.n	8007328 <_printf_float+0x310>
 80073b4:	ee18 3a10 	vmov	r3, s16
 80073b8:	4652      	mov	r2, sl
 80073ba:	4631      	mov	r1, r6
 80073bc:	4628      	mov	r0, r5
 80073be:	47b8      	blx	r7
 80073c0:	3001      	adds	r0, #1
 80073c2:	d1be      	bne.n	8007342 <_printf_float+0x32a>
 80073c4:	e689      	b.n	80070da <_printf_float+0xc2>
 80073c6:	9a05      	ldr	r2, [sp, #20]
 80073c8:	464b      	mov	r3, r9
 80073ca:	4442      	add	r2, r8
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	d1c1      	bne.n	800735a <_printf_float+0x342>
 80073d6:	e680      	b.n	80070da <_printf_float+0xc2>
 80073d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073da:	2a01      	cmp	r2, #1
 80073dc:	dc01      	bgt.n	80073e2 <_printf_float+0x3ca>
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d538      	bpl.n	8007454 <_printf_float+0x43c>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4642      	mov	r2, r8
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae74 	beq.w	80070da <_printf_float+0xc2>
 80073f2:	ee18 3a10 	vmov	r3, s16
 80073f6:	4652      	mov	r2, sl
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f ae6b 	beq.w	80070da <_printf_float+0xc2>
 8007404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007408:	2200      	movs	r2, #0
 800740a:	2300      	movs	r3, #0
 800740c:	f7f9 fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 8007410:	b9d8      	cbnz	r0, 800744a <_printf_float+0x432>
 8007412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007414:	f108 0201 	add.w	r2, r8, #1
 8007418:	3b01      	subs	r3, #1
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	d10e      	bne.n	8007442 <_printf_float+0x42a>
 8007424:	e659      	b.n	80070da <_printf_float+0xc2>
 8007426:	2301      	movs	r3, #1
 8007428:	4652      	mov	r2, sl
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f ae52 	beq.w	80070da <_printf_float+0xc2>
 8007436:	f108 0801 	add.w	r8, r8, #1
 800743a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800743c:	3b01      	subs	r3, #1
 800743e:	4543      	cmp	r3, r8
 8007440:	dcf1      	bgt.n	8007426 <_printf_float+0x40e>
 8007442:	464b      	mov	r3, r9
 8007444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007448:	e6dc      	b.n	8007204 <_printf_float+0x1ec>
 800744a:	f04f 0800 	mov.w	r8, #0
 800744e:	f104 0a1a 	add.w	sl, r4, #26
 8007452:	e7f2      	b.n	800743a <_printf_float+0x422>
 8007454:	2301      	movs	r3, #1
 8007456:	4642      	mov	r2, r8
 8007458:	e7df      	b.n	800741a <_printf_float+0x402>
 800745a:	2301      	movs	r3, #1
 800745c:	464a      	mov	r2, r9
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f ae38 	beq.w	80070da <_printf_float+0xc2>
 800746a:	f108 0801 	add.w	r8, r8, #1
 800746e:	68e3      	ldr	r3, [r4, #12]
 8007470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007472:	1a5b      	subs	r3, r3, r1
 8007474:	4543      	cmp	r3, r8
 8007476:	dcf0      	bgt.n	800745a <_printf_float+0x442>
 8007478:	e6fa      	b.n	8007270 <_printf_float+0x258>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	f104 0919 	add.w	r9, r4, #25
 8007482:	e7f4      	b.n	800746e <_printf_float+0x456>

08007484 <_printf_common>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	4616      	mov	r6, r2
 800748a:	4699      	mov	r9, r3
 800748c:	688a      	ldr	r2, [r1, #8]
 800748e:	690b      	ldr	r3, [r1, #16]
 8007490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007494:	4293      	cmp	r3, r2
 8007496:	bfb8      	it	lt
 8007498:	4613      	movlt	r3, r2
 800749a:	6033      	str	r3, [r6, #0]
 800749c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074a0:	4607      	mov	r7, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	b10a      	cbz	r2, 80074aa <_printf_common+0x26>
 80074a6:	3301      	adds	r3, #1
 80074a8:	6033      	str	r3, [r6, #0]
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	0699      	lsls	r1, r3, #26
 80074ae:	bf42      	ittt	mi
 80074b0:	6833      	ldrmi	r3, [r6, #0]
 80074b2:	3302      	addmi	r3, #2
 80074b4:	6033      	strmi	r3, [r6, #0]
 80074b6:	6825      	ldr	r5, [r4, #0]
 80074b8:	f015 0506 	ands.w	r5, r5, #6
 80074bc:	d106      	bne.n	80074cc <_printf_common+0x48>
 80074be:	f104 0a19 	add.w	sl, r4, #25
 80074c2:	68e3      	ldr	r3, [r4, #12]
 80074c4:	6832      	ldr	r2, [r6, #0]
 80074c6:	1a9b      	subs	r3, r3, r2
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	dc26      	bgt.n	800751a <_printf_common+0x96>
 80074cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074d0:	1e13      	subs	r3, r2, #0
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	bf18      	it	ne
 80074d6:	2301      	movne	r3, #1
 80074d8:	0692      	lsls	r2, r2, #26
 80074da:	d42b      	bmi.n	8007534 <_printf_common+0xb0>
 80074dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074e0:	4649      	mov	r1, r9
 80074e2:	4638      	mov	r0, r7
 80074e4:	47c0      	blx	r8
 80074e6:	3001      	adds	r0, #1
 80074e8:	d01e      	beq.n	8007528 <_printf_common+0xa4>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	68e5      	ldr	r5, [r4, #12]
 80074ee:	6832      	ldr	r2, [r6, #0]
 80074f0:	f003 0306 	and.w	r3, r3, #6
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	bf08      	it	eq
 80074f8:	1aad      	subeq	r5, r5, r2
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	6922      	ldr	r2, [r4, #16]
 80074fe:	bf0c      	ite	eq
 8007500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007504:	2500      	movne	r5, #0
 8007506:	4293      	cmp	r3, r2
 8007508:	bfc4      	itt	gt
 800750a:	1a9b      	subgt	r3, r3, r2
 800750c:	18ed      	addgt	r5, r5, r3
 800750e:	2600      	movs	r6, #0
 8007510:	341a      	adds	r4, #26
 8007512:	42b5      	cmp	r5, r6
 8007514:	d11a      	bne.n	800754c <_printf_common+0xc8>
 8007516:	2000      	movs	r0, #0
 8007518:	e008      	b.n	800752c <_printf_common+0xa8>
 800751a:	2301      	movs	r3, #1
 800751c:	4652      	mov	r2, sl
 800751e:	4649      	mov	r1, r9
 8007520:	4638      	mov	r0, r7
 8007522:	47c0      	blx	r8
 8007524:	3001      	adds	r0, #1
 8007526:	d103      	bne.n	8007530 <_printf_common+0xac>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007530:	3501      	adds	r5, #1
 8007532:	e7c6      	b.n	80074c2 <_printf_common+0x3e>
 8007534:	18e1      	adds	r1, r4, r3
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	2030      	movs	r0, #48	; 0x30
 800753a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800753e:	4422      	add	r2, r4
 8007540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007548:	3302      	adds	r3, #2
 800754a:	e7c7      	b.n	80074dc <_printf_common+0x58>
 800754c:	2301      	movs	r3, #1
 800754e:	4622      	mov	r2, r4
 8007550:	4649      	mov	r1, r9
 8007552:	4638      	mov	r0, r7
 8007554:	47c0      	blx	r8
 8007556:	3001      	adds	r0, #1
 8007558:	d0e6      	beq.n	8007528 <_printf_common+0xa4>
 800755a:	3601      	adds	r6, #1
 800755c:	e7d9      	b.n	8007512 <_printf_common+0x8e>
	...

08007560 <_printf_i>:
 8007560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	4691      	mov	r9, r2
 8007568:	7e27      	ldrb	r7, [r4, #24]
 800756a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800756c:	2f78      	cmp	r7, #120	; 0x78
 800756e:	4680      	mov	r8, r0
 8007570:	469a      	mov	sl, r3
 8007572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007576:	d807      	bhi.n	8007588 <_printf_i+0x28>
 8007578:	2f62      	cmp	r7, #98	; 0x62
 800757a:	d80a      	bhi.n	8007592 <_printf_i+0x32>
 800757c:	2f00      	cmp	r7, #0
 800757e:	f000 80d8 	beq.w	8007732 <_printf_i+0x1d2>
 8007582:	2f58      	cmp	r7, #88	; 0x58
 8007584:	f000 80a3 	beq.w	80076ce <_printf_i+0x16e>
 8007588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800758c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007590:	e03a      	b.n	8007608 <_printf_i+0xa8>
 8007592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007596:	2b15      	cmp	r3, #21
 8007598:	d8f6      	bhi.n	8007588 <_printf_i+0x28>
 800759a:	a001      	add	r0, pc, #4	; (adr r0, 80075a0 <_printf_i+0x40>)
 800759c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075a0:	080075f9 	.word	0x080075f9
 80075a4:	0800760d 	.word	0x0800760d
 80075a8:	08007589 	.word	0x08007589
 80075ac:	08007589 	.word	0x08007589
 80075b0:	08007589 	.word	0x08007589
 80075b4:	08007589 	.word	0x08007589
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007589 	.word	0x08007589
 80075c0:	08007589 	.word	0x08007589
 80075c4:	08007589 	.word	0x08007589
 80075c8:	08007589 	.word	0x08007589
 80075cc:	08007719 	.word	0x08007719
 80075d0:	0800763d 	.word	0x0800763d
 80075d4:	080076fb 	.word	0x080076fb
 80075d8:	08007589 	.word	0x08007589
 80075dc:	08007589 	.word	0x08007589
 80075e0:	0800773b 	.word	0x0800773b
 80075e4:	08007589 	.word	0x08007589
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	08007589 	.word	0x08007589
 80075f0:	08007589 	.word	0x08007589
 80075f4:	08007703 	.word	0x08007703
 80075f8:	680b      	ldr	r3, [r1, #0]
 80075fa:	1d1a      	adds	r2, r3, #4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	600a      	str	r2, [r1, #0]
 8007600:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007608:	2301      	movs	r3, #1
 800760a:	e0a3      	b.n	8007754 <_printf_i+0x1f4>
 800760c:	6825      	ldr	r5, [r4, #0]
 800760e:	6808      	ldr	r0, [r1, #0]
 8007610:	062e      	lsls	r6, r5, #24
 8007612:	f100 0304 	add.w	r3, r0, #4
 8007616:	d50a      	bpl.n	800762e <_printf_i+0xce>
 8007618:	6805      	ldr	r5, [r0, #0]
 800761a:	600b      	str	r3, [r1, #0]
 800761c:	2d00      	cmp	r5, #0
 800761e:	da03      	bge.n	8007628 <_printf_i+0xc8>
 8007620:	232d      	movs	r3, #45	; 0x2d
 8007622:	426d      	negs	r5, r5
 8007624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007628:	485e      	ldr	r0, [pc, #376]	; (80077a4 <_printf_i+0x244>)
 800762a:	230a      	movs	r3, #10
 800762c:	e019      	b.n	8007662 <_printf_i+0x102>
 800762e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007632:	6805      	ldr	r5, [r0, #0]
 8007634:	600b      	str	r3, [r1, #0]
 8007636:	bf18      	it	ne
 8007638:	b22d      	sxthne	r5, r5
 800763a:	e7ef      	b.n	800761c <_printf_i+0xbc>
 800763c:	680b      	ldr	r3, [r1, #0]
 800763e:	6825      	ldr	r5, [r4, #0]
 8007640:	1d18      	adds	r0, r3, #4
 8007642:	6008      	str	r0, [r1, #0]
 8007644:	0628      	lsls	r0, r5, #24
 8007646:	d501      	bpl.n	800764c <_printf_i+0xec>
 8007648:	681d      	ldr	r5, [r3, #0]
 800764a:	e002      	b.n	8007652 <_printf_i+0xf2>
 800764c:	0669      	lsls	r1, r5, #25
 800764e:	d5fb      	bpl.n	8007648 <_printf_i+0xe8>
 8007650:	881d      	ldrh	r5, [r3, #0]
 8007652:	4854      	ldr	r0, [pc, #336]	; (80077a4 <_printf_i+0x244>)
 8007654:	2f6f      	cmp	r7, #111	; 0x6f
 8007656:	bf0c      	ite	eq
 8007658:	2308      	moveq	r3, #8
 800765a:	230a      	movne	r3, #10
 800765c:	2100      	movs	r1, #0
 800765e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007662:	6866      	ldr	r6, [r4, #4]
 8007664:	60a6      	str	r6, [r4, #8]
 8007666:	2e00      	cmp	r6, #0
 8007668:	bfa2      	ittt	ge
 800766a:	6821      	ldrge	r1, [r4, #0]
 800766c:	f021 0104 	bicge.w	r1, r1, #4
 8007670:	6021      	strge	r1, [r4, #0]
 8007672:	b90d      	cbnz	r5, 8007678 <_printf_i+0x118>
 8007674:	2e00      	cmp	r6, #0
 8007676:	d04d      	beq.n	8007714 <_printf_i+0x1b4>
 8007678:	4616      	mov	r6, r2
 800767a:	fbb5 f1f3 	udiv	r1, r5, r3
 800767e:	fb03 5711 	mls	r7, r3, r1, r5
 8007682:	5dc7      	ldrb	r7, [r0, r7]
 8007684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007688:	462f      	mov	r7, r5
 800768a:	42bb      	cmp	r3, r7
 800768c:	460d      	mov	r5, r1
 800768e:	d9f4      	bls.n	800767a <_printf_i+0x11a>
 8007690:	2b08      	cmp	r3, #8
 8007692:	d10b      	bne.n	80076ac <_printf_i+0x14c>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	07df      	lsls	r7, r3, #31
 8007698:	d508      	bpl.n	80076ac <_printf_i+0x14c>
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	6861      	ldr	r1, [r4, #4]
 800769e:	4299      	cmp	r1, r3
 80076a0:	bfde      	ittt	le
 80076a2:	2330      	movle	r3, #48	; 0x30
 80076a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ac:	1b92      	subs	r2, r2, r6
 80076ae:	6122      	str	r2, [r4, #16]
 80076b0:	f8cd a000 	str.w	sl, [sp]
 80076b4:	464b      	mov	r3, r9
 80076b6:	aa03      	add	r2, sp, #12
 80076b8:	4621      	mov	r1, r4
 80076ba:	4640      	mov	r0, r8
 80076bc:	f7ff fee2 	bl	8007484 <_printf_common>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d14c      	bne.n	800775e <_printf_i+0x1fe>
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	b004      	add	sp, #16
 80076ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ce:	4835      	ldr	r0, [pc, #212]	; (80077a4 <_printf_i+0x244>)
 80076d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	680e      	ldr	r6, [r1, #0]
 80076d8:	061f      	lsls	r7, r3, #24
 80076da:	f856 5b04 	ldr.w	r5, [r6], #4
 80076de:	600e      	str	r6, [r1, #0]
 80076e0:	d514      	bpl.n	800770c <_printf_i+0x1ac>
 80076e2:	07d9      	lsls	r1, r3, #31
 80076e4:	bf44      	itt	mi
 80076e6:	f043 0320 	orrmi.w	r3, r3, #32
 80076ea:	6023      	strmi	r3, [r4, #0]
 80076ec:	b91d      	cbnz	r5, 80076f6 <_printf_i+0x196>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	f023 0320 	bic.w	r3, r3, #32
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	2310      	movs	r3, #16
 80076f8:	e7b0      	b.n	800765c <_printf_i+0xfc>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	f043 0320 	orr.w	r3, r3, #32
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	2378      	movs	r3, #120	; 0x78
 8007704:	4828      	ldr	r0, [pc, #160]	; (80077a8 <_printf_i+0x248>)
 8007706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800770a:	e7e3      	b.n	80076d4 <_printf_i+0x174>
 800770c:	065e      	lsls	r6, r3, #25
 800770e:	bf48      	it	mi
 8007710:	b2ad      	uxthmi	r5, r5
 8007712:	e7e6      	b.n	80076e2 <_printf_i+0x182>
 8007714:	4616      	mov	r6, r2
 8007716:	e7bb      	b.n	8007690 <_printf_i+0x130>
 8007718:	680b      	ldr	r3, [r1, #0]
 800771a:	6826      	ldr	r6, [r4, #0]
 800771c:	6960      	ldr	r0, [r4, #20]
 800771e:	1d1d      	adds	r5, r3, #4
 8007720:	600d      	str	r5, [r1, #0]
 8007722:	0635      	lsls	r5, r6, #24
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	d501      	bpl.n	800772c <_printf_i+0x1cc>
 8007728:	6018      	str	r0, [r3, #0]
 800772a:	e002      	b.n	8007732 <_printf_i+0x1d2>
 800772c:	0671      	lsls	r1, r6, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0x1c8>
 8007730:	8018      	strh	r0, [r3, #0]
 8007732:	2300      	movs	r3, #0
 8007734:	6123      	str	r3, [r4, #16]
 8007736:	4616      	mov	r6, r2
 8007738:	e7ba      	b.n	80076b0 <_printf_i+0x150>
 800773a:	680b      	ldr	r3, [r1, #0]
 800773c:	1d1a      	adds	r2, r3, #4
 800773e:	600a      	str	r2, [r1, #0]
 8007740:	681e      	ldr	r6, [r3, #0]
 8007742:	6862      	ldr	r2, [r4, #4]
 8007744:	2100      	movs	r1, #0
 8007746:	4630      	mov	r0, r6
 8007748:	f7f8 fd52 	bl	80001f0 <memchr>
 800774c:	b108      	cbz	r0, 8007752 <_printf_i+0x1f2>
 800774e:	1b80      	subs	r0, r0, r6
 8007750:	6060      	str	r0, [r4, #4]
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	2300      	movs	r3, #0
 8007758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800775c:	e7a8      	b.n	80076b0 <_printf_i+0x150>
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	4632      	mov	r2, r6
 8007762:	4649      	mov	r1, r9
 8007764:	4640      	mov	r0, r8
 8007766:	47d0      	blx	sl
 8007768:	3001      	adds	r0, #1
 800776a:	d0ab      	beq.n	80076c4 <_printf_i+0x164>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	079b      	lsls	r3, r3, #30
 8007770:	d413      	bmi.n	800779a <_printf_i+0x23a>
 8007772:	68e0      	ldr	r0, [r4, #12]
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	4298      	cmp	r0, r3
 8007778:	bfb8      	it	lt
 800777a:	4618      	movlt	r0, r3
 800777c:	e7a4      	b.n	80076c8 <_printf_i+0x168>
 800777e:	2301      	movs	r3, #1
 8007780:	4632      	mov	r2, r6
 8007782:	4649      	mov	r1, r9
 8007784:	4640      	mov	r0, r8
 8007786:	47d0      	blx	sl
 8007788:	3001      	adds	r0, #1
 800778a:	d09b      	beq.n	80076c4 <_printf_i+0x164>
 800778c:	3501      	adds	r5, #1
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	9903      	ldr	r1, [sp, #12]
 8007792:	1a5b      	subs	r3, r3, r1
 8007794:	42ab      	cmp	r3, r5
 8007796:	dcf2      	bgt.n	800777e <_printf_i+0x21e>
 8007798:	e7eb      	b.n	8007772 <_printf_i+0x212>
 800779a:	2500      	movs	r5, #0
 800779c:	f104 0619 	add.w	r6, r4, #25
 80077a0:	e7f5      	b.n	800778e <_printf_i+0x22e>
 80077a2:	bf00      	nop
 80077a4:	0800bd96 	.word	0x0800bd96
 80077a8:	0800bda7 	.word	0x0800bda7

080077ac <_scanf_float>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	b087      	sub	sp, #28
 80077b2:	4617      	mov	r7, r2
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	688b      	ldr	r3, [r1, #8]
 80077b8:	1e5a      	subs	r2, r3, #1
 80077ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077be:	bf83      	ittte	hi
 80077c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077c4:	195b      	addhi	r3, r3, r5
 80077c6:	9302      	strhi	r3, [sp, #8]
 80077c8:	2300      	movls	r3, #0
 80077ca:	bf86      	itte	hi
 80077cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077d0:	608b      	strhi	r3, [r1, #8]
 80077d2:	9302      	strls	r3, [sp, #8]
 80077d4:	680b      	ldr	r3, [r1, #0]
 80077d6:	468b      	mov	fp, r1
 80077d8:	2500      	movs	r5, #0
 80077da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077de:	f84b 3b1c 	str.w	r3, [fp], #28
 80077e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077e6:	4680      	mov	r8, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	465e      	mov	r6, fp
 80077ec:	46aa      	mov	sl, r5
 80077ee:	46a9      	mov	r9, r5
 80077f0:	9501      	str	r5, [sp, #4]
 80077f2:	68a2      	ldr	r2, [r4, #8]
 80077f4:	b152      	cbz	r2, 800780c <_scanf_float+0x60>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b4e      	cmp	r3, #78	; 0x4e
 80077fc:	d864      	bhi.n	80078c8 <_scanf_float+0x11c>
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d83c      	bhi.n	800787c <_scanf_float+0xd0>
 8007802:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007806:	b2c8      	uxtb	r0, r1
 8007808:	280e      	cmp	r0, #14
 800780a:	d93a      	bls.n	8007882 <_scanf_float+0xd6>
 800780c:	f1b9 0f00 	cmp.w	r9, #0
 8007810:	d003      	beq.n	800781a <_scanf_float+0x6e>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800781e:	f1ba 0f01 	cmp.w	sl, #1
 8007822:	f200 8113 	bhi.w	8007a4c <_scanf_float+0x2a0>
 8007826:	455e      	cmp	r6, fp
 8007828:	f200 8105 	bhi.w	8007a36 <_scanf_float+0x28a>
 800782c:	2501      	movs	r5, #1
 800782e:	4628      	mov	r0, r5
 8007830:	b007      	add	sp, #28
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800783a:	2a0d      	cmp	r2, #13
 800783c:	d8e6      	bhi.n	800780c <_scanf_float+0x60>
 800783e:	a101      	add	r1, pc, #4	; (adr r1, 8007844 <_scanf_float+0x98>)
 8007840:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007844:	08007983 	.word	0x08007983
 8007848:	0800780d 	.word	0x0800780d
 800784c:	0800780d 	.word	0x0800780d
 8007850:	0800780d 	.word	0x0800780d
 8007854:	080079e3 	.word	0x080079e3
 8007858:	080079bb 	.word	0x080079bb
 800785c:	0800780d 	.word	0x0800780d
 8007860:	0800780d 	.word	0x0800780d
 8007864:	08007991 	.word	0x08007991
 8007868:	0800780d 	.word	0x0800780d
 800786c:	0800780d 	.word	0x0800780d
 8007870:	0800780d 	.word	0x0800780d
 8007874:	0800780d 	.word	0x0800780d
 8007878:	08007949 	.word	0x08007949
 800787c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007880:	e7db      	b.n	800783a <_scanf_float+0x8e>
 8007882:	290e      	cmp	r1, #14
 8007884:	d8c2      	bhi.n	800780c <_scanf_float+0x60>
 8007886:	a001      	add	r0, pc, #4	; (adr r0, 800788c <_scanf_float+0xe0>)
 8007888:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800788c:	0800793b 	.word	0x0800793b
 8007890:	0800780d 	.word	0x0800780d
 8007894:	0800793b 	.word	0x0800793b
 8007898:	080079cf 	.word	0x080079cf
 800789c:	0800780d 	.word	0x0800780d
 80078a0:	080078e9 	.word	0x080078e9
 80078a4:	08007925 	.word	0x08007925
 80078a8:	08007925 	.word	0x08007925
 80078ac:	08007925 	.word	0x08007925
 80078b0:	08007925 	.word	0x08007925
 80078b4:	08007925 	.word	0x08007925
 80078b8:	08007925 	.word	0x08007925
 80078bc:	08007925 	.word	0x08007925
 80078c0:	08007925 	.word	0x08007925
 80078c4:	08007925 	.word	0x08007925
 80078c8:	2b6e      	cmp	r3, #110	; 0x6e
 80078ca:	d809      	bhi.n	80078e0 <_scanf_float+0x134>
 80078cc:	2b60      	cmp	r3, #96	; 0x60
 80078ce:	d8b2      	bhi.n	8007836 <_scanf_float+0x8a>
 80078d0:	2b54      	cmp	r3, #84	; 0x54
 80078d2:	d077      	beq.n	80079c4 <_scanf_float+0x218>
 80078d4:	2b59      	cmp	r3, #89	; 0x59
 80078d6:	d199      	bne.n	800780c <_scanf_float+0x60>
 80078d8:	2d07      	cmp	r5, #7
 80078da:	d197      	bne.n	800780c <_scanf_float+0x60>
 80078dc:	2508      	movs	r5, #8
 80078de:	e029      	b.n	8007934 <_scanf_float+0x188>
 80078e0:	2b74      	cmp	r3, #116	; 0x74
 80078e2:	d06f      	beq.n	80079c4 <_scanf_float+0x218>
 80078e4:	2b79      	cmp	r3, #121	; 0x79
 80078e6:	e7f6      	b.n	80078d6 <_scanf_float+0x12a>
 80078e8:	6821      	ldr	r1, [r4, #0]
 80078ea:	05c8      	lsls	r0, r1, #23
 80078ec:	d51a      	bpl.n	8007924 <_scanf_float+0x178>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80078f4:	6021      	str	r1, [r4, #0]
 80078f6:	f109 0901 	add.w	r9, r9, #1
 80078fa:	b11b      	cbz	r3, 8007904 <_scanf_float+0x158>
 80078fc:	3b01      	subs	r3, #1
 80078fe:	3201      	adds	r2, #1
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	60a2      	str	r2, [r4, #8]
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	3b01      	subs	r3, #1
 8007908:	60a3      	str	r3, [r4, #8]
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	3301      	adds	r3, #1
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3b01      	subs	r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	f340 8084 	ble.w	8007a24 <_scanf_float+0x278>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	e766      	b.n	80077f2 <_scanf_float+0x46>
 8007924:	eb1a 0f05 	cmn.w	sl, r5
 8007928:	f47f af70 	bne.w	800780c <_scanf_float+0x60>
 800792c:	6822      	ldr	r2, [r4, #0]
 800792e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	f806 3b01 	strb.w	r3, [r6], #1
 8007938:	e7e4      	b.n	8007904 <_scanf_float+0x158>
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	0610      	lsls	r0, r2, #24
 800793e:	f57f af65 	bpl.w	800780c <_scanf_float+0x60>
 8007942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007946:	e7f4      	b.n	8007932 <_scanf_float+0x186>
 8007948:	f1ba 0f00 	cmp.w	sl, #0
 800794c:	d10e      	bne.n	800796c <_scanf_float+0x1c0>
 800794e:	f1b9 0f00 	cmp.w	r9, #0
 8007952:	d10e      	bne.n	8007972 <_scanf_float+0x1c6>
 8007954:	6822      	ldr	r2, [r4, #0]
 8007956:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800795a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800795e:	d108      	bne.n	8007972 <_scanf_float+0x1c6>
 8007960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	f04f 0a01 	mov.w	sl, #1
 800796a:	e7e3      	b.n	8007934 <_scanf_float+0x188>
 800796c:	f1ba 0f02 	cmp.w	sl, #2
 8007970:	d055      	beq.n	8007a1e <_scanf_float+0x272>
 8007972:	2d01      	cmp	r5, #1
 8007974:	d002      	beq.n	800797c <_scanf_float+0x1d0>
 8007976:	2d04      	cmp	r5, #4
 8007978:	f47f af48 	bne.w	800780c <_scanf_float+0x60>
 800797c:	3501      	adds	r5, #1
 800797e:	b2ed      	uxtb	r5, r5
 8007980:	e7d8      	b.n	8007934 <_scanf_float+0x188>
 8007982:	f1ba 0f01 	cmp.w	sl, #1
 8007986:	f47f af41 	bne.w	800780c <_scanf_float+0x60>
 800798a:	f04f 0a02 	mov.w	sl, #2
 800798e:	e7d1      	b.n	8007934 <_scanf_float+0x188>
 8007990:	b97d      	cbnz	r5, 80079b2 <_scanf_float+0x206>
 8007992:	f1b9 0f00 	cmp.w	r9, #0
 8007996:	f47f af3c 	bne.w	8007812 <_scanf_float+0x66>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079a4:	f47f af39 	bne.w	800781a <_scanf_float+0x6e>
 80079a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	2501      	movs	r5, #1
 80079b0:	e7c0      	b.n	8007934 <_scanf_float+0x188>
 80079b2:	2d03      	cmp	r5, #3
 80079b4:	d0e2      	beq.n	800797c <_scanf_float+0x1d0>
 80079b6:	2d05      	cmp	r5, #5
 80079b8:	e7de      	b.n	8007978 <_scanf_float+0x1cc>
 80079ba:	2d02      	cmp	r5, #2
 80079bc:	f47f af26 	bne.w	800780c <_scanf_float+0x60>
 80079c0:	2503      	movs	r5, #3
 80079c2:	e7b7      	b.n	8007934 <_scanf_float+0x188>
 80079c4:	2d06      	cmp	r5, #6
 80079c6:	f47f af21 	bne.w	800780c <_scanf_float+0x60>
 80079ca:	2507      	movs	r5, #7
 80079cc:	e7b2      	b.n	8007934 <_scanf_float+0x188>
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	0591      	lsls	r1, r2, #22
 80079d2:	f57f af1b 	bpl.w	800780c <_scanf_float+0x60>
 80079d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80079da:	6022      	str	r2, [r4, #0]
 80079dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079e0:	e7a8      	b.n	8007934 <_scanf_float+0x188>
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80079e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80079ec:	d006      	beq.n	80079fc <_scanf_float+0x250>
 80079ee:	0550      	lsls	r0, r2, #21
 80079f0:	f57f af0c 	bpl.w	800780c <_scanf_float+0x60>
 80079f4:	f1b9 0f00 	cmp.w	r9, #0
 80079f8:	f43f af0f 	beq.w	800781a <_scanf_float+0x6e>
 80079fc:	0591      	lsls	r1, r2, #22
 80079fe:	bf58      	it	pl
 8007a00:	9901      	ldrpl	r1, [sp, #4]
 8007a02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a06:	bf58      	it	pl
 8007a08:	eba9 0101 	subpl.w	r1, r9, r1
 8007a0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a10:	bf58      	it	pl
 8007a12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	f04f 0900 	mov.w	r9, #0
 8007a1c:	e78a      	b.n	8007934 <_scanf_float+0x188>
 8007a1e:	f04f 0a03 	mov.w	sl, #3
 8007a22:	e787      	b.n	8007934 <_scanf_float+0x188>
 8007a24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a28:	4639      	mov	r1, r7
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4798      	blx	r3
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f aedf 	beq.w	80077f2 <_scanf_float+0x46>
 8007a34:	e6ea      	b.n	800780c <_scanf_float+0x60>
 8007a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a3e:	463a      	mov	r2, r7
 8007a40:	4640      	mov	r0, r8
 8007a42:	4798      	blx	r3
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	6123      	str	r3, [r4, #16]
 8007a4a:	e6ec      	b.n	8007826 <_scanf_float+0x7a>
 8007a4c:	1e6b      	subs	r3, r5, #1
 8007a4e:	2b06      	cmp	r3, #6
 8007a50:	d825      	bhi.n	8007a9e <_scanf_float+0x2f2>
 8007a52:	2d02      	cmp	r5, #2
 8007a54:	d836      	bhi.n	8007ac4 <_scanf_float+0x318>
 8007a56:	455e      	cmp	r6, fp
 8007a58:	f67f aee8 	bls.w	800782c <_scanf_float+0x80>
 8007a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a64:	463a      	mov	r2, r7
 8007a66:	4640      	mov	r0, r8
 8007a68:	4798      	blx	r3
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	e7f1      	b.n	8007a56 <_scanf_float+0x2aa>
 8007a72:	9802      	ldr	r0, [sp, #8]
 8007a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007a7c:	9002      	str	r0, [sp, #8]
 8007a7e:	463a      	mov	r2, r7
 8007a80:	4640      	mov	r0, r8
 8007a82:	4798      	blx	r3
 8007a84:	6923      	ldr	r3, [r4, #16]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a8e:	fa5f fa8a 	uxtb.w	sl, sl
 8007a92:	f1ba 0f02 	cmp.w	sl, #2
 8007a96:	d1ec      	bne.n	8007a72 <_scanf_float+0x2c6>
 8007a98:	3d03      	subs	r5, #3
 8007a9a:	b2ed      	uxtb	r5, r5
 8007a9c:	1b76      	subs	r6, r6, r5
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	05da      	lsls	r2, r3, #23
 8007aa2:	d52f      	bpl.n	8007b04 <_scanf_float+0x358>
 8007aa4:	055b      	lsls	r3, r3, #21
 8007aa6:	d510      	bpl.n	8007aca <_scanf_float+0x31e>
 8007aa8:	455e      	cmp	r6, fp
 8007aaa:	f67f aebf 	bls.w	800782c <_scanf_float+0x80>
 8007aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ab6:	463a      	mov	r2, r7
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4798      	blx	r3
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	e7f1      	b.n	8007aa8 <_scanf_float+0x2fc>
 8007ac4:	46aa      	mov	sl, r5
 8007ac6:	9602      	str	r6, [sp, #8]
 8007ac8:	e7df      	b.n	8007a8a <_scanf_float+0x2de>
 8007aca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	2965      	cmp	r1, #101	; 0x65
 8007ad2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ad6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007ada:	6123      	str	r3, [r4, #16]
 8007adc:	d00c      	beq.n	8007af8 <_scanf_float+0x34c>
 8007ade:	2945      	cmp	r1, #69	; 0x45
 8007ae0:	d00a      	beq.n	8007af8 <_scanf_float+0x34c>
 8007ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ae6:	463a      	mov	r2, r7
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4798      	blx	r3
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	1eb5      	subs	r5, r6, #2
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007afc:	463a      	mov	r2, r7
 8007afe:	4640      	mov	r0, r8
 8007b00:	4798      	blx	r3
 8007b02:	462e      	mov	r6, r5
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	f015 0510 	ands.w	r5, r5, #16
 8007b0a:	d158      	bne.n	8007bbe <_scanf_float+0x412>
 8007b0c:	7035      	strb	r5, [r6, #0]
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b18:	d11c      	bne.n	8007b54 <_scanf_float+0x3a8>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	454b      	cmp	r3, r9
 8007b1e:	eba3 0209 	sub.w	r2, r3, r9
 8007b22:	d124      	bne.n	8007b6e <_scanf_float+0x3c2>
 8007b24:	2200      	movs	r2, #0
 8007b26:	4659      	mov	r1, fp
 8007b28:	4640      	mov	r0, r8
 8007b2a:	f000 fe9b 	bl	8008864 <_strtod_r>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	6821      	ldr	r1, [r4, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f011 0f02 	tst.w	r1, #2
 8007b38:	ec57 6b10 	vmov	r6, r7, d0
 8007b3c:	f103 0204 	add.w	r2, r3, #4
 8007b40:	d020      	beq.n	8007b84 <_scanf_float+0x3d8>
 8007b42:	9903      	ldr	r1, [sp, #12]
 8007b44:	600a      	str	r2, [r1, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	e9c3 6700 	strd	r6, r7, [r3]
 8007b4c:	68e3      	ldr	r3, [r4, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60e3      	str	r3, [r4, #12]
 8007b52:	e66c      	b.n	800782e <_scanf_float+0x82>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0e4      	beq.n	8007b24 <_scanf_float+0x378>
 8007b5a:	9905      	ldr	r1, [sp, #20]
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	462a      	mov	r2, r5
 8007b60:	3101      	adds	r1, #1
 8007b62:	4640      	mov	r0, r8
 8007b64:	f000 ff08 	bl	8008978 <_strtol_r>
 8007b68:	9b04      	ldr	r3, [sp, #16]
 8007b6a:	9e05      	ldr	r6, [sp, #20]
 8007b6c:	1ac2      	subs	r2, r0, r3
 8007b6e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b72:	429e      	cmp	r6, r3
 8007b74:	bf28      	it	cs
 8007b76:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007b7a:	4912      	ldr	r1, [pc, #72]	; (8007bc4 <_scanf_float+0x418>)
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 f82b 	bl	8007bd8 <siprintf>
 8007b82:	e7cf      	b.n	8007b24 <_scanf_float+0x378>
 8007b84:	f011 0f04 	tst.w	r1, #4
 8007b88:	9903      	ldr	r1, [sp, #12]
 8007b8a:	600a      	str	r2, [r1, #0]
 8007b8c:	d1db      	bne.n	8007b46 <_scanf_float+0x39a>
 8007b8e:	f8d3 8000 	ldr.w	r8, [r3]
 8007b92:	ee10 2a10 	vmov	r2, s0
 8007b96:	ee10 0a10 	vmov	r0, s0
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	f7f8 ffcd 	bl	8000b3c <__aeabi_dcmpun>
 8007ba2:	b128      	cbz	r0, 8007bb0 <_scanf_float+0x404>
 8007ba4:	4808      	ldr	r0, [pc, #32]	; (8007bc8 <_scanf_float+0x41c>)
 8007ba6:	f000 f811 	bl	8007bcc <nanf>
 8007baa:	ed88 0a00 	vstr	s0, [r8]
 8007bae:	e7cd      	b.n	8007b4c <_scanf_float+0x3a0>
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f7f9 f820 	bl	8000bf8 <__aeabi_d2f>
 8007bb8:	f8c8 0000 	str.w	r0, [r8]
 8007bbc:	e7c6      	b.n	8007b4c <_scanf_float+0x3a0>
 8007bbe:	2500      	movs	r5, #0
 8007bc0:	e635      	b.n	800782e <_scanf_float+0x82>
 8007bc2:	bf00      	nop
 8007bc4:	0800bdb8 	.word	0x0800bdb8
 8007bc8:	0800c1d0 	.word	0x0800c1d0

08007bcc <nanf>:
 8007bcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007bd4 <nanf+0x8>
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	7fc00000 	.word	0x7fc00000

08007bd8 <siprintf>:
 8007bd8:	b40e      	push	{r1, r2, r3}
 8007bda:	b500      	push	{lr}
 8007bdc:	b09c      	sub	sp, #112	; 0x70
 8007bde:	ab1d      	add	r3, sp, #116	; 0x74
 8007be0:	9002      	str	r0, [sp, #8]
 8007be2:	9006      	str	r0, [sp, #24]
 8007be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007be8:	4809      	ldr	r0, [pc, #36]	; (8007c10 <siprintf+0x38>)
 8007bea:	9107      	str	r1, [sp, #28]
 8007bec:	9104      	str	r1, [sp, #16]
 8007bee:	4909      	ldr	r1, [pc, #36]	; (8007c14 <siprintf+0x3c>)
 8007bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf4:	9105      	str	r1, [sp, #20]
 8007bf6:	6800      	ldr	r0, [r0, #0]
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	a902      	add	r1, sp, #8
 8007bfc:	f002 fea4 	bl	800a948 <_svfiprintf_r>
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	b01c      	add	sp, #112	; 0x70
 8007c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c0c:	b003      	add	sp, #12
 8007c0e:	4770      	bx	lr
 8007c10:	20000010 	.word	0x20000010
 8007c14:	ffff0208 	.word	0xffff0208

08007c18 <sulp>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	ec45 4b10 	vmov	d0, r4, r5
 8007c22:	4616      	mov	r6, r2
 8007c24:	f002 fc2c 	bl	800a480 <__ulp>
 8007c28:	ec51 0b10 	vmov	r0, r1, d0
 8007c2c:	b17e      	cbz	r6, 8007c4e <sulp+0x36>
 8007c2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dd09      	ble.n	8007c4e <sulp+0x36>
 8007c3a:	051b      	lsls	r3, r3, #20
 8007c3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c40:	2400      	movs	r4, #0
 8007c42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	f7f8 fcdd 	bl	8000608 <__aeabi_dmul>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}

08007c50 <_strtod_l>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	b0a3      	sub	sp, #140	; 0x8c
 8007c56:	461f      	mov	r7, r3
 8007c58:	2300      	movs	r3, #0
 8007c5a:	931e      	str	r3, [sp, #120]	; 0x78
 8007c5c:	4ba4      	ldr	r3, [pc, #656]	; (8007ef0 <_strtod_l+0x2a0>)
 8007c5e:	9219      	str	r2, [sp, #100]	; 0x64
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	9307      	str	r3, [sp, #28]
 8007c64:	4604      	mov	r4, r0
 8007c66:	4618      	mov	r0, r3
 8007c68:	4688      	mov	r8, r1
 8007c6a:	f7f8 fab9 	bl	80001e0 <strlen>
 8007c6e:	f04f 0a00 	mov.w	sl, #0
 8007c72:	4605      	mov	r5, r0
 8007c74:	f04f 0b00 	mov.w	fp, #0
 8007c78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007c7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	2a2b      	cmp	r2, #43	; 0x2b
 8007c82:	d04c      	beq.n	8007d1e <_strtod_l+0xce>
 8007c84:	d839      	bhi.n	8007cfa <_strtod_l+0xaa>
 8007c86:	2a0d      	cmp	r2, #13
 8007c88:	d832      	bhi.n	8007cf0 <_strtod_l+0xa0>
 8007c8a:	2a08      	cmp	r2, #8
 8007c8c:	d832      	bhi.n	8007cf4 <_strtod_l+0xa4>
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	d03c      	beq.n	8007d0c <_strtod_l+0xbc>
 8007c92:	2300      	movs	r3, #0
 8007c94:	930e      	str	r3, [sp, #56]	; 0x38
 8007c96:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007c98:	7833      	ldrb	r3, [r6, #0]
 8007c9a:	2b30      	cmp	r3, #48	; 0x30
 8007c9c:	f040 80b4 	bne.w	8007e08 <_strtod_l+0x1b8>
 8007ca0:	7873      	ldrb	r3, [r6, #1]
 8007ca2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ca6:	2b58      	cmp	r3, #88	; 0x58
 8007ca8:	d16c      	bne.n	8007d84 <_strtod_l+0x134>
 8007caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cac:	9301      	str	r3, [sp, #4]
 8007cae:	ab1e      	add	r3, sp, #120	; 0x78
 8007cb0:	9702      	str	r7, [sp, #8]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4a8f      	ldr	r2, [pc, #572]	; (8007ef4 <_strtod_l+0x2a4>)
 8007cb6:	ab1f      	add	r3, sp, #124	; 0x7c
 8007cb8:	a91d      	add	r1, sp, #116	; 0x74
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f001 fd40 	bl	8009740 <__gethex>
 8007cc0:	f010 0707 	ands.w	r7, r0, #7
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	d005      	beq.n	8007cd4 <_strtod_l+0x84>
 8007cc8:	2f06      	cmp	r7, #6
 8007cca:	d12a      	bne.n	8007d22 <_strtod_l+0xd2>
 8007ccc:	3601      	adds	r6, #1
 8007cce:	2300      	movs	r3, #0
 8007cd0:	961d      	str	r6, [sp, #116]	; 0x74
 8007cd2:	930e      	str	r3, [sp, #56]	; 0x38
 8007cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f040 8596 	bne.w	8008808 <_strtod_l+0xbb8>
 8007cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cde:	b1db      	cbz	r3, 8007d18 <_strtod_l+0xc8>
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ce6:	ec43 2b10 	vmov	d0, r2, r3
 8007cea:	b023      	add	sp, #140	; 0x8c
 8007cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	2a20      	cmp	r2, #32
 8007cf2:	d1ce      	bne.n	8007c92 <_strtod_l+0x42>
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	931d      	str	r3, [sp, #116]	; 0x74
 8007cf8:	e7c0      	b.n	8007c7c <_strtod_l+0x2c>
 8007cfa:	2a2d      	cmp	r2, #45	; 0x2d
 8007cfc:	d1c9      	bne.n	8007c92 <_strtod_l+0x42>
 8007cfe:	2201      	movs	r2, #1
 8007d00:	920e      	str	r2, [sp, #56]	; 0x38
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	921d      	str	r2, [sp, #116]	; 0x74
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1c4      	bne.n	8007c96 <_strtod_l+0x46>
 8007d0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d0e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f040 8576 	bne.w	8008804 <_strtod_l+0xbb4>
 8007d18:	4652      	mov	r2, sl
 8007d1a:	465b      	mov	r3, fp
 8007d1c:	e7e3      	b.n	8007ce6 <_strtod_l+0x96>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	e7ee      	b.n	8007d00 <_strtod_l+0xb0>
 8007d22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d24:	b13a      	cbz	r2, 8007d36 <_strtod_l+0xe6>
 8007d26:	2135      	movs	r1, #53	; 0x35
 8007d28:	a820      	add	r0, sp, #128	; 0x80
 8007d2a:	f002 fcb4 	bl	800a696 <__copybits>
 8007d2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d30:	4620      	mov	r0, r4
 8007d32:	f002 f879 	bl	8009e28 <_Bfree>
 8007d36:	3f01      	subs	r7, #1
 8007d38:	2f05      	cmp	r7, #5
 8007d3a:	d807      	bhi.n	8007d4c <_strtod_l+0xfc>
 8007d3c:	e8df f007 	tbb	[pc, r7]
 8007d40:	1d180b0e 	.word	0x1d180b0e
 8007d44:	030e      	.short	0x030e
 8007d46:	f04f 0b00 	mov.w	fp, #0
 8007d4a:	46da      	mov	sl, fp
 8007d4c:	0728      	lsls	r0, r5, #28
 8007d4e:	d5c1      	bpl.n	8007cd4 <_strtod_l+0x84>
 8007d50:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007d54:	e7be      	b.n	8007cd4 <_strtod_l+0x84>
 8007d56:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007d5a:	e7f7      	b.n	8007d4c <_strtod_l+0xfc>
 8007d5c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007d60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d6e:	e7ed      	b.n	8007d4c <_strtod_l+0xfc>
 8007d70:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007ef8 <_strtod_l+0x2a8>
 8007d74:	f04f 0a00 	mov.w	sl, #0
 8007d78:	e7e8      	b.n	8007d4c <_strtod_l+0xfc>
 8007d7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007d7e:	f04f 3aff 	mov.w	sl, #4294967295
 8007d82:	e7e3      	b.n	8007d4c <_strtod_l+0xfc>
 8007d84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	921d      	str	r2, [sp, #116]	; 0x74
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b30      	cmp	r3, #48	; 0x30
 8007d8e:	d0f9      	beq.n	8007d84 <_strtod_l+0x134>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d09f      	beq.n	8007cd4 <_strtod_l+0x84>
 8007d94:	2301      	movs	r3, #1
 8007d96:	f04f 0900 	mov.w	r9, #0
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007da0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007da4:	464f      	mov	r7, r9
 8007da6:	220a      	movs	r2, #10
 8007da8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007daa:	7806      	ldrb	r6, [r0, #0]
 8007dac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007db0:	b2d9      	uxtb	r1, r3
 8007db2:	2909      	cmp	r1, #9
 8007db4:	d92a      	bls.n	8007e0c <_strtod_l+0x1bc>
 8007db6:	9907      	ldr	r1, [sp, #28]
 8007db8:	462a      	mov	r2, r5
 8007dba:	f002 fedd 	bl	800ab78 <strncmp>
 8007dbe:	b398      	cbz	r0, 8007e28 <_strtod_l+0x1d8>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	4633      	mov	r3, r6
 8007dc4:	463d      	mov	r5, r7
 8007dc6:	9007      	str	r0, [sp, #28]
 8007dc8:	4602      	mov	r2, r0
 8007dca:	2b65      	cmp	r3, #101	; 0x65
 8007dcc:	d001      	beq.n	8007dd2 <_strtod_l+0x182>
 8007dce:	2b45      	cmp	r3, #69	; 0x45
 8007dd0:	d118      	bne.n	8007e04 <_strtod_l+0x1b4>
 8007dd2:	b91d      	cbnz	r5, 8007ddc <_strtod_l+0x18c>
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	4303      	orrs	r3, r0
 8007dd8:	d098      	beq.n	8007d0c <_strtod_l+0xbc>
 8007dda:	2500      	movs	r5, #0
 8007ddc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007de0:	f108 0301 	add.w	r3, r8, #1
 8007de4:	931d      	str	r3, [sp, #116]	; 0x74
 8007de6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007dea:	2b2b      	cmp	r3, #43	; 0x2b
 8007dec:	d075      	beq.n	8007eda <_strtod_l+0x28a>
 8007dee:	2b2d      	cmp	r3, #45	; 0x2d
 8007df0:	d07b      	beq.n	8007eea <_strtod_l+0x29a>
 8007df2:	f04f 0c00 	mov.w	ip, #0
 8007df6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007dfa:	2909      	cmp	r1, #9
 8007dfc:	f240 8082 	bls.w	8007f04 <_strtod_l+0x2b4>
 8007e00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007e04:	2600      	movs	r6, #0
 8007e06:	e09d      	b.n	8007f44 <_strtod_l+0x2f4>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e7c4      	b.n	8007d96 <_strtod_l+0x146>
 8007e0c:	2f08      	cmp	r7, #8
 8007e0e:	bfd8      	it	le
 8007e10:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007e12:	f100 0001 	add.w	r0, r0, #1
 8007e16:	bfda      	itte	le
 8007e18:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e1c:	9309      	strle	r3, [sp, #36]	; 0x24
 8007e1e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e22:	3701      	adds	r7, #1
 8007e24:	901d      	str	r0, [sp, #116]	; 0x74
 8007e26:	e7bf      	b.n	8007da8 <_strtod_l+0x158>
 8007e28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e2a:	195a      	adds	r2, r3, r5
 8007e2c:	921d      	str	r2, [sp, #116]	; 0x74
 8007e2e:	5d5b      	ldrb	r3, [r3, r5]
 8007e30:	2f00      	cmp	r7, #0
 8007e32:	d037      	beq.n	8007ea4 <_strtod_l+0x254>
 8007e34:	9007      	str	r0, [sp, #28]
 8007e36:	463d      	mov	r5, r7
 8007e38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007e3c:	2a09      	cmp	r2, #9
 8007e3e:	d912      	bls.n	8007e66 <_strtod_l+0x216>
 8007e40:	2201      	movs	r2, #1
 8007e42:	e7c2      	b.n	8007dca <_strtod_l+0x17a>
 8007e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	921d      	str	r2, [sp, #116]	; 0x74
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	2b30      	cmp	r3, #48	; 0x30
 8007e50:	d0f8      	beq.n	8007e44 <_strtod_l+0x1f4>
 8007e52:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007e56:	2a08      	cmp	r2, #8
 8007e58:	f200 84db 	bhi.w	8008812 <_strtod_l+0xbc2>
 8007e5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007e5e:	9007      	str	r0, [sp, #28]
 8007e60:	2000      	movs	r0, #0
 8007e62:	920a      	str	r2, [sp, #40]	; 0x28
 8007e64:	4605      	mov	r5, r0
 8007e66:	3b30      	subs	r3, #48	; 0x30
 8007e68:	f100 0201 	add.w	r2, r0, #1
 8007e6c:	d014      	beq.n	8007e98 <_strtod_l+0x248>
 8007e6e:	9907      	ldr	r1, [sp, #28]
 8007e70:	4411      	add	r1, r2
 8007e72:	9107      	str	r1, [sp, #28]
 8007e74:	462a      	mov	r2, r5
 8007e76:	eb00 0e05 	add.w	lr, r0, r5
 8007e7a:	210a      	movs	r1, #10
 8007e7c:	4572      	cmp	r2, lr
 8007e7e:	d113      	bne.n	8007ea8 <_strtod_l+0x258>
 8007e80:	182a      	adds	r2, r5, r0
 8007e82:	2a08      	cmp	r2, #8
 8007e84:	f105 0501 	add.w	r5, r5, #1
 8007e88:	4405      	add	r5, r0
 8007e8a:	dc1c      	bgt.n	8007ec6 <_strtod_l+0x276>
 8007e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e8e:	220a      	movs	r2, #10
 8007e90:	fb02 3301 	mla	r3, r2, r1, r3
 8007e94:	9309      	str	r3, [sp, #36]	; 0x24
 8007e96:	2200      	movs	r2, #0
 8007e98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e9a:	1c59      	adds	r1, r3, #1
 8007e9c:	911d      	str	r1, [sp, #116]	; 0x74
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	e7c9      	b.n	8007e38 <_strtod_l+0x1e8>
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	e7d2      	b.n	8007e4e <_strtod_l+0x1fe>
 8007ea8:	2a08      	cmp	r2, #8
 8007eaa:	dc04      	bgt.n	8007eb6 <_strtod_l+0x266>
 8007eac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007eae:	434e      	muls	r6, r1
 8007eb0:	9609      	str	r6, [sp, #36]	; 0x24
 8007eb2:	3201      	adds	r2, #1
 8007eb4:	e7e2      	b.n	8007e7c <_strtod_l+0x22c>
 8007eb6:	f102 0c01 	add.w	ip, r2, #1
 8007eba:	f1bc 0f10 	cmp.w	ip, #16
 8007ebe:	bfd8      	it	le
 8007ec0:	fb01 f909 	mulle.w	r9, r1, r9
 8007ec4:	e7f5      	b.n	8007eb2 <_strtod_l+0x262>
 8007ec6:	2d10      	cmp	r5, #16
 8007ec8:	bfdc      	itt	le
 8007eca:	220a      	movle	r2, #10
 8007ecc:	fb02 3909 	mlale	r9, r2, r9, r3
 8007ed0:	e7e1      	b.n	8007e96 <_strtod_l+0x246>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	e77c      	b.n	8007dd4 <_strtod_l+0x184>
 8007eda:	f04f 0c00 	mov.w	ip, #0
 8007ede:	f108 0302 	add.w	r3, r8, #2
 8007ee2:	931d      	str	r3, [sp, #116]	; 0x74
 8007ee4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007ee8:	e785      	b.n	8007df6 <_strtod_l+0x1a6>
 8007eea:	f04f 0c01 	mov.w	ip, #1
 8007eee:	e7f6      	b.n	8007ede <_strtod_l+0x28e>
 8007ef0:	0800c010 	.word	0x0800c010
 8007ef4:	0800bdc0 	.word	0x0800bdc0
 8007ef8:	7ff00000 	.word	0x7ff00000
 8007efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	911d      	str	r1, [sp, #116]	; 0x74
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b30      	cmp	r3, #48	; 0x30
 8007f06:	d0f9      	beq.n	8007efc <_strtod_l+0x2ac>
 8007f08:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007f0c:	2908      	cmp	r1, #8
 8007f0e:	f63f af79 	bhi.w	8007e04 <_strtod_l+0x1b4>
 8007f12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007f16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f18:	9308      	str	r3, [sp, #32]
 8007f1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f1c:	1c59      	adds	r1, r3, #1
 8007f1e:	911d      	str	r1, [sp, #116]	; 0x74
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007f26:	2e09      	cmp	r6, #9
 8007f28:	d937      	bls.n	8007f9a <_strtod_l+0x34a>
 8007f2a:	9e08      	ldr	r6, [sp, #32]
 8007f2c:	1b89      	subs	r1, r1, r6
 8007f2e:	2908      	cmp	r1, #8
 8007f30:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f34:	dc02      	bgt.n	8007f3c <_strtod_l+0x2ec>
 8007f36:	4576      	cmp	r6, lr
 8007f38:	bfa8      	it	ge
 8007f3a:	4676      	movge	r6, lr
 8007f3c:	f1bc 0f00 	cmp.w	ip, #0
 8007f40:	d000      	beq.n	8007f44 <_strtod_l+0x2f4>
 8007f42:	4276      	negs	r6, r6
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	d14f      	bne.n	8007fe8 <_strtod_l+0x398>
 8007f48:	9904      	ldr	r1, [sp, #16]
 8007f4a:	4301      	orrs	r1, r0
 8007f4c:	f47f aec2 	bne.w	8007cd4 <_strtod_l+0x84>
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	f47f aedb 	bne.w	8007d0c <_strtod_l+0xbc>
 8007f56:	2b69      	cmp	r3, #105	; 0x69
 8007f58:	d027      	beq.n	8007faa <_strtod_l+0x35a>
 8007f5a:	dc24      	bgt.n	8007fa6 <_strtod_l+0x356>
 8007f5c:	2b49      	cmp	r3, #73	; 0x49
 8007f5e:	d024      	beq.n	8007faa <_strtod_l+0x35a>
 8007f60:	2b4e      	cmp	r3, #78	; 0x4e
 8007f62:	f47f aed3 	bne.w	8007d0c <_strtod_l+0xbc>
 8007f66:	499e      	ldr	r1, [pc, #632]	; (80081e0 <_strtod_l+0x590>)
 8007f68:	a81d      	add	r0, sp, #116	; 0x74
 8007f6a:	f001 fe41 	bl	8009bf0 <__match>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f43f aecc 	beq.w	8007d0c <_strtod_l+0xbc>
 8007f74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b28      	cmp	r3, #40	; 0x28
 8007f7a:	d12d      	bne.n	8007fd8 <_strtod_l+0x388>
 8007f7c:	4999      	ldr	r1, [pc, #612]	; (80081e4 <_strtod_l+0x594>)
 8007f7e:	aa20      	add	r2, sp, #128	; 0x80
 8007f80:	a81d      	add	r0, sp, #116	; 0x74
 8007f82:	f001 fe49 	bl	8009c18 <__hexnan>
 8007f86:	2805      	cmp	r0, #5
 8007f88:	d126      	bne.n	8007fd8 <_strtod_l+0x388>
 8007f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f8c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007f90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007f94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007f98:	e69c      	b.n	8007cd4 <_strtod_l+0x84>
 8007f9a:	210a      	movs	r1, #10
 8007f9c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007fa0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007fa4:	e7b9      	b.n	8007f1a <_strtod_l+0x2ca>
 8007fa6:	2b6e      	cmp	r3, #110	; 0x6e
 8007fa8:	e7db      	b.n	8007f62 <_strtod_l+0x312>
 8007faa:	498f      	ldr	r1, [pc, #572]	; (80081e8 <_strtod_l+0x598>)
 8007fac:	a81d      	add	r0, sp, #116	; 0x74
 8007fae:	f001 fe1f 	bl	8009bf0 <__match>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f43f aeaa 	beq.w	8007d0c <_strtod_l+0xbc>
 8007fb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fba:	498c      	ldr	r1, [pc, #560]	; (80081ec <_strtod_l+0x59c>)
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	a81d      	add	r0, sp, #116	; 0x74
 8007fc0:	931d      	str	r3, [sp, #116]	; 0x74
 8007fc2:	f001 fe15 	bl	8009bf0 <__match>
 8007fc6:	b910      	cbnz	r0, 8007fce <_strtod_l+0x37e>
 8007fc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fca:	3301      	adds	r3, #1
 8007fcc:	931d      	str	r3, [sp, #116]	; 0x74
 8007fce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80081fc <_strtod_l+0x5ac>
 8007fd2:	f04f 0a00 	mov.w	sl, #0
 8007fd6:	e67d      	b.n	8007cd4 <_strtod_l+0x84>
 8007fd8:	4885      	ldr	r0, [pc, #532]	; (80081f0 <_strtod_l+0x5a0>)
 8007fda:	f002 fdb5 	bl	800ab48 <nan>
 8007fde:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007fe2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007fe6:	e675      	b.n	8007cd4 <_strtod_l+0x84>
 8007fe8:	9b07      	ldr	r3, [sp, #28]
 8007fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fec:	1af3      	subs	r3, r6, r3
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	bf08      	it	eq
 8007ff2:	462f      	moveq	r7, r5
 8007ff4:	2d10      	cmp	r5, #16
 8007ff6:	9308      	str	r3, [sp, #32]
 8007ff8:	46a8      	mov	r8, r5
 8007ffa:	bfa8      	it	ge
 8007ffc:	f04f 0810 	movge.w	r8, #16
 8008000:	f7f8 fa88 	bl	8000514 <__aeabi_ui2d>
 8008004:	2d09      	cmp	r5, #9
 8008006:	4682      	mov	sl, r0
 8008008:	468b      	mov	fp, r1
 800800a:	dd13      	ble.n	8008034 <_strtod_l+0x3e4>
 800800c:	4b79      	ldr	r3, [pc, #484]	; (80081f4 <_strtod_l+0x5a4>)
 800800e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008012:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008016:	f7f8 faf7 	bl	8000608 <__aeabi_dmul>
 800801a:	4682      	mov	sl, r0
 800801c:	4648      	mov	r0, r9
 800801e:	468b      	mov	fp, r1
 8008020:	f7f8 fa78 	bl	8000514 <__aeabi_ui2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4650      	mov	r0, sl
 800802a:	4659      	mov	r1, fp
 800802c:	f7f8 f936 	bl	800029c <__adddf3>
 8008030:	4682      	mov	sl, r0
 8008032:	468b      	mov	fp, r1
 8008034:	2d0f      	cmp	r5, #15
 8008036:	dc38      	bgt.n	80080aa <_strtod_l+0x45a>
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	2b00      	cmp	r3, #0
 800803c:	f43f ae4a 	beq.w	8007cd4 <_strtod_l+0x84>
 8008040:	dd24      	ble.n	800808c <_strtod_l+0x43c>
 8008042:	2b16      	cmp	r3, #22
 8008044:	dc0b      	bgt.n	800805e <_strtod_l+0x40e>
 8008046:	4d6b      	ldr	r5, [pc, #428]	; (80081f4 <_strtod_l+0x5a4>)
 8008048:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800804c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008050:	4652      	mov	r2, sl
 8008052:	465b      	mov	r3, fp
 8008054:	f7f8 fad8 	bl	8000608 <__aeabi_dmul>
 8008058:	4682      	mov	sl, r0
 800805a:	468b      	mov	fp, r1
 800805c:	e63a      	b.n	8007cd4 <_strtod_l+0x84>
 800805e:	9a08      	ldr	r2, [sp, #32]
 8008060:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008064:	4293      	cmp	r3, r2
 8008066:	db20      	blt.n	80080aa <_strtod_l+0x45a>
 8008068:	4c62      	ldr	r4, [pc, #392]	; (80081f4 <_strtod_l+0x5a4>)
 800806a:	f1c5 050f 	rsb	r5, r5, #15
 800806e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008072:	4652      	mov	r2, sl
 8008074:	465b      	mov	r3, fp
 8008076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800807a:	f7f8 fac5 	bl	8000608 <__aeabi_dmul>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	1b5d      	subs	r5, r3, r5
 8008082:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008086:	e9d4 2300 	ldrd	r2, r3, [r4]
 800808a:	e7e3      	b.n	8008054 <_strtod_l+0x404>
 800808c:	9b08      	ldr	r3, [sp, #32]
 800808e:	3316      	adds	r3, #22
 8008090:	db0b      	blt.n	80080aa <_strtod_l+0x45a>
 8008092:	9b07      	ldr	r3, [sp, #28]
 8008094:	4a57      	ldr	r2, [pc, #348]	; (80081f4 <_strtod_l+0x5a4>)
 8008096:	1b9e      	subs	r6, r3, r6
 8008098:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800809c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080a0:	4650      	mov	r0, sl
 80080a2:	4659      	mov	r1, fp
 80080a4:	f7f8 fbda 	bl	800085c <__aeabi_ddiv>
 80080a8:	e7d6      	b.n	8008058 <_strtod_l+0x408>
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	eba5 0808 	sub.w	r8, r5, r8
 80080b0:	4498      	add	r8, r3
 80080b2:	f1b8 0f00 	cmp.w	r8, #0
 80080b6:	dd71      	ble.n	800819c <_strtod_l+0x54c>
 80080b8:	f018 030f 	ands.w	r3, r8, #15
 80080bc:	d00a      	beq.n	80080d4 <_strtod_l+0x484>
 80080be:	494d      	ldr	r1, [pc, #308]	; (80081f4 <_strtod_l+0x5a4>)
 80080c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080c4:	4652      	mov	r2, sl
 80080c6:	465b      	mov	r3, fp
 80080c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080cc:	f7f8 fa9c 	bl	8000608 <__aeabi_dmul>
 80080d0:	4682      	mov	sl, r0
 80080d2:	468b      	mov	fp, r1
 80080d4:	f038 080f 	bics.w	r8, r8, #15
 80080d8:	d04d      	beq.n	8008176 <_strtod_l+0x526>
 80080da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80080de:	dd22      	ble.n	8008126 <_strtod_l+0x4d6>
 80080e0:	2500      	movs	r5, #0
 80080e2:	462e      	mov	r6, r5
 80080e4:	9509      	str	r5, [sp, #36]	; 0x24
 80080e6:	9507      	str	r5, [sp, #28]
 80080e8:	2322      	movs	r3, #34	; 0x22
 80080ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 80081fc <_strtod_l+0x5ac>
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	f04f 0a00 	mov.w	sl, #0
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f43f adec 	beq.w	8007cd4 <_strtod_l+0x84>
 80080fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80080fe:	4620      	mov	r0, r4
 8008100:	f001 fe92 	bl	8009e28 <_Bfree>
 8008104:	9907      	ldr	r1, [sp, #28]
 8008106:	4620      	mov	r0, r4
 8008108:	f001 fe8e 	bl	8009e28 <_Bfree>
 800810c:	4631      	mov	r1, r6
 800810e:	4620      	mov	r0, r4
 8008110:	f001 fe8a 	bl	8009e28 <_Bfree>
 8008114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008116:	4620      	mov	r0, r4
 8008118:	f001 fe86 	bl	8009e28 <_Bfree>
 800811c:	4629      	mov	r1, r5
 800811e:	4620      	mov	r0, r4
 8008120:	f001 fe82 	bl	8009e28 <_Bfree>
 8008124:	e5d6      	b.n	8007cd4 <_strtod_l+0x84>
 8008126:	2300      	movs	r3, #0
 8008128:	ea4f 1828 	mov.w	r8, r8, asr #4
 800812c:	4650      	mov	r0, sl
 800812e:	4659      	mov	r1, fp
 8008130:	4699      	mov	r9, r3
 8008132:	f1b8 0f01 	cmp.w	r8, #1
 8008136:	dc21      	bgt.n	800817c <_strtod_l+0x52c>
 8008138:	b10b      	cbz	r3, 800813e <_strtod_l+0x4ee>
 800813a:	4682      	mov	sl, r0
 800813c:	468b      	mov	fp, r1
 800813e:	4b2e      	ldr	r3, [pc, #184]	; (80081f8 <_strtod_l+0x5a8>)
 8008140:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008144:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008148:	4652      	mov	r2, sl
 800814a:	465b      	mov	r3, fp
 800814c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008150:	f7f8 fa5a 	bl	8000608 <__aeabi_dmul>
 8008154:	4b29      	ldr	r3, [pc, #164]	; (80081fc <_strtod_l+0x5ac>)
 8008156:	460a      	mov	r2, r1
 8008158:	400b      	ands	r3, r1
 800815a:	4929      	ldr	r1, [pc, #164]	; (8008200 <_strtod_l+0x5b0>)
 800815c:	428b      	cmp	r3, r1
 800815e:	4682      	mov	sl, r0
 8008160:	d8be      	bhi.n	80080e0 <_strtod_l+0x490>
 8008162:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008166:	428b      	cmp	r3, r1
 8008168:	bf86      	itte	hi
 800816a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008204 <_strtod_l+0x5b4>
 800816e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008172:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008176:	2300      	movs	r3, #0
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	e081      	b.n	8008280 <_strtod_l+0x630>
 800817c:	f018 0f01 	tst.w	r8, #1
 8008180:	d007      	beq.n	8008192 <_strtod_l+0x542>
 8008182:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <_strtod_l+0x5a8>)
 8008184:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 fa3c 	bl	8000608 <__aeabi_dmul>
 8008190:	2301      	movs	r3, #1
 8008192:	f109 0901 	add.w	r9, r9, #1
 8008196:	ea4f 0868 	mov.w	r8, r8, asr #1
 800819a:	e7ca      	b.n	8008132 <_strtod_l+0x4e2>
 800819c:	d0eb      	beq.n	8008176 <_strtod_l+0x526>
 800819e:	f1c8 0800 	rsb	r8, r8, #0
 80081a2:	f018 020f 	ands.w	r2, r8, #15
 80081a6:	d00a      	beq.n	80081be <_strtod_l+0x56e>
 80081a8:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <_strtod_l+0x5a4>)
 80081aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ae:	4650      	mov	r0, sl
 80081b0:	4659      	mov	r1, fp
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f7f8 fb51 	bl	800085c <__aeabi_ddiv>
 80081ba:	4682      	mov	sl, r0
 80081bc:	468b      	mov	fp, r1
 80081be:	ea5f 1828 	movs.w	r8, r8, asr #4
 80081c2:	d0d8      	beq.n	8008176 <_strtod_l+0x526>
 80081c4:	f1b8 0f1f 	cmp.w	r8, #31
 80081c8:	dd1e      	ble.n	8008208 <_strtod_l+0x5b8>
 80081ca:	2500      	movs	r5, #0
 80081cc:	462e      	mov	r6, r5
 80081ce:	9509      	str	r5, [sp, #36]	; 0x24
 80081d0:	9507      	str	r5, [sp, #28]
 80081d2:	2322      	movs	r3, #34	; 0x22
 80081d4:	f04f 0a00 	mov.w	sl, #0
 80081d8:	f04f 0b00 	mov.w	fp, #0
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	e789      	b.n	80080f4 <_strtod_l+0x4a4>
 80081e0:	0800bd91 	.word	0x0800bd91
 80081e4:	0800bdd4 	.word	0x0800bdd4
 80081e8:	0800bd89 	.word	0x0800bd89
 80081ec:	0800bf14 	.word	0x0800bf14
 80081f0:	0800c1d0 	.word	0x0800c1d0
 80081f4:	0800c0b0 	.word	0x0800c0b0
 80081f8:	0800c088 	.word	0x0800c088
 80081fc:	7ff00000 	.word	0x7ff00000
 8008200:	7ca00000 	.word	0x7ca00000
 8008204:	7fefffff 	.word	0x7fefffff
 8008208:	f018 0310 	ands.w	r3, r8, #16
 800820c:	bf18      	it	ne
 800820e:	236a      	movne	r3, #106	; 0x6a
 8008210:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80085c8 <_strtod_l+0x978>
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	4650      	mov	r0, sl
 8008218:	4659      	mov	r1, fp
 800821a:	2300      	movs	r3, #0
 800821c:	f018 0f01 	tst.w	r8, #1
 8008220:	d004      	beq.n	800822c <_strtod_l+0x5dc>
 8008222:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008226:	f7f8 f9ef 	bl	8000608 <__aeabi_dmul>
 800822a:	2301      	movs	r3, #1
 800822c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008230:	f109 0908 	add.w	r9, r9, #8
 8008234:	d1f2      	bne.n	800821c <_strtod_l+0x5cc>
 8008236:	b10b      	cbz	r3, 800823c <_strtod_l+0x5ec>
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	b1bb      	cbz	r3, 8008270 <_strtod_l+0x620>
 8008240:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008244:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008248:	2b00      	cmp	r3, #0
 800824a:	4659      	mov	r1, fp
 800824c:	dd10      	ble.n	8008270 <_strtod_l+0x620>
 800824e:	2b1f      	cmp	r3, #31
 8008250:	f340 8128 	ble.w	80084a4 <_strtod_l+0x854>
 8008254:	2b34      	cmp	r3, #52	; 0x34
 8008256:	bfde      	ittt	le
 8008258:	3b20      	suble	r3, #32
 800825a:	f04f 32ff 	movle.w	r2, #4294967295
 800825e:	fa02 f303 	lslle.w	r3, r2, r3
 8008262:	f04f 0a00 	mov.w	sl, #0
 8008266:	bfcc      	ite	gt
 8008268:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800826c:	ea03 0b01 	andle.w	fp, r3, r1
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	4650      	mov	r0, sl
 8008276:	4659      	mov	r1, fp
 8008278:	f7f8 fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800827c:	2800      	cmp	r0, #0
 800827e:	d1a4      	bne.n	80081ca <_strtod_l+0x57a>
 8008280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008286:	462b      	mov	r3, r5
 8008288:	463a      	mov	r2, r7
 800828a:	4620      	mov	r0, r4
 800828c:	f001 fe38 	bl	8009f00 <__s2b>
 8008290:	9009      	str	r0, [sp, #36]	; 0x24
 8008292:	2800      	cmp	r0, #0
 8008294:	f43f af24 	beq.w	80080e0 <_strtod_l+0x490>
 8008298:	9b07      	ldr	r3, [sp, #28]
 800829a:	1b9e      	subs	r6, r3, r6
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfb4      	ite	lt
 80082a2:	4633      	movlt	r3, r6
 80082a4:	2300      	movge	r3, #0
 80082a6:	9310      	str	r3, [sp, #64]	; 0x40
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	2500      	movs	r5, #0
 80082ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80082b0:	9318      	str	r3, [sp, #96]	; 0x60
 80082b2:	462e      	mov	r6, r5
 80082b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b6:	4620      	mov	r0, r4
 80082b8:	6859      	ldr	r1, [r3, #4]
 80082ba:	f001 fd75 	bl	8009da8 <_Balloc>
 80082be:	9007      	str	r0, [sp, #28]
 80082c0:	2800      	cmp	r0, #0
 80082c2:	f43f af11 	beq.w	80080e8 <_strtod_l+0x498>
 80082c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	3202      	adds	r2, #2
 80082cc:	f103 010c 	add.w	r1, r3, #12
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	300c      	adds	r0, #12
 80082d4:	f001 fd5a 	bl	8009d8c <memcpy>
 80082d8:	ec4b ab10 	vmov	d0, sl, fp
 80082dc:	aa20      	add	r2, sp, #128	; 0x80
 80082de:	a91f      	add	r1, sp, #124	; 0x7c
 80082e0:	4620      	mov	r0, r4
 80082e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80082e6:	f002 f947 	bl	800a578 <__d2b>
 80082ea:	901e      	str	r0, [sp, #120]	; 0x78
 80082ec:	2800      	cmp	r0, #0
 80082ee:	f43f aefb 	beq.w	80080e8 <_strtod_l+0x498>
 80082f2:	2101      	movs	r1, #1
 80082f4:	4620      	mov	r0, r4
 80082f6:	f001 fe9d 	bl	800a034 <__i2b>
 80082fa:	4606      	mov	r6, r0
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f43f aef3 	beq.w	80080e8 <_strtod_l+0x498>
 8008302:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008304:	9904      	ldr	r1, [sp, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfab      	itete	ge
 800830a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800830c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800830e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008310:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008314:	bfac      	ite	ge
 8008316:	eb03 0902 	addge.w	r9, r3, r2
 800831a:	1ad7      	sublt	r7, r2, r3
 800831c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800831e:	eba3 0801 	sub.w	r8, r3, r1
 8008322:	4490      	add	r8, r2
 8008324:	4ba3      	ldr	r3, [pc, #652]	; (80085b4 <_strtod_l+0x964>)
 8008326:	f108 38ff 	add.w	r8, r8, #4294967295
 800832a:	4598      	cmp	r8, r3
 800832c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008330:	f280 80cc 	bge.w	80084cc <_strtod_l+0x87c>
 8008334:	eba3 0308 	sub.w	r3, r3, r8
 8008338:	2b1f      	cmp	r3, #31
 800833a:	eba2 0203 	sub.w	r2, r2, r3
 800833e:	f04f 0101 	mov.w	r1, #1
 8008342:	f300 80b6 	bgt.w	80084b2 <_strtod_l+0x862>
 8008346:	fa01 f303 	lsl.w	r3, r1, r3
 800834a:	9311      	str	r3, [sp, #68]	; 0x44
 800834c:	2300      	movs	r3, #0
 800834e:	930c      	str	r3, [sp, #48]	; 0x30
 8008350:	eb09 0802 	add.w	r8, r9, r2
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	45c1      	cmp	r9, r8
 8008358:	4417      	add	r7, r2
 800835a:	441f      	add	r7, r3
 800835c:	464b      	mov	r3, r9
 800835e:	bfa8      	it	ge
 8008360:	4643      	movge	r3, r8
 8008362:	42bb      	cmp	r3, r7
 8008364:	bfa8      	it	ge
 8008366:	463b      	movge	r3, r7
 8008368:	2b00      	cmp	r3, #0
 800836a:	bfc2      	ittt	gt
 800836c:	eba8 0803 	subgt.w	r8, r8, r3
 8008370:	1aff      	subgt	r7, r7, r3
 8008372:	eba9 0903 	subgt.w	r9, r9, r3
 8008376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	dd17      	ble.n	80083ac <_strtod_l+0x75c>
 800837c:	4631      	mov	r1, r6
 800837e:	461a      	mov	r2, r3
 8008380:	4620      	mov	r0, r4
 8008382:	f001 ff13 	bl	800a1ac <__pow5mult>
 8008386:	4606      	mov	r6, r0
 8008388:	2800      	cmp	r0, #0
 800838a:	f43f aead 	beq.w	80080e8 <_strtod_l+0x498>
 800838e:	4601      	mov	r1, r0
 8008390:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008392:	4620      	mov	r0, r4
 8008394:	f001 fe64 	bl	800a060 <__multiply>
 8008398:	900f      	str	r0, [sp, #60]	; 0x3c
 800839a:	2800      	cmp	r0, #0
 800839c:	f43f aea4 	beq.w	80080e8 <_strtod_l+0x498>
 80083a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80083a2:	4620      	mov	r0, r4
 80083a4:	f001 fd40 	bl	8009e28 <_Bfree>
 80083a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083aa:	931e      	str	r3, [sp, #120]	; 0x78
 80083ac:	f1b8 0f00 	cmp.w	r8, #0
 80083b0:	f300 8091 	bgt.w	80084d6 <_strtod_l+0x886>
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dd08      	ble.n	80083cc <_strtod_l+0x77c>
 80083ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083bc:	9907      	ldr	r1, [sp, #28]
 80083be:	4620      	mov	r0, r4
 80083c0:	f001 fef4 	bl	800a1ac <__pow5mult>
 80083c4:	9007      	str	r0, [sp, #28]
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f43f ae8e 	beq.w	80080e8 <_strtod_l+0x498>
 80083cc:	2f00      	cmp	r7, #0
 80083ce:	dd08      	ble.n	80083e2 <_strtod_l+0x792>
 80083d0:	9907      	ldr	r1, [sp, #28]
 80083d2:	463a      	mov	r2, r7
 80083d4:	4620      	mov	r0, r4
 80083d6:	f001 ff43 	bl	800a260 <__lshift>
 80083da:	9007      	str	r0, [sp, #28]
 80083dc:	2800      	cmp	r0, #0
 80083de:	f43f ae83 	beq.w	80080e8 <_strtod_l+0x498>
 80083e2:	f1b9 0f00 	cmp.w	r9, #0
 80083e6:	dd08      	ble.n	80083fa <_strtod_l+0x7aa>
 80083e8:	4631      	mov	r1, r6
 80083ea:	464a      	mov	r2, r9
 80083ec:	4620      	mov	r0, r4
 80083ee:	f001 ff37 	bl	800a260 <__lshift>
 80083f2:	4606      	mov	r6, r0
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f43f ae77 	beq.w	80080e8 <_strtod_l+0x498>
 80083fa:	9a07      	ldr	r2, [sp, #28]
 80083fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80083fe:	4620      	mov	r0, r4
 8008400:	f001 ffb6 	bl	800a370 <__mdiff>
 8008404:	4605      	mov	r5, r0
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f ae6e 	beq.w	80080e8 <_strtod_l+0x498>
 800840c:	68c3      	ldr	r3, [r0, #12]
 800840e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008410:	2300      	movs	r3, #0
 8008412:	60c3      	str	r3, [r0, #12]
 8008414:	4631      	mov	r1, r6
 8008416:	f001 ff8f 	bl	800a338 <__mcmp>
 800841a:	2800      	cmp	r0, #0
 800841c:	da65      	bge.n	80084ea <_strtod_l+0x89a>
 800841e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008420:	ea53 030a 	orrs.w	r3, r3, sl
 8008424:	f040 8087 	bne.w	8008536 <_strtod_l+0x8e6>
 8008428:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8082 	bne.w	8008536 <_strtod_l+0x8e6>
 8008432:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008436:	0d1b      	lsrs	r3, r3, #20
 8008438:	051b      	lsls	r3, r3, #20
 800843a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800843e:	d97a      	bls.n	8008536 <_strtod_l+0x8e6>
 8008440:	696b      	ldr	r3, [r5, #20]
 8008442:	b913      	cbnz	r3, 800844a <_strtod_l+0x7fa>
 8008444:	692b      	ldr	r3, [r5, #16]
 8008446:	2b01      	cmp	r3, #1
 8008448:	dd75      	ble.n	8008536 <_strtod_l+0x8e6>
 800844a:	4629      	mov	r1, r5
 800844c:	2201      	movs	r2, #1
 800844e:	4620      	mov	r0, r4
 8008450:	f001 ff06 	bl	800a260 <__lshift>
 8008454:	4631      	mov	r1, r6
 8008456:	4605      	mov	r5, r0
 8008458:	f001 ff6e 	bl	800a338 <__mcmp>
 800845c:	2800      	cmp	r0, #0
 800845e:	dd6a      	ble.n	8008536 <_strtod_l+0x8e6>
 8008460:	9904      	ldr	r1, [sp, #16]
 8008462:	4a55      	ldr	r2, [pc, #340]	; (80085b8 <_strtod_l+0x968>)
 8008464:	465b      	mov	r3, fp
 8008466:	2900      	cmp	r1, #0
 8008468:	f000 8085 	beq.w	8008576 <_strtod_l+0x926>
 800846c:	ea02 010b 	and.w	r1, r2, fp
 8008470:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008474:	dc7f      	bgt.n	8008576 <_strtod_l+0x926>
 8008476:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800847a:	f77f aeaa 	ble.w	80081d2 <_strtod_l+0x582>
 800847e:	4a4f      	ldr	r2, [pc, #316]	; (80085bc <_strtod_l+0x96c>)
 8008480:	2300      	movs	r3, #0
 8008482:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008486:	4650      	mov	r0, sl
 8008488:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800848c:	4659      	mov	r1, fp
 800848e:	f7f8 f8bb 	bl	8000608 <__aeabi_dmul>
 8008492:	460b      	mov	r3, r1
 8008494:	4303      	orrs	r3, r0
 8008496:	bf08      	it	eq
 8008498:	2322      	moveq	r3, #34	; 0x22
 800849a:	4682      	mov	sl, r0
 800849c:	468b      	mov	fp, r1
 800849e:	bf08      	it	eq
 80084a0:	6023      	streq	r3, [r4, #0]
 80084a2:	e62b      	b.n	80080fc <_strtod_l+0x4ac>
 80084a4:	f04f 32ff 	mov.w	r2, #4294967295
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	ea03 0a0a 	and.w	sl, r3, sl
 80084b0:	e6de      	b.n	8008270 <_strtod_l+0x620>
 80084b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80084b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80084ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80084be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80084c2:	fa01 f308 	lsl.w	r3, r1, r8
 80084c6:	930c      	str	r3, [sp, #48]	; 0x30
 80084c8:	9111      	str	r1, [sp, #68]	; 0x44
 80084ca:	e741      	b.n	8008350 <_strtod_l+0x700>
 80084cc:	2300      	movs	r3, #0
 80084ce:	930c      	str	r3, [sp, #48]	; 0x30
 80084d0:	2301      	movs	r3, #1
 80084d2:	9311      	str	r3, [sp, #68]	; 0x44
 80084d4:	e73c      	b.n	8008350 <_strtod_l+0x700>
 80084d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80084d8:	4642      	mov	r2, r8
 80084da:	4620      	mov	r0, r4
 80084dc:	f001 fec0 	bl	800a260 <__lshift>
 80084e0:	901e      	str	r0, [sp, #120]	; 0x78
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f47f af66 	bne.w	80083b4 <_strtod_l+0x764>
 80084e8:	e5fe      	b.n	80080e8 <_strtod_l+0x498>
 80084ea:	465f      	mov	r7, fp
 80084ec:	d16e      	bne.n	80085cc <_strtod_l+0x97c>
 80084ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084f4:	b342      	cbz	r2, 8008548 <_strtod_l+0x8f8>
 80084f6:	4a32      	ldr	r2, [pc, #200]	; (80085c0 <_strtod_l+0x970>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d128      	bne.n	800854e <_strtod_l+0x8fe>
 80084fc:	9b04      	ldr	r3, [sp, #16]
 80084fe:	4650      	mov	r0, sl
 8008500:	b1eb      	cbz	r3, 800853e <_strtod_l+0x8ee>
 8008502:	4a2d      	ldr	r2, [pc, #180]	; (80085b8 <_strtod_l+0x968>)
 8008504:	403a      	ands	r2, r7
 8008506:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800850a:	f04f 31ff 	mov.w	r1, #4294967295
 800850e:	d819      	bhi.n	8008544 <_strtod_l+0x8f4>
 8008510:	0d12      	lsrs	r2, r2, #20
 8008512:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008516:	fa01 f303 	lsl.w	r3, r1, r3
 800851a:	4298      	cmp	r0, r3
 800851c:	d117      	bne.n	800854e <_strtod_l+0x8fe>
 800851e:	4b29      	ldr	r3, [pc, #164]	; (80085c4 <_strtod_l+0x974>)
 8008520:	429f      	cmp	r7, r3
 8008522:	d102      	bne.n	800852a <_strtod_l+0x8da>
 8008524:	3001      	adds	r0, #1
 8008526:	f43f addf 	beq.w	80080e8 <_strtod_l+0x498>
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <_strtod_l+0x968>)
 800852c:	403b      	ands	r3, r7
 800852e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008532:	f04f 0a00 	mov.w	sl, #0
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1a0      	bne.n	800847e <_strtod_l+0x82e>
 800853c:	e5de      	b.n	80080fc <_strtod_l+0x4ac>
 800853e:	f04f 33ff 	mov.w	r3, #4294967295
 8008542:	e7ea      	b.n	800851a <_strtod_l+0x8ca>
 8008544:	460b      	mov	r3, r1
 8008546:	e7e8      	b.n	800851a <_strtod_l+0x8ca>
 8008548:	ea53 030a 	orrs.w	r3, r3, sl
 800854c:	d088      	beq.n	8008460 <_strtod_l+0x810>
 800854e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008550:	b1db      	cbz	r3, 800858a <_strtod_l+0x93a>
 8008552:	423b      	tst	r3, r7
 8008554:	d0ef      	beq.n	8008536 <_strtod_l+0x8e6>
 8008556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008558:	9a04      	ldr	r2, [sp, #16]
 800855a:	4650      	mov	r0, sl
 800855c:	4659      	mov	r1, fp
 800855e:	b1c3      	cbz	r3, 8008592 <_strtod_l+0x942>
 8008560:	f7ff fb5a 	bl	8007c18 <sulp>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800856c:	f7f7 fe96 	bl	800029c <__adddf3>
 8008570:	4682      	mov	sl, r0
 8008572:	468b      	mov	fp, r1
 8008574:	e7df      	b.n	8008536 <_strtod_l+0x8e6>
 8008576:	4013      	ands	r3, r2
 8008578:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800857c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008580:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008584:	f04f 3aff 	mov.w	sl, #4294967295
 8008588:	e7d5      	b.n	8008536 <_strtod_l+0x8e6>
 800858a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800858c:	ea13 0f0a 	tst.w	r3, sl
 8008590:	e7e0      	b.n	8008554 <_strtod_l+0x904>
 8008592:	f7ff fb41 	bl	8007c18 <sulp>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800859e:	f7f7 fe7b 	bl	8000298 <__aeabi_dsub>
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	4682      	mov	sl, r0
 80085a8:	468b      	mov	fp, r1
 80085aa:	f7f8 fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d0c1      	beq.n	8008536 <_strtod_l+0x8e6>
 80085b2:	e60e      	b.n	80081d2 <_strtod_l+0x582>
 80085b4:	fffffc02 	.word	0xfffffc02
 80085b8:	7ff00000 	.word	0x7ff00000
 80085bc:	39500000 	.word	0x39500000
 80085c0:	000fffff 	.word	0x000fffff
 80085c4:	7fefffff 	.word	0x7fefffff
 80085c8:	0800bde8 	.word	0x0800bde8
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	f002 f82e 	bl	800a630 <__ratio>
 80085d4:	ec59 8b10 	vmov	r8, r9, d0
 80085d8:	ee10 0a10 	vmov	r0, s0
 80085dc:	2200      	movs	r2, #0
 80085de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085e2:	4649      	mov	r1, r9
 80085e4:	f7f8 fa8c 	bl	8000b00 <__aeabi_dcmple>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d07c      	beq.n	80086e6 <_strtod_l+0xa96>
 80085ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d04c      	beq.n	800868c <_strtod_l+0xa3c>
 80085f2:	4b95      	ldr	r3, [pc, #596]	; (8008848 <_strtod_l+0xbf8>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80085fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008848 <_strtod_l+0xbf8>
 80085fe:	f04f 0800 	mov.w	r8, #0
 8008602:	4b92      	ldr	r3, [pc, #584]	; (800884c <_strtod_l+0xbfc>)
 8008604:	403b      	ands	r3, r7
 8008606:	9311      	str	r3, [sp, #68]	; 0x44
 8008608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800860a:	4b91      	ldr	r3, [pc, #580]	; (8008850 <_strtod_l+0xc00>)
 800860c:	429a      	cmp	r2, r3
 800860e:	f040 80b2 	bne.w	8008776 <_strtod_l+0xb26>
 8008612:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800861a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800861e:	ec4b ab10 	vmov	d0, sl, fp
 8008622:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008626:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800862a:	f001 ff29 	bl	800a480 <__ulp>
 800862e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008632:	ec53 2b10 	vmov	r2, r3, d0
 8008636:	f7f7 ffe7 	bl	8000608 <__aeabi_dmul>
 800863a:	4652      	mov	r2, sl
 800863c:	465b      	mov	r3, fp
 800863e:	f7f7 fe2d 	bl	800029c <__adddf3>
 8008642:	460b      	mov	r3, r1
 8008644:	4981      	ldr	r1, [pc, #516]	; (800884c <_strtod_l+0xbfc>)
 8008646:	4a83      	ldr	r2, [pc, #524]	; (8008854 <_strtod_l+0xc04>)
 8008648:	4019      	ands	r1, r3
 800864a:	4291      	cmp	r1, r2
 800864c:	4682      	mov	sl, r0
 800864e:	d95e      	bls.n	800870e <_strtod_l+0xabe>
 8008650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008652:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008656:	4293      	cmp	r3, r2
 8008658:	d103      	bne.n	8008662 <_strtod_l+0xa12>
 800865a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865c:	3301      	adds	r3, #1
 800865e:	f43f ad43 	beq.w	80080e8 <_strtod_l+0x498>
 8008662:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008860 <_strtod_l+0xc10>
 8008666:	f04f 3aff 	mov.w	sl, #4294967295
 800866a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800866c:	4620      	mov	r0, r4
 800866e:	f001 fbdb 	bl	8009e28 <_Bfree>
 8008672:	9907      	ldr	r1, [sp, #28]
 8008674:	4620      	mov	r0, r4
 8008676:	f001 fbd7 	bl	8009e28 <_Bfree>
 800867a:	4631      	mov	r1, r6
 800867c:	4620      	mov	r0, r4
 800867e:	f001 fbd3 	bl	8009e28 <_Bfree>
 8008682:	4629      	mov	r1, r5
 8008684:	4620      	mov	r0, r4
 8008686:	f001 fbcf 	bl	8009e28 <_Bfree>
 800868a:	e613      	b.n	80082b4 <_strtod_l+0x664>
 800868c:	f1ba 0f00 	cmp.w	sl, #0
 8008690:	d11b      	bne.n	80086ca <_strtod_l+0xa7a>
 8008692:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008696:	b9f3      	cbnz	r3, 80086d6 <_strtod_l+0xa86>
 8008698:	4b6b      	ldr	r3, [pc, #428]	; (8008848 <_strtod_l+0xbf8>)
 800869a:	2200      	movs	r2, #0
 800869c:	4640      	mov	r0, r8
 800869e:	4649      	mov	r1, r9
 80086a0:	f7f8 fa24 	bl	8000aec <__aeabi_dcmplt>
 80086a4:	b9d0      	cbnz	r0, 80086dc <_strtod_l+0xa8c>
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	4b6b      	ldr	r3, [pc, #428]	; (8008858 <_strtod_l+0xc08>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	f7f7 ffab 	bl	8000608 <__aeabi_dmul>
 80086b2:	4680      	mov	r8, r0
 80086b4:	4689      	mov	r9, r1
 80086b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80086ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80086be:	931b      	str	r3, [sp, #108]	; 0x6c
 80086c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80086c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80086c8:	e79b      	b.n	8008602 <_strtod_l+0x9b2>
 80086ca:	f1ba 0f01 	cmp.w	sl, #1
 80086ce:	d102      	bne.n	80086d6 <_strtod_l+0xa86>
 80086d0:	2f00      	cmp	r7, #0
 80086d2:	f43f ad7e 	beq.w	80081d2 <_strtod_l+0x582>
 80086d6:	4b61      	ldr	r3, [pc, #388]	; (800885c <_strtod_l+0xc0c>)
 80086d8:	2200      	movs	r2, #0
 80086da:	e78c      	b.n	80085f6 <_strtod_l+0x9a6>
 80086dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008858 <_strtod_l+0xc08>
 80086e0:	f04f 0800 	mov.w	r8, #0
 80086e4:	e7e7      	b.n	80086b6 <_strtod_l+0xa66>
 80086e6:	4b5c      	ldr	r3, [pc, #368]	; (8008858 <_strtod_l+0xc08>)
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	2200      	movs	r2, #0
 80086ee:	f7f7 ff8b 	bl	8000608 <__aeabi_dmul>
 80086f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	b933      	cbnz	r3, 8008708 <_strtod_l+0xab8>
 80086fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086fe:	9012      	str	r0, [sp, #72]	; 0x48
 8008700:	9313      	str	r3, [sp, #76]	; 0x4c
 8008702:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008706:	e7dd      	b.n	80086c4 <_strtod_l+0xa74>
 8008708:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800870c:	e7f9      	b.n	8008702 <_strtod_l+0xab2>
 800870e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008712:	9b04      	ldr	r3, [sp, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1a8      	bne.n	800866a <_strtod_l+0xa1a>
 8008718:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800871c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800871e:	0d1b      	lsrs	r3, r3, #20
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	429a      	cmp	r2, r3
 8008724:	d1a1      	bne.n	800866a <_strtod_l+0xa1a>
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f8 fab5 	bl	8000c98 <__aeabi_d2lz>
 800872e:	f7f7 ff3d 	bl	80005ac <__aeabi_l2d>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4640      	mov	r0, r8
 8008738:	4649      	mov	r1, r9
 800873a:	f7f7 fdad 	bl	8000298 <__aeabi_dsub>
 800873e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008744:	ea43 030a 	orr.w	r3, r3, sl
 8008748:	4313      	orrs	r3, r2
 800874a:	4680      	mov	r8, r0
 800874c:	4689      	mov	r9, r1
 800874e:	d053      	beq.n	80087f8 <_strtod_l+0xba8>
 8008750:	a335      	add	r3, pc, #212	; (adr r3, 8008828 <_strtod_l+0xbd8>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	f7f8 f9c9 	bl	8000aec <__aeabi_dcmplt>
 800875a:	2800      	cmp	r0, #0
 800875c:	f47f acce 	bne.w	80080fc <_strtod_l+0x4ac>
 8008760:	a333      	add	r3, pc, #204	; (adr r3, 8008830 <_strtod_l+0xbe0>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f8 f9dd 	bl	8000b28 <__aeabi_dcmpgt>
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f af7b 	beq.w	800866a <_strtod_l+0xa1a>
 8008774:	e4c2      	b.n	80080fc <_strtod_l+0x4ac>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	b333      	cbz	r3, 80087c8 <_strtod_l+0xb78>
 800877a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800877c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008780:	d822      	bhi.n	80087c8 <_strtod_l+0xb78>
 8008782:	a32d      	add	r3, pc, #180	; (adr r3, 8008838 <_strtod_l+0xbe8>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f8 f9b8 	bl	8000b00 <__aeabi_dcmple>
 8008790:	b1a0      	cbz	r0, 80087bc <_strtod_l+0xb6c>
 8008792:	4649      	mov	r1, r9
 8008794:	4640      	mov	r0, r8
 8008796:	f7f8 fa0f 	bl	8000bb8 <__aeabi_d2uiz>
 800879a:	2801      	cmp	r0, #1
 800879c:	bf38      	it	cc
 800879e:	2001      	movcc	r0, #1
 80087a0:	f7f7 feb8 	bl	8000514 <__aeabi_ui2d>
 80087a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a6:	4680      	mov	r8, r0
 80087a8:	4689      	mov	r9, r1
 80087aa:	bb13      	cbnz	r3, 80087f2 <_strtod_l+0xba2>
 80087ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087b0:	9014      	str	r0, [sp, #80]	; 0x50
 80087b2:	9315      	str	r3, [sp, #84]	; 0x54
 80087b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80087b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80087bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80087c4:	1a9b      	subs	r3, r3, r2
 80087c6:	930d      	str	r3, [sp, #52]	; 0x34
 80087c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80087d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80087d4:	f001 fe54 	bl	800a480 <__ulp>
 80087d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087dc:	ec53 2b10 	vmov	r2, r3, d0
 80087e0:	f7f7 ff12 	bl	8000608 <__aeabi_dmul>
 80087e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087e8:	f7f7 fd58 	bl	800029c <__adddf3>
 80087ec:	4682      	mov	sl, r0
 80087ee:	468b      	mov	fp, r1
 80087f0:	e78f      	b.n	8008712 <_strtod_l+0xac2>
 80087f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80087f6:	e7dd      	b.n	80087b4 <_strtod_l+0xb64>
 80087f8:	a311      	add	r3, pc, #68	; (adr r3, 8008840 <_strtod_l+0xbf0>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f8 f975 	bl	8000aec <__aeabi_dcmplt>
 8008802:	e7b4      	b.n	800876e <_strtod_l+0xb1e>
 8008804:	2300      	movs	r3, #0
 8008806:	930e      	str	r3, [sp, #56]	; 0x38
 8008808:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800880a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	f7ff ba65 	b.w	8007cdc <_strtod_l+0x8c>
 8008812:	2b65      	cmp	r3, #101	; 0x65
 8008814:	f43f ab5d 	beq.w	8007ed2 <_strtod_l+0x282>
 8008818:	2b45      	cmp	r3, #69	; 0x45
 800881a:	f43f ab5a 	beq.w	8007ed2 <_strtod_l+0x282>
 800881e:	2201      	movs	r2, #1
 8008820:	f7ff bb92 	b.w	8007f48 <_strtod_l+0x2f8>
 8008824:	f3af 8000 	nop.w
 8008828:	94a03595 	.word	0x94a03595
 800882c:	3fdfffff 	.word	0x3fdfffff
 8008830:	35afe535 	.word	0x35afe535
 8008834:	3fe00000 	.word	0x3fe00000
 8008838:	ffc00000 	.word	0xffc00000
 800883c:	41dfffff 	.word	0x41dfffff
 8008840:	94a03595 	.word	0x94a03595
 8008844:	3fcfffff 	.word	0x3fcfffff
 8008848:	3ff00000 	.word	0x3ff00000
 800884c:	7ff00000 	.word	0x7ff00000
 8008850:	7fe00000 	.word	0x7fe00000
 8008854:	7c9fffff 	.word	0x7c9fffff
 8008858:	3fe00000 	.word	0x3fe00000
 800885c:	bff00000 	.word	0xbff00000
 8008860:	7fefffff 	.word	0x7fefffff

08008864 <_strtod_r>:
 8008864:	4b01      	ldr	r3, [pc, #4]	; (800886c <_strtod_r+0x8>)
 8008866:	f7ff b9f3 	b.w	8007c50 <_strtod_l>
 800886a:	bf00      	nop
 800886c:	20000078 	.word	0x20000078

08008870 <_strtol_l.isra.0>:
 8008870:	2b01      	cmp	r3, #1
 8008872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008876:	d001      	beq.n	800887c <_strtol_l.isra.0+0xc>
 8008878:	2b24      	cmp	r3, #36	; 0x24
 800887a:	d906      	bls.n	800888a <_strtol_l.isra.0+0x1a>
 800887c:	f7fe fafa 	bl	8006e74 <__errno>
 8008880:	2316      	movs	r3, #22
 8008882:	6003      	str	r3, [r0, #0]
 8008884:	2000      	movs	r0, #0
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	4f3a      	ldr	r7, [pc, #232]	; (8008974 <_strtol_l.isra.0+0x104>)
 800888c:	468e      	mov	lr, r1
 800888e:	4676      	mov	r6, lr
 8008890:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008894:	5de5      	ldrb	r5, [r4, r7]
 8008896:	f015 0508 	ands.w	r5, r5, #8
 800889a:	d1f8      	bne.n	800888e <_strtol_l.isra.0+0x1e>
 800889c:	2c2d      	cmp	r4, #45	; 0x2d
 800889e:	d134      	bne.n	800890a <_strtol_l.isra.0+0x9a>
 80088a0:	f89e 4000 	ldrb.w	r4, [lr]
 80088a4:	f04f 0801 	mov.w	r8, #1
 80088a8:	f106 0e02 	add.w	lr, r6, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d05c      	beq.n	800896a <_strtol_l.isra.0+0xfa>
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d10c      	bne.n	80088ce <_strtol_l.isra.0+0x5e>
 80088b4:	2c30      	cmp	r4, #48	; 0x30
 80088b6:	d10a      	bne.n	80088ce <_strtol_l.isra.0+0x5e>
 80088b8:	f89e 4000 	ldrb.w	r4, [lr]
 80088bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088c0:	2c58      	cmp	r4, #88	; 0x58
 80088c2:	d14d      	bne.n	8008960 <_strtol_l.isra.0+0xf0>
 80088c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80088c8:	2310      	movs	r3, #16
 80088ca:	f10e 0e02 	add.w	lr, lr, #2
 80088ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80088d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80088d6:	2600      	movs	r6, #0
 80088d8:	fbbc f9f3 	udiv	r9, ip, r3
 80088dc:	4635      	mov	r5, r6
 80088de:	fb03 ca19 	mls	sl, r3, r9, ip
 80088e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80088e6:	2f09      	cmp	r7, #9
 80088e8:	d818      	bhi.n	800891c <_strtol_l.isra.0+0xac>
 80088ea:	463c      	mov	r4, r7
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	dd24      	ble.n	800893a <_strtol_l.isra.0+0xca>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	db1f      	blt.n	8008934 <_strtol_l.isra.0+0xc4>
 80088f4:	45a9      	cmp	r9, r5
 80088f6:	d31d      	bcc.n	8008934 <_strtol_l.isra.0+0xc4>
 80088f8:	d101      	bne.n	80088fe <_strtol_l.isra.0+0x8e>
 80088fa:	45a2      	cmp	sl, r4
 80088fc:	db1a      	blt.n	8008934 <_strtol_l.isra.0+0xc4>
 80088fe:	fb05 4503 	mla	r5, r5, r3, r4
 8008902:	2601      	movs	r6, #1
 8008904:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008908:	e7eb      	b.n	80088e2 <_strtol_l.isra.0+0x72>
 800890a:	2c2b      	cmp	r4, #43	; 0x2b
 800890c:	bf08      	it	eq
 800890e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008912:	46a8      	mov	r8, r5
 8008914:	bf08      	it	eq
 8008916:	f106 0e02 	addeq.w	lr, r6, #2
 800891a:	e7c7      	b.n	80088ac <_strtol_l.isra.0+0x3c>
 800891c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008920:	2f19      	cmp	r7, #25
 8008922:	d801      	bhi.n	8008928 <_strtol_l.isra.0+0xb8>
 8008924:	3c37      	subs	r4, #55	; 0x37
 8008926:	e7e1      	b.n	80088ec <_strtol_l.isra.0+0x7c>
 8008928:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800892c:	2f19      	cmp	r7, #25
 800892e:	d804      	bhi.n	800893a <_strtol_l.isra.0+0xca>
 8008930:	3c57      	subs	r4, #87	; 0x57
 8008932:	e7db      	b.n	80088ec <_strtol_l.isra.0+0x7c>
 8008934:	f04f 36ff 	mov.w	r6, #4294967295
 8008938:	e7e4      	b.n	8008904 <_strtol_l.isra.0+0x94>
 800893a:	2e00      	cmp	r6, #0
 800893c:	da05      	bge.n	800894a <_strtol_l.isra.0+0xda>
 800893e:	2322      	movs	r3, #34	; 0x22
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	4665      	mov	r5, ip
 8008944:	b942      	cbnz	r2, 8008958 <_strtol_l.isra.0+0xe8>
 8008946:	4628      	mov	r0, r5
 8008948:	e79d      	b.n	8008886 <_strtol_l.isra.0+0x16>
 800894a:	f1b8 0f00 	cmp.w	r8, #0
 800894e:	d000      	beq.n	8008952 <_strtol_l.isra.0+0xe2>
 8008950:	426d      	negs	r5, r5
 8008952:	2a00      	cmp	r2, #0
 8008954:	d0f7      	beq.n	8008946 <_strtol_l.isra.0+0xd6>
 8008956:	b10e      	cbz	r6, 800895c <_strtol_l.isra.0+0xec>
 8008958:	f10e 31ff 	add.w	r1, lr, #4294967295
 800895c:	6011      	str	r1, [r2, #0]
 800895e:	e7f2      	b.n	8008946 <_strtol_l.isra.0+0xd6>
 8008960:	2430      	movs	r4, #48	; 0x30
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1b3      	bne.n	80088ce <_strtol_l.isra.0+0x5e>
 8008966:	2308      	movs	r3, #8
 8008968:	e7b1      	b.n	80088ce <_strtol_l.isra.0+0x5e>
 800896a:	2c30      	cmp	r4, #48	; 0x30
 800896c:	d0a4      	beq.n	80088b8 <_strtol_l.isra.0+0x48>
 800896e:	230a      	movs	r3, #10
 8008970:	e7ad      	b.n	80088ce <_strtol_l.isra.0+0x5e>
 8008972:	bf00      	nop
 8008974:	0800be11 	.word	0x0800be11

08008978 <_strtol_r>:
 8008978:	f7ff bf7a 	b.w	8008870 <_strtol_l.isra.0>

0800897c <quorem>:
 800897c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	6903      	ldr	r3, [r0, #16]
 8008982:	690c      	ldr	r4, [r1, #16]
 8008984:	42a3      	cmp	r3, r4
 8008986:	4607      	mov	r7, r0
 8008988:	f2c0 8081 	blt.w	8008a8e <quorem+0x112>
 800898c:	3c01      	subs	r4, #1
 800898e:	f101 0814 	add.w	r8, r1, #20
 8008992:	f100 0514 	add.w	r5, r0, #20
 8008996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089a4:	3301      	adds	r3, #1
 80089a6:	429a      	cmp	r2, r3
 80089a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80089b4:	d331      	bcc.n	8008a1a <quorem+0x9e>
 80089b6:	f04f 0e00 	mov.w	lr, #0
 80089ba:	4640      	mov	r0, r8
 80089bc:	46ac      	mov	ip, r5
 80089be:	46f2      	mov	sl, lr
 80089c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80089c4:	b293      	uxth	r3, r2
 80089c6:	fb06 e303 	mla	r3, r6, r3, lr
 80089ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	ebaa 0303 	sub.w	r3, sl, r3
 80089d4:	0c12      	lsrs	r2, r2, #16
 80089d6:	f8dc a000 	ldr.w	sl, [ip]
 80089da:	fb06 e202 	mla	r2, r6, r2, lr
 80089de:	fa13 f38a 	uxtah	r3, r3, sl
 80089e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089e6:	fa1f fa82 	uxth.w	sl, r2
 80089ea:	f8dc 2000 	ldr.w	r2, [ip]
 80089ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80089f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089fc:	4581      	cmp	r9, r0
 80089fe:	f84c 3b04 	str.w	r3, [ip], #4
 8008a02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a06:	d2db      	bcs.n	80089c0 <quorem+0x44>
 8008a08:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a0c:	b92b      	cbnz	r3, 8008a1a <quorem+0x9e>
 8008a0e:	9b01      	ldr	r3, [sp, #4]
 8008a10:	3b04      	subs	r3, #4
 8008a12:	429d      	cmp	r5, r3
 8008a14:	461a      	mov	r2, r3
 8008a16:	d32e      	bcc.n	8008a76 <quorem+0xfa>
 8008a18:	613c      	str	r4, [r7, #16]
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f001 fc8c 	bl	800a338 <__mcmp>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	db24      	blt.n	8008a6e <quorem+0xf2>
 8008a24:	3601      	adds	r6, #1
 8008a26:	4628      	mov	r0, r5
 8008a28:	f04f 0c00 	mov.w	ip, #0
 8008a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a30:	f8d0 e000 	ldr.w	lr, [r0]
 8008a34:	b293      	uxth	r3, r2
 8008a36:	ebac 0303 	sub.w	r3, ip, r3
 8008a3a:	0c12      	lsrs	r2, r2, #16
 8008a3c:	fa13 f38e 	uxtah	r3, r3, lr
 8008a40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a4e:	45c1      	cmp	r9, r8
 8008a50:	f840 3b04 	str.w	r3, [r0], #4
 8008a54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a58:	d2e8      	bcs.n	8008a2c <quorem+0xb0>
 8008a5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a62:	b922      	cbnz	r2, 8008a6e <quorem+0xf2>
 8008a64:	3b04      	subs	r3, #4
 8008a66:	429d      	cmp	r5, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	d30a      	bcc.n	8008a82 <quorem+0x106>
 8008a6c:	613c      	str	r4, [r7, #16]
 8008a6e:	4630      	mov	r0, r6
 8008a70:	b003      	add	sp, #12
 8008a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	d1cc      	bne.n	8008a18 <quorem+0x9c>
 8008a7e:	3c01      	subs	r4, #1
 8008a80:	e7c7      	b.n	8008a12 <quorem+0x96>
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	3b04      	subs	r3, #4
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	d1f0      	bne.n	8008a6c <quorem+0xf0>
 8008a8a:	3c01      	subs	r4, #1
 8008a8c:	e7eb      	b.n	8008a66 <quorem+0xea>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e7ee      	b.n	8008a70 <quorem+0xf4>
 8008a92:	0000      	movs	r0, r0
 8008a94:	0000      	movs	r0, r0
	...

08008a98 <_dtoa_r>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	ed2d 8b02 	vpush	{d8}
 8008aa0:	ec57 6b10 	vmov	r6, r7, d0
 8008aa4:	b095      	sub	sp, #84	; 0x54
 8008aa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008aa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008aac:	9105      	str	r1, [sp, #20]
 8008aae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab8:	b975      	cbnz	r5, 8008ad8 <_dtoa_r+0x40>
 8008aba:	2010      	movs	r0, #16
 8008abc:	f001 f94c 	bl	8009d58 <malloc>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8008ac4:	b920      	cbnz	r0, 8008ad0 <_dtoa_r+0x38>
 8008ac6:	4bb2      	ldr	r3, [pc, #712]	; (8008d90 <_dtoa_r+0x2f8>)
 8008ac8:	21ea      	movs	r1, #234	; 0xea
 8008aca:	48b2      	ldr	r0, [pc, #712]	; (8008d94 <_dtoa_r+0x2fc>)
 8008acc:	f002 f874 	bl	800abb8 <__assert_func>
 8008ad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ad4:	6005      	str	r5, [r0, #0]
 8008ad6:	60c5      	str	r5, [r0, #12]
 8008ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ada:	6819      	ldr	r1, [r3, #0]
 8008adc:	b151      	cbz	r1, 8008af4 <_dtoa_r+0x5c>
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	604a      	str	r2, [r1, #4]
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	4093      	lsls	r3, r2
 8008ae6:	608b      	str	r3, [r1, #8]
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f001 f99d 	bl	8009e28 <_Bfree>
 8008aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	1e3b      	subs	r3, r7, #0
 8008af6:	bfb9      	ittee	lt
 8008af8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008afc:	9303      	strlt	r3, [sp, #12]
 8008afe:	2300      	movge	r3, #0
 8008b00:	f8c8 3000 	strge.w	r3, [r8]
 8008b04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b08:	4ba3      	ldr	r3, [pc, #652]	; (8008d98 <_dtoa_r+0x300>)
 8008b0a:	bfbc      	itt	lt
 8008b0c:	2201      	movlt	r2, #1
 8008b0e:	f8c8 2000 	strlt.w	r2, [r8]
 8008b12:	ea33 0309 	bics.w	r3, r3, r9
 8008b16:	d11b      	bne.n	8008b50 <_dtoa_r+0xb8>
 8008b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b24:	4333      	orrs	r3, r6
 8008b26:	f000 857a 	beq.w	800961e <_dtoa_r+0xb86>
 8008b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b2c:	b963      	cbnz	r3, 8008b48 <_dtoa_r+0xb0>
 8008b2e:	4b9b      	ldr	r3, [pc, #620]	; (8008d9c <_dtoa_r+0x304>)
 8008b30:	e024      	b.n	8008b7c <_dtoa_r+0xe4>
 8008b32:	4b9b      	ldr	r3, [pc, #620]	; (8008da0 <_dtoa_r+0x308>)
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	3308      	adds	r3, #8
 8008b38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	9800      	ldr	r0, [sp, #0]
 8008b3e:	b015      	add	sp, #84	; 0x54
 8008b40:	ecbd 8b02 	vpop	{d8}
 8008b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b48:	4b94      	ldr	r3, [pc, #592]	; (8008d9c <_dtoa_r+0x304>)
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	3303      	adds	r3, #3
 8008b4e:	e7f3      	b.n	8008b38 <_dtoa_r+0xa0>
 8008b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b54:	2200      	movs	r2, #0
 8008b56:	ec51 0b17 	vmov	r0, r1, d7
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008b60:	f7f7 ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b64:	4680      	mov	r8, r0
 8008b66:	b158      	cbz	r0, 8008b80 <_dtoa_r+0xe8>
 8008b68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8551 	beq.w	8009618 <_dtoa_r+0xb80>
 8008b76:	488b      	ldr	r0, [pc, #556]	; (8008da4 <_dtoa_r+0x30c>)
 8008b78:	6018      	str	r0, [r3, #0]
 8008b7a:	1e43      	subs	r3, r0, #1
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	e7dd      	b.n	8008b3c <_dtoa_r+0xa4>
 8008b80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008b84:	aa12      	add	r2, sp, #72	; 0x48
 8008b86:	a913      	add	r1, sp, #76	; 0x4c
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f001 fcf5 	bl	800a578 <__d2b>
 8008b8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b92:	4683      	mov	fp, r0
 8008b94:	2d00      	cmp	r5, #0
 8008b96:	d07c      	beq.n	8008c92 <_dtoa_r+0x1fa>
 8008b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ba2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008ba6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bb2:	4b7d      	ldr	r3, [pc, #500]	; (8008da8 <_dtoa_r+0x310>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	4639      	mov	r1, r7
 8008bba:	f7f7 fb6d 	bl	8000298 <__aeabi_dsub>
 8008bbe:	a36e      	add	r3, pc, #440	; (adr r3, 8008d78 <_dtoa_r+0x2e0>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fd20 	bl	8000608 <__aeabi_dmul>
 8008bc8:	a36d      	add	r3, pc, #436	; (adr r3, 8008d80 <_dtoa_r+0x2e8>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb65 	bl	800029c <__adddf3>
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	460f      	mov	r7, r1
 8008bd8:	f7f7 fcac 	bl	8000534 <__aeabi_i2d>
 8008bdc:	a36a      	add	r3, pc, #424	; (adr r3, 8008d88 <_dtoa_r+0x2f0>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f7f7 fd11 	bl	8000608 <__aeabi_dmul>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4630      	mov	r0, r6
 8008bec:	4639      	mov	r1, r7
 8008bee:	f7f7 fb55 	bl	800029c <__adddf3>
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	f7f7 ffb7 	bl	8000b68 <__aeabi_d2iz>
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4682      	mov	sl, r0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4630      	mov	r0, r6
 8008c02:	4639      	mov	r1, r7
 8008c04:	f7f7 ff72 	bl	8000aec <__aeabi_dcmplt>
 8008c08:	b148      	cbz	r0, 8008c1e <_dtoa_r+0x186>
 8008c0a:	4650      	mov	r0, sl
 8008c0c:	f7f7 fc92 	bl	8000534 <__aeabi_i2d>
 8008c10:	4632      	mov	r2, r6
 8008c12:	463b      	mov	r3, r7
 8008c14:	f7f7 ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c18:	b908      	cbnz	r0, 8008c1e <_dtoa_r+0x186>
 8008c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c1e:	f1ba 0f16 	cmp.w	sl, #22
 8008c22:	d854      	bhi.n	8008cce <_dtoa_r+0x236>
 8008c24:	4b61      	ldr	r3, [pc, #388]	; (8008dac <_dtoa_r+0x314>)
 8008c26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c32:	f7f7 ff5b 	bl	8000aec <__aeabi_dcmplt>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d04b      	beq.n	8008cd2 <_dtoa_r+0x23a>
 8008c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c3e:	2300      	movs	r3, #0
 8008c40:	930e      	str	r3, [sp, #56]	; 0x38
 8008c42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c44:	1b5d      	subs	r5, r3, r5
 8008c46:	1e6b      	subs	r3, r5, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	bf43      	ittte	mi
 8008c4c:	2300      	movmi	r3, #0
 8008c4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c52:	9304      	strmi	r3, [sp, #16]
 8008c54:	f04f 0800 	movpl.w	r8, #0
 8008c58:	f1ba 0f00 	cmp.w	sl, #0
 8008c5c:	db3b      	blt.n	8008cd6 <_dtoa_r+0x23e>
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c64:	4453      	add	r3, sl
 8008c66:	9304      	str	r3, [sp, #16]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9306      	str	r3, [sp, #24]
 8008c6c:	9b05      	ldr	r3, [sp, #20]
 8008c6e:	2b09      	cmp	r3, #9
 8008c70:	d869      	bhi.n	8008d46 <_dtoa_r+0x2ae>
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	bfc4      	itt	gt
 8008c76:	3b04      	subgt	r3, #4
 8008c78:	9305      	strgt	r3, [sp, #20]
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	f1a3 0302 	sub.w	r3, r3, #2
 8008c80:	bfcc      	ite	gt
 8008c82:	2500      	movgt	r5, #0
 8008c84:	2501      	movle	r5, #1
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d869      	bhi.n	8008d5e <_dtoa_r+0x2c6>
 8008c8a:	e8df f003 	tbb	[pc, r3]
 8008c8e:	4e2c      	.short	0x4e2c
 8008c90:	5a4c      	.short	0x5a4c
 8008c92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008c96:	441d      	add	r5, r3
 8008c98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	bfc1      	itttt	gt
 8008ca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ca4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ca8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008cac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cb0:	bfda      	itte	le
 8008cb2:	f1c3 0320 	rsble	r3, r3, #32
 8008cb6:	fa06 f003 	lslle.w	r0, r6, r3
 8008cba:	4318      	orrgt	r0, r3
 8008cbc:	f7f7 fc2a 	bl	8000514 <__aeabi_ui2d>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008cc8:	3d01      	subs	r5, #1
 8008cca:	9310      	str	r3, [sp, #64]	; 0x40
 8008ccc:	e771      	b.n	8008bb2 <_dtoa_r+0x11a>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e7b6      	b.n	8008c40 <_dtoa_r+0x1a8>
 8008cd2:	900e      	str	r0, [sp, #56]	; 0x38
 8008cd4:	e7b5      	b.n	8008c42 <_dtoa_r+0x1aa>
 8008cd6:	f1ca 0300 	rsb	r3, sl, #0
 8008cda:	9306      	str	r3, [sp, #24]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	eba8 080a 	sub.w	r8, r8, sl
 8008ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ce4:	e7c2      	b.n	8008c6c <_dtoa_r+0x1d4>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9308      	str	r3, [sp, #32]
 8008cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dc39      	bgt.n	8008d64 <_dtoa_r+0x2cc>
 8008cf0:	f04f 0901 	mov.w	r9, #1
 8008cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008cfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d00:	2200      	movs	r2, #0
 8008d02:	6042      	str	r2, [r0, #4]
 8008d04:	2204      	movs	r2, #4
 8008d06:	f102 0614 	add.w	r6, r2, #20
 8008d0a:	429e      	cmp	r6, r3
 8008d0c:	6841      	ldr	r1, [r0, #4]
 8008d0e:	d92f      	bls.n	8008d70 <_dtoa_r+0x2d8>
 8008d10:	4620      	mov	r0, r4
 8008d12:	f001 f849 	bl	8009da8 <_Balloc>
 8008d16:	9000      	str	r0, [sp, #0]
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d14b      	bne.n	8008db4 <_dtoa_r+0x31c>
 8008d1c:	4b24      	ldr	r3, [pc, #144]	; (8008db0 <_dtoa_r+0x318>)
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d24:	e6d1      	b.n	8008aca <_dtoa_r+0x32>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7de      	b.n	8008ce8 <_dtoa_r+0x250>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9308      	str	r3, [sp, #32]
 8008d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d30:	eb0a 0903 	add.w	r9, sl, r3
 8008d34:	f109 0301 	add.w	r3, r9, #1
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	bfb8      	it	lt
 8008d3e:	2301      	movlt	r3, #1
 8008d40:	e7dd      	b.n	8008cfe <_dtoa_r+0x266>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e7f2      	b.n	8008d2c <_dtoa_r+0x294>
 8008d46:	2501      	movs	r5, #1
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9305      	str	r3, [sp, #20]
 8008d4c:	9508      	str	r5, [sp, #32]
 8008d4e:	f04f 39ff 	mov.w	r9, #4294967295
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d58:	2312      	movs	r3, #18
 8008d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d5c:	e7cf      	b.n	8008cfe <_dtoa_r+0x266>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	9308      	str	r3, [sp, #32]
 8008d62:	e7f4      	b.n	8008d4e <_dtoa_r+0x2b6>
 8008d64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d68:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d6c:	464b      	mov	r3, r9
 8008d6e:	e7c6      	b.n	8008cfe <_dtoa_r+0x266>
 8008d70:	3101      	adds	r1, #1
 8008d72:	6041      	str	r1, [r0, #4]
 8008d74:	0052      	lsls	r2, r2, #1
 8008d76:	e7c6      	b.n	8008d06 <_dtoa_r+0x26e>
 8008d78:	636f4361 	.word	0x636f4361
 8008d7c:	3fd287a7 	.word	0x3fd287a7
 8008d80:	8b60c8b3 	.word	0x8b60c8b3
 8008d84:	3fc68a28 	.word	0x3fc68a28
 8008d88:	509f79fb 	.word	0x509f79fb
 8008d8c:	3fd34413 	.word	0x3fd34413
 8008d90:	0800bf1e 	.word	0x0800bf1e
 8008d94:	0800bf35 	.word	0x0800bf35
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	0800bf1a 	.word	0x0800bf1a
 8008da0:	0800bf11 	.word	0x0800bf11
 8008da4:	0800bd95 	.word	0x0800bd95
 8008da8:	3ff80000 	.word	0x3ff80000
 8008dac:	0800c0b0 	.word	0x0800c0b0
 8008db0:	0800bf94 	.word	0x0800bf94
 8008db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db6:	9a00      	ldr	r2, [sp, #0]
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	9b01      	ldr	r3, [sp, #4]
 8008dbc:	2b0e      	cmp	r3, #14
 8008dbe:	f200 80ad 	bhi.w	8008f1c <_dtoa_r+0x484>
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	f000 80aa 	beq.w	8008f1c <_dtoa_r+0x484>
 8008dc8:	f1ba 0f00 	cmp.w	sl, #0
 8008dcc:	dd36      	ble.n	8008e3c <_dtoa_r+0x3a4>
 8008dce:	4ac3      	ldr	r2, [pc, #780]	; (80090dc <_dtoa_r+0x644>)
 8008dd0:	f00a 030f 	and.w	r3, sl, #15
 8008dd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008dd8:	ed93 7b00 	vldr	d7, [r3]
 8008ddc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008de0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008de4:	eeb0 8a47 	vmov.f32	s16, s14
 8008de8:	eef0 8a67 	vmov.f32	s17, s15
 8008dec:	d016      	beq.n	8008e1c <_dtoa_r+0x384>
 8008dee:	4bbc      	ldr	r3, [pc, #752]	; (80090e0 <_dtoa_r+0x648>)
 8008df0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008df4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008df8:	f7f7 fd30 	bl	800085c <__aeabi_ddiv>
 8008dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e00:	f007 070f 	and.w	r7, r7, #15
 8008e04:	2503      	movs	r5, #3
 8008e06:	4eb6      	ldr	r6, [pc, #728]	; (80090e0 <_dtoa_r+0x648>)
 8008e08:	b957      	cbnz	r7, 8008e20 <_dtoa_r+0x388>
 8008e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0e:	ec53 2b18 	vmov	r2, r3, d8
 8008e12:	f7f7 fd23 	bl	800085c <__aeabi_ddiv>
 8008e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e1a:	e029      	b.n	8008e70 <_dtoa_r+0x3d8>
 8008e1c:	2502      	movs	r5, #2
 8008e1e:	e7f2      	b.n	8008e06 <_dtoa_r+0x36e>
 8008e20:	07f9      	lsls	r1, r7, #31
 8008e22:	d508      	bpl.n	8008e36 <_dtoa_r+0x39e>
 8008e24:	ec51 0b18 	vmov	r0, r1, d8
 8008e28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e2c:	f7f7 fbec 	bl	8000608 <__aeabi_dmul>
 8008e30:	ec41 0b18 	vmov	d8, r0, r1
 8008e34:	3501      	adds	r5, #1
 8008e36:	107f      	asrs	r7, r7, #1
 8008e38:	3608      	adds	r6, #8
 8008e3a:	e7e5      	b.n	8008e08 <_dtoa_r+0x370>
 8008e3c:	f000 80a6 	beq.w	8008f8c <_dtoa_r+0x4f4>
 8008e40:	f1ca 0600 	rsb	r6, sl, #0
 8008e44:	4ba5      	ldr	r3, [pc, #660]	; (80090dc <_dtoa_r+0x644>)
 8008e46:	4fa6      	ldr	r7, [pc, #664]	; (80090e0 <_dtoa_r+0x648>)
 8008e48:	f006 020f 	and.w	r2, r6, #15
 8008e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e58:	f7f7 fbd6 	bl	8000608 <__aeabi_dmul>
 8008e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e60:	1136      	asrs	r6, r6, #4
 8008e62:	2300      	movs	r3, #0
 8008e64:	2502      	movs	r5, #2
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	f040 8085 	bne.w	8008f76 <_dtoa_r+0x4de>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1d2      	bne.n	8008e16 <_dtoa_r+0x37e>
 8008e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 808c 	beq.w	8008f90 <_dtoa_r+0x4f8>
 8008e78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e7c:	4b99      	ldr	r3, [pc, #612]	; (80090e4 <_dtoa_r+0x64c>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 fe32 	bl	8000aec <__aeabi_dcmplt>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f000 8081 	beq.w	8008f90 <_dtoa_r+0x4f8>
 8008e8e:	9b01      	ldr	r3, [sp, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d07d      	beq.n	8008f90 <_dtoa_r+0x4f8>
 8008e94:	f1b9 0f00 	cmp.w	r9, #0
 8008e98:	dd3c      	ble.n	8008f14 <_dtoa_r+0x47c>
 8008e9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4b91      	ldr	r3, [pc, #580]	; (80090e8 <_dtoa_r+0x650>)
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 fbae 	bl	8000608 <__aeabi_dmul>
 8008eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb0:	3501      	adds	r5, #1
 8008eb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008eb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f7f7 fb3a 	bl	8000534 <__aeabi_i2d>
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	f7f7 fba0 	bl	8000608 <__aeabi_dmul>
 8008ec8:	4b88      	ldr	r3, [pc, #544]	; (80090ec <_dtoa_r+0x654>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f7f7 f9e6 	bl	800029c <__adddf3>
 8008ed0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed8:	9303      	str	r3, [sp, #12]
 8008eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d15c      	bne.n	8008f9a <_dtoa_r+0x502>
 8008ee0:	4b83      	ldr	r3, [pc, #524]	; (80090f0 <_dtoa_r+0x658>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	f7f7 f9d6 	bl	8000298 <__aeabi_dsub>
 8008eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	460f      	mov	r7, r1
 8008ef4:	f7f7 fe18 	bl	8000b28 <__aeabi_dcmpgt>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	f040 8296 	bne.w	800942a <_dtoa_r+0x992>
 8008efe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f02:	4630      	mov	r0, r6
 8008f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f08:	4639      	mov	r1, r7
 8008f0a:	f7f7 fdef 	bl	8000aec <__aeabi_dcmplt>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f040 8288 	bne.w	8009424 <_dtoa_r+0x98c>
 8008f14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f2c0 8158 	blt.w	80091d4 <_dtoa_r+0x73c>
 8008f24:	f1ba 0f0e 	cmp.w	sl, #14
 8008f28:	f300 8154 	bgt.w	80091d4 <_dtoa_r+0x73c>
 8008f2c:	4b6b      	ldr	r3, [pc, #428]	; (80090dc <_dtoa_r+0x644>)
 8008f2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f280 80e3 	bge.w	8009104 <_dtoa_r+0x66c>
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f300 80df 	bgt.w	8009104 <_dtoa_r+0x66c>
 8008f46:	f040 826d 	bne.w	8009424 <_dtoa_r+0x98c>
 8008f4a:	4b69      	ldr	r3, [pc, #420]	; (80090f0 <_dtoa_r+0x658>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fb59 	bl	8000608 <__aeabi_dmul>
 8008f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f5a:	f7f7 fddb 	bl	8000b14 <__aeabi_dcmpge>
 8008f5e:	9e01      	ldr	r6, [sp, #4]
 8008f60:	4637      	mov	r7, r6
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f040 8243 	bne.w	80093ee <_dtoa_r+0x956>
 8008f68:	9d00      	ldr	r5, [sp, #0]
 8008f6a:	2331      	movs	r3, #49	; 0x31
 8008f6c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f70:	f10a 0a01 	add.w	sl, sl, #1
 8008f74:	e23f      	b.n	80093f6 <_dtoa_r+0x95e>
 8008f76:	07f2      	lsls	r2, r6, #31
 8008f78:	d505      	bpl.n	8008f86 <_dtoa_r+0x4ee>
 8008f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7e:	f7f7 fb43 	bl	8000608 <__aeabi_dmul>
 8008f82:	3501      	adds	r5, #1
 8008f84:	2301      	movs	r3, #1
 8008f86:	1076      	asrs	r6, r6, #1
 8008f88:	3708      	adds	r7, #8
 8008f8a:	e76c      	b.n	8008e66 <_dtoa_r+0x3ce>
 8008f8c:	2502      	movs	r5, #2
 8008f8e:	e76f      	b.n	8008e70 <_dtoa_r+0x3d8>
 8008f90:	9b01      	ldr	r3, [sp, #4]
 8008f92:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f96:	930c      	str	r3, [sp, #48]	; 0x30
 8008f98:	e78d      	b.n	8008eb6 <_dtoa_r+0x41e>
 8008f9a:	9900      	ldr	r1, [sp, #0]
 8008f9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fa0:	4b4e      	ldr	r3, [pc, #312]	; (80090dc <_dtoa_r+0x644>)
 8008fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fa6:	4401      	add	r1, r0
 8008fa8:	9102      	str	r1, [sp, #8]
 8008faa:	9908      	ldr	r1, [sp, #32]
 8008fac:	eeb0 8a47 	vmov.f32	s16, s14
 8008fb0:	eef0 8a67 	vmov.f32	s17, s15
 8008fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	d045      	beq.n	800904c <_dtoa_r+0x5b4>
 8008fc0:	494c      	ldr	r1, [pc, #304]	; (80090f4 <_dtoa_r+0x65c>)
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f7f7 fc4a 	bl	800085c <__aeabi_ddiv>
 8008fc8:	ec53 2b18 	vmov	r2, r3, d8
 8008fcc:	f7f7 f964 	bl	8000298 <__aeabi_dsub>
 8008fd0:	9d00      	ldr	r5, [sp, #0]
 8008fd2:	ec41 0b18 	vmov	d8, r0, r1
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7f7 fdc5 	bl	8000b68 <__aeabi_d2iz>
 8008fde:	900c      	str	r0, [sp, #48]	; 0x30
 8008fe0:	f7f7 faa8 	bl	8000534 <__aeabi_i2d>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 f954 	bl	8000298 <__aeabi_dsub>
 8008ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ff2:	3330      	adds	r3, #48	; 0x30
 8008ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ff8:	ec53 2b18 	vmov	r2, r3, d8
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	f7f7 fd74 	bl	8000aec <__aeabi_dcmplt>
 8009004:	2800      	cmp	r0, #0
 8009006:	d165      	bne.n	80090d4 <_dtoa_r+0x63c>
 8009008:	4632      	mov	r2, r6
 800900a:	463b      	mov	r3, r7
 800900c:	4935      	ldr	r1, [pc, #212]	; (80090e4 <_dtoa_r+0x64c>)
 800900e:	2000      	movs	r0, #0
 8009010:	f7f7 f942 	bl	8000298 <__aeabi_dsub>
 8009014:	ec53 2b18 	vmov	r2, r3, d8
 8009018:	f7f7 fd68 	bl	8000aec <__aeabi_dcmplt>
 800901c:	2800      	cmp	r0, #0
 800901e:	f040 80b9 	bne.w	8009194 <_dtoa_r+0x6fc>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	429d      	cmp	r5, r3
 8009026:	f43f af75 	beq.w	8008f14 <_dtoa_r+0x47c>
 800902a:	4b2f      	ldr	r3, [pc, #188]	; (80090e8 <_dtoa_r+0x650>)
 800902c:	ec51 0b18 	vmov	r0, r1, d8
 8009030:	2200      	movs	r2, #0
 8009032:	f7f7 fae9 	bl	8000608 <__aeabi_dmul>
 8009036:	4b2c      	ldr	r3, [pc, #176]	; (80090e8 <_dtoa_r+0x650>)
 8009038:	ec41 0b18 	vmov	d8, r0, r1
 800903c:	2200      	movs	r2, #0
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 fae1 	bl	8000608 <__aeabi_dmul>
 8009046:	4606      	mov	r6, r0
 8009048:	460f      	mov	r7, r1
 800904a:	e7c4      	b.n	8008fd6 <_dtoa_r+0x53e>
 800904c:	ec51 0b17 	vmov	r0, r1, d7
 8009050:	f7f7 fada 	bl	8000608 <__aeabi_dmul>
 8009054:	9b02      	ldr	r3, [sp, #8]
 8009056:	9d00      	ldr	r5, [sp, #0]
 8009058:	930c      	str	r3, [sp, #48]	; 0x30
 800905a:	ec41 0b18 	vmov	d8, r0, r1
 800905e:	4639      	mov	r1, r7
 8009060:	4630      	mov	r0, r6
 8009062:	f7f7 fd81 	bl	8000b68 <__aeabi_d2iz>
 8009066:	9011      	str	r0, [sp, #68]	; 0x44
 8009068:	f7f7 fa64 	bl	8000534 <__aeabi_i2d>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 f910 	bl	8000298 <__aeabi_dsub>
 8009078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800907a:	3330      	adds	r3, #48	; 0x30
 800907c:	f805 3b01 	strb.w	r3, [r5], #1
 8009080:	9b02      	ldr	r3, [sp, #8]
 8009082:	429d      	cmp	r5, r3
 8009084:	4606      	mov	r6, r0
 8009086:	460f      	mov	r7, r1
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	d134      	bne.n	80090f8 <_dtoa_r+0x660>
 800908e:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <_dtoa_r+0x65c>)
 8009090:	ec51 0b18 	vmov	r0, r1, d8
 8009094:	f7f7 f902 	bl	800029c <__adddf3>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4630      	mov	r0, r6
 800909e:	4639      	mov	r1, r7
 80090a0:	f7f7 fd42 	bl	8000b28 <__aeabi_dcmpgt>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d175      	bne.n	8009194 <_dtoa_r+0x6fc>
 80090a8:	ec53 2b18 	vmov	r2, r3, d8
 80090ac:	4911      	ldr	r1, [pc, #68]	; (80090f4 <_dtoa_r+0x65c>)
 80090ae:	2000      	movs	r0, #0
 80090b0:	f7f7 f8f2 	bl	8000298 <__aeabi_dsub>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4630      	mov	r0, r6
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 fd16 	bl	8000aec <__aeabi_dcmplt>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f43f af27 	beq.w	8008f14 <_dtoa_r+0x47c>
 80090c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090c8:	1e6b      	subs	r3, r5, #1
 80090ca:	930c      	str	r3, [sp, #48]	; 0x30
 80090cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090d0:	2b30      	cmp	r3, #48	; 0x30
 80090d2:	d0f8      	beq.n	80090c6 <_dtoa_r+0x62e>
 80090d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090d8:	e04a      	b.n	8009170 <_dtoa_r+0x6d8>
 80090da:	bf00      	nop
 80090dc:	0800c0b0 	.word	0x0800c0b0
 80090e0:	0800c088 	.word	0x0800c088
 80090e4:	3ff00000 	.word	0x3ff00000
 80090e8:	40240000 	.word	0x40240000
 80090ec:	401c0000 	.word	0x401c0000
 80090f0:	40140000 	.word	0x40140000
 80090f4:	3fe00000 	.word	0x3fe00000
 80090f8:	4baf      	ldr	r3, [pc, #700]	; (80093b8 <_dtoa_r+0x920>)
 80090fa:	f7f7 fa85 	bl	8000608 <__aeabi_dmul>
 80090fe:	4606      	mov	r6, r0
 8009100:	460f      	mov	r7, r1
 8009102:	e7ac      	b.n	800905e <_dtoa_r+0x5c6>
 8009104:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009108:	9d00      	ldr	r5, [sp, #0]
 800910a:	4642      	mov	r2, r8
 800910c:	464b      	mov	r3, r9
 800910e:	4630      	mov	r0, r6
 8009110:	4639      	mov	r1, r7
 8009112:	f7f7 fba3 	bl	800085c <__aeabi_ddiv>
 8009116:	f7f7 fd27 	bl	8000b68 <__aeabi_d2iz>
 800911a:	9002      	str	r0, [sp, #8]
 800911c:	f7f7 fa0a 	bl	8000534 <__aeabi_i2d>
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	f7f7 fa70 	bl	8000608 <__aeabi_dmul>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4630      	mov	r0, r6
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 f8b2 	bl	8000298 <__aeabi_dsub>
 8009134:	9e02      	ldr	r6, [sp, #8]
 8009136:	9f01      	ldr	r7, [sp, #4]
 8009138:	3630      	adds	r6, #48	; 0x30
 800913a:	f805 6b01 	strb.w	r6, [r5], #1
 800913e:	9e00      	ldr	r6, [sp, #0]
 8009140:	1bae      	subs	r6, r5, r6
 8009142:	42b7      	cmp	r7, r6
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	d137      	bne.n	80091ba <_dtoa_r+0x722>
 800914a:	f7f7 f8a7 	bl	800029c <__adddf3>
 800914e:	4642      	mov	r2, r8
 8009150:	464b      	mov	r3, r9
 8009152:	4606      	mov	r6, r0
 8009154:	460f      	mov	r7, r1
 8009156:	f7f7 fce7 	bl	8000b28 <__aeabi_dcmpgt>
 800915a:	b9c8      	cbnz	r0, 8009190 <_dtoa_r+0x6f8>
 800915c:	4642      	mov	r2, r8
 800915e:	464b      	mov	r3, r9
 8009160:	4630      	mov	r0, r6
 8009162:	4639      	mov	r1, r7
 8009164:	f7f7 fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009168:	b110      	cbz	r0, 8009170 <_dtoa_r+0x6d8>
 800916a:	9b02      	ldr	r3, [sp, #8]
 800916c:	07d9      	lsls	r1, r3, #31
 800916e:	d40f      	bmi.n	8009190 <_dtoa_r+0x6f8>
 8009170:	4620      	mov	r0, r4
 8009172:	4659      	mov	r1, fp
 8009174:	f000 fe58 	bl	8009e28 <_Bfree>
 8009178:	2300      	movs	r3, #0
 800917a:	702b      	strb	r3, [r5, #0]
 800917c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800917e:	f10a 0001 	add.w	r0, sl, #1
 8009182:	6018      	str	r0, [r3, #0]
 8009184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009186:	2b00      	cmp	r3, #0
 8009188:	f43f acd8 	beq.w	8008b3c <_dtoa_r+0xa4>
 800918c:	601d      	str	r5, [r3, #0]
 800918e:	e4d5      	b.n	8008b3c <_dtoa_r+0xa4>
 8009190:	f8cd a01c 	str.w	sl, [sp, #28]
 8009194:	462b      	mov	r3, r5
 8009196:	461d      	mov	r5, r3
 8009198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800919c:	2a39      	cmp	r2, #57	; 0x39
 800919e:	d108      	bne.n	80091b2 <_dtoa_r+0x71a>
 80091a0:	9a00      	ldr	r2, [sp, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d1f7      	bne.n	8009196 <_dtoa_r+0x6fe>
 80091a6:	9a07      	ldr	r2, [sp, #28]
 80091a8:	9900      	ldr	r1, [sp, #0]
 80091aa:	3201      	adds	r2, #1
 80091ac:	9207      	str	r2, [sp, #28]
 80091ae:	2230      	movs	r2, #48	; 0x30
 80091b0:	700a      	strb	r2, [r1, #0]
 80091b2:	781a      	ldrb	r2, [r3, #0]
 80091b4:	3201      	adds	r2, #1
 80091b6:	701a      	strb	r2, [r3, #0]
 80091b8:	e78c      	b.n	80090d4 <_dtoa_r+0x63c>
 80091ba:	4b7f      	ldr	r3, [pc, #508]	; (80093b8 <_dtoa_r+0x920>)
 80091bc:	2200      	movs	r2, #0
 80091be:	f7f7 fa23 	bl	8000608 <__aeabi_dmul>
 80091c2:	2200      	movs	r2, #0
 80091c4:	2300      	movs	r3, #0
 80091c6:	4606      	mov	r6, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	f7f7 fc85 	bl	8000ad8 <__aeabi_dcmpeq>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d09b      	beq.n	800910a <_dtoa_r+0x672>
 80091d2:	e7cd      	b.n	8009170 <_dtoa_r+0x6d8>
 80091d4:	9a08      	ldr	r2, [sp, #32]
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	f000 80c4 	beq.w	8009364 <_dtoa_r+0x8cc>
 80091dc:	9a05      	ldr	r2, [sp, #20]
 80091de:	2a01      	cmp	r2, #1
 80091e0:	f300 80a8 	bgt.w	8009334 <_dtoa_r+0x89c>
 80091e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091e6:	2a00      	cmp	r2, #0
 80091e8:	f000 80a0 	beq.w	800932c <_dtoa_r+0x894>
 80091ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091f0:	9e06      	ldr	r6, [sp, #24]
 80091f2:	4645      	mov	r5, r8
 80091f4:	9a04      	ldr	r2, [sp, #16]
 80091f6:	2101      	movs	r1, #1
 80091f8:	441a      	add	r2, r3
 80091fa:	4620      	mov	r0, r4
 80091fc:	4498      	add	r8, r3
 80091fe:	9204      	str	r2, [sp, #16]
 8009200:	f000 ff18 	bl	800a034 <__i2b>
 8009204:	4607      	mov	r7, r0
 8009206:	2d00      	cmp	r5, #0
 8009208:	dd0b      	ble.n	8009222 <_dtoa_r+0x78a>
 800920a:	9b04      	ldr	r3, [sp, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	dd08      	ble.n	8009222 <_dtoa_r+0x78a>
 8009210:	42ab      	cmp	r3, r5
 8009212:	9a04      	ldr	r2, [sp, #16]
 8009214:	bfa8      	it	ge
 8009216:	462b      	movge	r3, r5
 8009218:	eba8 0803 	sub.w	r8, r8, r3
 800921c:	1aed      	subs	r5, r5, r3
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	b1fb      	cbz	r3, 8009266 <_dtoa_r+0x7ce>
 8009226:	9b08      	ldr	r3, [sp, #32]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 809f 	beq.w	800936c <_dtoa_r+0x8d4>
 800922e:	2e00      	cmp	r6, #0
 8009230:	dd11      	ble.n	8009256 <_dtoa_r+0x7be>
 8009232:	4639      	mov	r1, r7
 8009234:	4632      	mov	r2, r6
 8009236:	4620      	mov	r0, r4
 8009238:	f000 ffb8 	bl	800a1ac <__pow5mult>
 800923c:	465a      	mov	r2, fp
 800923e:	4601      	mov	r1, r0
 8009240:	4607      	mov	r7, r0
 8009242:	4620      	mov	r0, r4
 8009244:	f000 ff0c 	bl	800a060 <__multiply>
 8009248:	4659      	mov	r1, fp
 800924a:	9007      	str	r0, [sp, #28]
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fdeb 	bl	8009e28 <_Bfree>
 8009252:	9b07      	ldr	r3, [sp, #28]
 8009254:	469b      	mov	fp, r3
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	1b9a      	subs	r2, r3, r6
 800925a:	d004      	beq.n	8009266 <_dtoa_r+0x7ce>
 800925c:	4659      	mov	r1, fp
 800925e:	4620      	mov	r0, r4
 8009260:	f000 ffa4 	bl	800a1ac <__pow5mult>
 8009264:	4683      	mov	fp, r0
 8009266:	2101      	movs	r1, #1
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fee3 	bl	800a034 <__i2b>
 800926e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009270:	2b00      	cmp	r3, #0
 8009272:	4606      	mov	r6, r0
 8009274:	dd7c      	ble.n	8009370 <_dtoa_r+0x8d8>
 8009276:	461a      	mov	r2, r3
 8009278:	4601      	mov	r1, r0
 800927a:	4620      	mov	r0, r4
 800927c:	f000 ff96 	bl	800a1ac <__pow5mult>
 8009280:	9b05      	ldr	r3, [sp, #20]
 8009282:	2b01      	cmp	r3, #1
 8009284:	4606      	mov	r6, r0
 8009286:	dd76      	ble.n	8009376 <_dtoa_r+0x8de>
 8009288:	2300      	movs	r3, #0
 800928a:	9306      	str	r3, [sp, #24]
 800928c:	6933      	ldr	r3, [r6, #16]
 800928e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009292:	6918      	ldr	r0, [r3, #16]
 8009294:	f000 fe7e 	bl	8009f94 <__hi0bits>
 8009298:	f1c0 0020 	rsb	r0, r0, #32
 800929c:	9b04      	ldr	r3, [sp, #16]
 800929e:	4418      	add	r0, r3
 80092a0:	f010 001f 	ands.w	r0, r0, #31
 80092a4:	f000 8086 	beq.w	80093b4 <_dtoa_r+0x91c>
 80092a8:	f1c0 0320 	rsb	r3, r0, #32
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	dd7f      	ble.n	80093b0 <_dtoa_r+0x918>
 80092b0:	f1c0 001c 	rsb	r0, r0, #28
 80092b4:	9b04      	ldr	r3, [sp, #16]
 80092b6:	4403      	add	r3, r0
 80092b8:	4480      	add	r8, r0
 80092ba:	4405      	add	r5, r0
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	f1b8 0f00 	cmp.w	r8, #0
 80092c2:	dd05      	ble.n	80092d0 <_dtoa_r+0x838>
 80092c4:	4659      	mov	r1, fp
 80092c6:	4642      	mov	r2, r8
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 ffc9 	bl	800a260 <__lshift>
 80092ce:	4683      	mov	fp, r0
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	dd05      	ble.n	80092e2 <_dtoa_r+0x84a>
 80092d6:	4631      	mov	r1, r6
 80092d8:	461a      	mov	r2, r3
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 ffc0 	bl	800a260 <__lshift>
 80092e0:	4606      	mov	r6, r0
 80092e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d069      	beq.n	80093bc <_dtoa_r+0x924>
 80092e8:	4631      	mov	r1, r6
 80092ea:	4658      	mov	r0, fp
 80092ec:	f001 f824 	bl	800a338 <__mcmp>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	da63      	bge.n	80093bc <_dtoa_r+0x924>
 80092f4:	2300      	movs	r3, #0
 80092f6:	4659      	mov	r1, fp
 80092f8:	220a      	movs	r2, #10
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fdb6 	bl	8009e6c <__multadd>
 8009300:	9b08      	ldr	r3, [sp, #32]
 8009302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009306:	4683      	mov	fp, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 818f 	beq.w	800962c <_dtoa_r+0xb94>
 800930e:	4639      	mov	r1, r7
 8009310:	2300      	movs	r3, #0
 8009312:	220a      	movs	r2, #10
 8009314:	4620      	mov	r0, r4
 8009316:	f000 fda9 	bl	8009e6c <__multadd>
 800931a:	f1b9 0f00 	cmp.w	r9, #0
 800931e:	4607      	mov	r7, r0
 8009320:	f300 808e 	bgt.w	8009440 <_dtoa_r+0x9a8>
 8009324:	9b05      	ldr	r3, [sp, #20]
 8009326:	2b02      	cmp	r3, #2
 8009328:	dc50      	bgt.n	80093cc <_dtoa_r+0x934>
 800932a:	e089      	b.n	8009440 <_dtoa_r+0x9a8>
 800932c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800932e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009332:	e75d      	b.n	80091f0 <_dtoa_r+0x758>
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	1e5e      	subs	r6, r3, #1
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	42b3      	cmp	r3, r6
 800933c:	bfbf      	itttt	lt
 800933e:	9b06      	ldrlt	r3, [sp, #24]
 8009340:	9606      	strlt	r6, [sp, #24]
 8009342:	1af2      	sublt	r2, r6, r3
 8009344:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009346:	bfb6      	itet	lt
 8009348:	189b      	addlt	r3, r3, r2
 800934a:	1b9e      	subge	r6, r3, r6
 800934c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	bfb8      	it	lt
 8009352:	2600      	movlt	r6, #0
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfb5      	itete	lt
 8009358:	eba8 0503 	sublt.w	r5, r8, r3
 800935c:	9b01      	ldrge	r3, [sp, #4]
 800935e:	2300      	movlt	r3, #0
 8009360:	4645      	movge	r5, r8
 8009362:	e747      	b.n	80091f4 <_dtoa_r+0x75c>
 8009364:	9e06      	ldr	r6, [sp, #24]
 8009366:	9f08      	ldr	r7, [sp, #32]
 8009368:	4645      	mov	r5, r8
 800936a:	e74c      	b.n	8009206 <_dtoa_r+0x76e>
 800936c:	9a06      	ldr	r2, [sp, #24]
 800936e:	e775      	b.n	800925c <_dtoa_r+0x7c4>
 8009370:	9b05      	ldr	r3, [sp, #20]
 8009372:	2b01      	cmp	r3, #1
 8009374:	dc18      	bgt.n	80093a8 <_dtoa_r+0x910>
 8009376:	9b02      	ldr	r3, [sp, #8]
 8009378:	b9b3      	cbnz	r3, 80093a8 <_dtoa_r+0x910>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009380:	b9a3      	cbnz	r3, 80093ac <_dtoa_r+0x914>
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009388:	0d1b      	lsrs	r3, r3, #20
 800938a:	051b      	lsls	r3, r3, #20
 800938c:	b12b      	cbz	r3, 800939a <_dtoa_r+0x902>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	3301      	adds	r3, #1
 8009392:	9304      	str	r3, [sp, #16]
 8009394:	f108 0801 	add.w	r8, r8, #1
 8009398:	2301      	movs	r3, #1
 800939a:	9306      	str	r3, [sp, #24]
 800939c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f47f af74 	bne.w	800928c <_dtoa_r+0x7f4>
 80093a4:	2001      	movs	r0, #1
 80093a6:	e779      	b.n	800929c <_dtoa_r+0x804>
 80093a8:	2300      	movs	r3, #0
 80093aa:	e7f6      	b.n	800939a <_dtoa_r+0x902>
 80093ac:	9b02      	ldr	r3, [sp, #8]
 80093ae:	e7f4      	b.n	800939a <_dtoa_r+0x902>
 80093b0:	d085      	beq.n	80092be <_dtoa_r+0x826>
 80093b2:	4618      	mov	r0, r3
 80093b4:	301c      	adds	r0, #28
 80093b6:	e77d      	b.n	80092b4 <_dtoa_r+0x81c>
 80093b8:	40240000 	.word	0x40240000
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dc38      	bgt.n	8009434 <_dtoa_r+0x99c>
 80093c2:	9b05      	ldr	r3, [sp, #20]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	dd35      	ble.n	8009434 <_dtoa_r+0x99c>
 80093c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093cc:	f1b9 0f00 	cmp.w	r9, #0
 80093d0:	d10d      	bne.n	80093ee <_dtoa_r+0x956>
 80093d2:	4631      	mov	r1, r6
 80093d4:	464b      	mov	r3, r9
 80093d6:	2205      	movs	r2, #5
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fd47 	bl	8009e6c <__multadd>
 80093de:	4601      	mov	r1, r0
 80093e0:	4606      	mov	r6, r0
 80093e2:	4658      	mov	r0, fp
 80093e4:	f000 ffa8 	bl	800a338 <__mcmp>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f73f adbd 	bgt.w	8008f68 <_dtoa_r+0x4d0>
 80093ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f0:	9d00      	ldr	r5, [sp, #0]
 80093f2:	ea6f 0a03 	mvn.w	sl, r3
 80093f6:	f04f 0800 	mov.w	r8, #0
 80093fa:	4631      	mov	r1, r6
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fd13 	bl	8009e28 <_Bfree>
 8009402:	2f00      	cmp	r7, #0
 8009404:	f43f aeb4 	beq.w	8009170 <_dtoa_r+0x6d8>
 8009408:	f1b8 0f00 	cmp.w	r8, #0
 800940c:	d005      	beq.n	800941a <_dtoa_r+0x982>
 800940e:	45b8      	cmp	r8, r7
 8009410:	d003      	beq.n	800941a <_dtoa_r+0x982>
 8009412:	4641      	mov	r1, r8
 8009414:	4620      	mov	r0, r4
 8009416:	f000 fd07 	bl	8009e28 <_Bfree>
 800941a:	4639      	mov	r1, r7
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fd03 	bl	8009e28 <_Bfree>
 8009422:	e6a5      	b.n	8009170 <_dtoa_r+0x6d8>
 8009424:	2600      	movs	r6, #0
 8009426:	4637      	mov	r7, r6
 8009428:	e7e1      	b.n	80093ee <_dtoa_r+0x956>
 800942a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800942c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009430:	4637      	mov	r7, r6
 8009432:	e599      	b.n	8008f68 <_dtoa_r+0x4d0>
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80fd 	beq.w	800963a <_dtoa_r+0xba2>
 8009440:	2d00      	cmp	r5, #0
 8009442:	dd05      	ble.n	8009450 <_dtoa_r+0x9b8>
 8009444:	4639      	mov	r1, r7
 8009446:	462a      	mov	r2, r5
 8009448:	4620      	mov	r0, r4
 800944a:	f000 ff09 	bl	800a260 <__lshift>
 800944e:	4607      	mov	r7, r0
 8009450:	9b06      	ldr	r3, [sp, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d05c      	beq.n	8009510 <_dtoa_r+0xa78>
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fca5 	bl	8009da8 <_Balloc>
 800945e:	4605      	mov	r5, r0
 8009460:	b928      	cbnz	r0, 800946e <_dtoa_r+0x9d6>
 8009462:	4b80      	ldr	r3, [pc, #512]	; (8009664 <_dtoa_r+0xbcc>)
 8009464:	4602      	mov	r2, r0
 8009466:	f240 21ea 	movw	r1, #746	; 0x2ea
 800946a:	f7ff bb2e 	b.w	8008aca <_dtoa_r+0x32>
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	3202      	adds	r2, #2
 8009472:	0092      	lsls	r2, r2, #2
 8009474:	f107 010c 	add.w	r1, r7, #12
 8009478:	300c      	adds	r0, #12
 800947a:	f000 fc87 	bl	8009d8c <memcpy>
 800947e:	2201      	movs	r2, #1
 8009480:	4629      	mov	r1, r5
 8009482:	4620      	mov	r0, r4
 8009484:	f000 feec 	bl	800a260 <__lshift>
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	9b00      	ldr	r3, [sp, #0]
 8009490:	444b      	add	r3, r9
 8009492:	9307      	str	r3, [sp, #28]
 8009494:	9b02      	ldr	r3, [sp, #8]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	46b8      	mov	r8, r7
 800949c:	9306      	str	r3, [sp, #24]
 800949e:	4607      	mov	r7, r0
 80094a0:	9b01      	ldr	r3, [sp, #4]
 80094a2:	4631      	mov	r1, r6
 80094a4:	3b01      	subs	r3, #1
 80094a6:	4658      	mov	r0, fp
 80094a8:	9302      	str	r3, [sp, #8]
 80094aa:	f7ff fa67 	bl	800897c <quorem>
 80094ae:	4603      	mov	r3, r0
 80094b0:	3330      	adds	r3, #48	; 0x30
 80094b2:	9004      	str	r0, [sp, #16]
 80094b4:	4641      	mov	r1, r8
 80094b6:	4658      	mov	r0, fp
 80094b8:	9308      	str	r3, [sp, #32]
 80094ba:	f000 ff3d 	bl	800a338 <__mcmp>
 80094be:	463a      	mov	r2, r7
 80094c0:	4681      	mov	r9, r0
 80094c2:	4631      	mov	r1, r6
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 ff53 	bl	800a370 <__mdiff>
 80094ca:	68c2      	ldr	r2, [r0, #12]
 80094cc:	9b08      	ldr	r3, [sp, #32]
 80094ce:	4605      	mov	r5, r0
 80094d0:	bb02      	cbnz	r2, 8009514 <_dtoa_r+0xa7c>
 80094d2:	4601      	mov	r1, r0
 80094d4:	4658      	mov	r0, fp
 80094d6:	f000 ff2f 	bl	800a338 <__mcmp>
 80094da:	9b08      	ldr	r3, [sp, #32]
 80094dc:	4602      	mov	r2, r0
 80094de:	4629      	mov	r1, r5
 80094e0:	4620      	mov	r0, r4
 80094e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80094e6:	f000 fc9f 	bl	8009e28 <_Bfree>
 80094ea:	9b05      	ldr	r3, [sp, #20]
 80094ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ee:	9d01      	ldr	r5, [sp, #4]
 80094f0:	ea43 0102 	orr.w	r1, r3, r2
 80094f4:	9b06      	ldr	r3, [sp, #24]
 80094f6:	430b      	orrs	r3, r1
 80094f8:	9b08      	ldr	r3, [sp, #32]
 80094fa:	d10d      	bne.n	8009518 <_dtoa_r+0xa80>
 80094fc:	2b39      	cmp	r3, #57	; 0x39
 80094fe:	d029      	beq.n	8009554 <_dtoa_r+0xabc>
 8009500:	f1b9 0f00 	cmp.w	r9, #0
 8009504:	dd01      	ble.n	800950a <_dtoa_r+0xa72>
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	3331      	adds	r3, #49	; 0x31
 800950a:	9a02      	ldr	r2, [sp, #8]
 800950c:	7013      	strb	r3, [r2, #0]
 800950e:	e774      	b.n	80093fa <_dtoa_r+0x962>
 8009510:	4638      	mov	r0, r7
 8009512:	e7b9      	b.n	8009488 <_dtoa_r+0x9f0>
 8009514:	2201      	movs	r2, #1
 8009516:	e7e2      	b.n	80094de <_dtoa_r+0xa46>
 8009518:	f1b9 0f00 	cmp.w	r9, #0
 800951c:	db06      	blt.n	800952c <_dtoa_r+0xa94>
 800951e:	9905      	ldr	r1, [sp, #20]
 8009520:	ea41 0909 	orr.w	r9, r1, r9
 8009524:	9906      	ldr	r1, [sp, #24]
 8009526:	ea59 0101 	orrs.w	r1, r9, r1
 800952a:	d120      	bne.n	800956e <_dtoa_r+0xad6>
 800952c:	2a00      	cmp	r2, #0
 800952e:	ddec      	ble.n	800950a <_dtoa_r+0xa72>
 8009530:	4659      	mov	r1, fp
 8009532:	2201      	movs	r2, #1
 8009534:	4620      	mov	r0, r4
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	f000 fe92 	bl	800a260 <__lshift>
 800953c:	4631      	mov	r1, r6
 800953e:	4683      	mov	fp, r0
 8009540:	f000 fefa 	bl	800a338 <__mcmp>
 8009544:	2800      	cmp	r0, #0
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	dc02      	bgt.n	8009550 <_dtoa_r+0xab8>
 800954a:	d1de      	bne.n	800950a <_dtoa_r+0xa72>
 800954c:	07da      	lsls	r2, r3, #31
 800954e:	d5dc      	bpl.n	800950a <_dtoa_r+0xa72>
 8009550:	2b39      	cmp	r3, #57	; 0x39
 8009552:	d1d8      	bne.n	8009506 <_dtoa_r+0xa6e>
 8009554:	9a02      	ldr	r2, [sp, #8]
 8009556:	2339      	movs	r3, #57	; 0x39
 8009558:	7013      	strb	r3, [r2, #0]
 800955a:	462b      	mov	r3, r5
 800955c:	461d      	mov	r5, r3
 800955e:	3b01      	subs	r3, #1
 8009560:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009564:	2a39      	cmp	r2, #57	; 0x39
 8009566:	d050      	beq.n	800960a <_dtoa_r+0xb72>
 8009568:	3201      	adds	r2, #1
 800956a:	701a      	strb	r2, [r3, #0]
 800956c:	e745      	b.n	80093fa <_dtoa_r+0x962>
 800956e:	2a00      	cmp	r2, #0
 8009570:	dd03      	ble.n	800957a <_dtoa_r+0xae2>
 8009572:	2b39      	cmp	r3, #57	; 0x39
 8009574:	d0ee      	beq.n	8009554 <_dtoa_r+0xabc>
 8009576:	3301      	adds	r3, #1
 8009578:	e7c7      	b.n	800950a <_dtoa_r+0xa72>
 800957a:	9a01      	ldr	r2, [sp, #4]
 800957c:	9907      	ldr	r1, [sp, #28]
 800957e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009582:	428a      	cmp	r2, r1
 8009584:	d02a      	beq.n	80095dc <_dtoa_r+0xb44>
 8009586:	4659      	mov	r1, fp
 8009588:	2300      	movs	r3, #0
 800958a:	220a      	movs	r2, #10
 800958c:	4620      	mov	r0, r4
 800958e:	f000 fc6d 	bl	8009e6c <__multadd>
 8009592:	45b8      	cmp	r8, r7
 8009594:	4683      	mov	fp, r0
 8009596:	f04f 0300 	mov.w	r3, #0
 800959a:	f04f 020a 	mov.w	r2, #10
 800959e:	4641      	mov	r1, r8
 80095a0:	4620      	mov	r0, r4
 80095a2:	d107      	bne.n	80095b4 <_dtoa_r+0xb1c>
 80095a4:	f000 fc62 	bl	8009e6c <__multadd>
 80095a8:	4680      	mov	r8, r0
 80095aa:	4607      	mov	r7, r0
 80095ac:	9b01      	ldr	r3, [sp, #4]
 80095ae:	3301      	adds	r3, #1
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	e775      	b.n	80094a0 <_dtoa_r+0xa08>
 80095b4:	f000 fc5a 	bl	8009e6c <__multadd>
 80095b8:	4639      	mov	r1, r7
 80095ba:	4680      	mov	r8, r0
 80095bc:	2300      	movs	r3, #0
 80095be:	220a      	movs	r2, #10
 80095c0:	4620      	mov	r0, r4
 80095c2:	f000 fc53 	bl	8009e6c <__multadd>
 80095c6:	4607      	mov	r7, r0
 80095c8:	e7f0      	b.n	80095ac <_dtoa_r+0xb14>
 80095ca:	f1b9 0f00 	cmp.w	r9, #0
 80095ce:	9a00      	ldr	r2, [sp, #0]
 80095d0:	bfcc      	ite	gt
 80095d2:	464d      	movgt	r5, r9
 80095d4:	2501      	movle	r5, #1
 80095d6:	4415      	add	r5, r2
 80095d8:	f04f 0800 	mov.w	r8, #0
 80095dc:	4659      	mov	r1, fp
 80095de:	2201      	movs	r2, #1
 80095e0:	4620      	mov	r0, r4
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	f000 fe3c 	bl	800a260 <__lshift>
 80095e8:	4631      	mov	r1, r6
 80095ea:	4683      	mov	fp, r0
 80095ec:	f000 fea4 	bl	800a338 <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	dcb2      	bgt.n	800955a <_dtoa_r+0xac2>
 80095f4:	d102      	bne.n	80095fc <_dtoa_r+0xb64>
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	07db      	lsls	r3, r3, #31
 80095fa:	d4ae      	bmi.n	800955a <_dtoa_r+0xac2>
 80095fc:	462b      	mov	r3, r5
 80095fe:	461d      	mov	r5, r3
 8009600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009604:	2a30      	cmp	r2, #48	; 0x30
 8009606:	d0fa      	beq.n	80095fe <_dtoa_r+0xb66>
 8009608:	e6f7      	b.n	80093fa <_dtoa_r+0x962>
 800960a:	9a00      	ldr	r2, [sp, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d1a5      	bne.n	800955c <_dtoa_r+0xac4>
 8009610:	f10a 0a01 	add.w	sl, sl, #1
 8009614:	2331      	movs	r3, #49	; 0x31
 8009616:	e779      	b.n	800950c <_dtoa_r+0xa74>
 8009618:	4b13      	ldr	r3, [pc, #76]	; (8009668 <_dtoa_r+0xbd0>)
 800961a:	f7ff baaf 	b.w	8008b7c <_dtoa_r+0xe4>
 800961e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009620:	2b00      	cmp	r3, #0
 8009622:	f47f aa86 	bne.w	8008b32 <_dtoa_r+0x9a>
 8009626:	4b11      	ldr	r3, [pc, #68]	; (800966c <_dtoa_r+0xbd4>)
 8009628:	f7ff baa8 	b.w	8008b7c <_dtoa_r+0xe4>
 800962c:	f1b9 0f00 	cmp.w	r9, #0
 8009630:	dc03      	bgt.n	800963a <_dtoa_r+0xba2>
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	2b02      	cmp	r3, #2
 8009636:	f73f aec9 	bgt.w	80093cc <_dtoa_r+0x934>
 800963a:	9d00      	ldr	r5, [sp, #0]
 800963c:	4631      	mov	r1, r6
 800963e:	4658      	mov	r0, fp
 8009640:	f7ff f99c 	bl	800897c <quorem>
 8009644:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009648:	f805 3b01 	strb.w	r3, [r5], #1
 800964c:	9a00      	ldr	r2, [sp, #0]
 800964e:	1aaa      	subs	r2, r5, r2
 8009650:	4591      	cmp	r9, r2
 8009652:	ddba      	ble.n	80095ca <_dtoa_r+0xb32>
 8009654:	4659      	mov	r1, fp
 8009656:	2300      	movs	r3, #0
 8009658:	220a      	movs	r2, #10
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fc06 	bl	8009e6c <__multadd>
 8009660:	4683      	mov	fp, r0
 8009662:	e7eb      	b.n	800963c <_dtoa_r+0xba4>
 8009664:	0800bf94 	.word	0x0800bf94
 8009668:	0800bd94 	.word	0x0800bd94
 800966c:	0800bf11 	.word	0x0800bf11

08009670 <rshift>:
 8009670:	6903      	ldr	r3, [r0, #16]
 8009672:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009676:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800967a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800967e:	f100 0414 	add.w	r4, r0, #20
 8009682:	dd45      	ble.n	8009710 <rshift+0xa0>
 8009684:	f011 011f 	ands.w	r1, r1, #31
 8009688:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800968c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009690:	d10c      	bne.n	80096ac <rshift+0x3c>
 8009692:	f100 0710 	add.w	r7, r0, #16
 8009696:	4629      	mov	r1, r5
 8009698:	42b1      	cmp	r1, r6
 800969a:	d334      	bcc.n	8009706 <rshift+0x96>
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	1eea      	subs	r2, r5, #3
 80096a2:	4296      	cmp	r6, r2
 80096a4:	bf38      	it	cc
 80096a6:	2300      	movcc	r3, #0
 80096a8:	4423      	add	r3, r4
 80096aa:	e015      	b.n	80096d8 <rshift+0x68>
 80096ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096b0:	f1c1 0820 	rsb	r8, r1, #32
 80096b4:	40cf      	lsrs	r7, r1
 80096b6:	f105 0e04 	add.w	lr, r5, #4
 80096ba:	46a1      	mov	r9, r4
 80096bc:	4576      	cmp	r6, lr
 80096be:	46f4      	mov	ip, lr
 80096c0:	d815      	bhi.n	80096ee <rshift+0x7e>
 80096c2:	1a9b      	subs	r3, r3, r2
 80096c4:	009a      	lsls	r2, r3, #2
 80096c6:	3a04      	subs	r2, #4
 80096c8:	3501      	adds	r5, #1
 80096ca:	42ae      	cmp	r6, r5
 80096cc:	bf38      	it	cc
 80096ce:	2200      	movcc	r2, #0
 80096d0:	18a3      	adds	r3, r4, r2
 80096d2:	50a7      	str	r7, [r4, r2]
 80096d4:	b107      	cbz	r7, 80096d8 <rshift+0x68>
 80096d6:	3304      	adds	r3, #4
 80096d8:	1b1a      	subs	r2, r3, r4
 80096da:	42a3      	cmp	r3, r4
 80096dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096e0:	bf08      	it	eq
 80096e2:	2300      	moveq	r3, #0
 80096e4:	6102      	str	r2, [r0, #16]
 80096e6:	bf08      	it	eq
 80096e8:	6143      	streq	r3, [r0, #20]
 80096ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ee:	f8dc c000 	ldr.w	ip, [ip]
 80096f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80096f6:	ea4c 0707 	orr.w	r7, ip, r7
 80096fa:	f849 7b04 	str.w	r7, [r9], #4
 80096fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009702:	40cf      	lsrs	r7, r1
 8009704:	e7da      	b.n	80096bc <rshift+0x4c>
 8009706:	f851 cb04 	ldr.w	ip, [r1], #4
 800970a:	f847 cf04 	str.w	ip, [r7, #4]!
 800970e:	e7c3      	b.n	8009698 <rshift+0x28>
 8009710:	4623      	mov	r3, r4
 8009712:	e7e1      	b.n	80096d8 <rshift+0x68>

08009714 <__hexdig_fun>:
 8009714:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009718:	2b09      	cmp	r3, #9
 800971a:	d802      	bhi.n	8009722 <__hexdig_fun+0xe>
 800971c:	3820      	subs	r0, #32
 800971e:	b2c0      	uxtb	r0, r0
 8009720:	4770      	bx	lr
 8009722:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009726:	2b05      	cmp	r3, #5
 8009728:	d801      	bhi.n	800972e <__hexdig_fun+0x1a>
 800972a:	3847      	subs	r0, #71	; 0x47
 800972c:	e7f7      	b.n	800971e <__hexdig_fun+0xa>
 800972e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009732:	2b05      	cmp	r3, #5
 8009734:	d801      	bhi.n	800973a <__hexdig_fun+0x26>
 8009736:	3827      	subs	r0, #39	; 0x27
 8009738:	e7f1      	b.n	800971e <__hexdig_fun+0xa>
 800973a:	2000      	movs	r0, #0
 800973c:	4770      	bx	lr
	...

08009740 <__gethex>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ed2d 8b02 	vpush	{d8}
 8009748:	b089      	sub	sp, #36	; 0x24
 800974a:	ee08 0a10 	vmov	s16, r0
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	4bbc      	ldr	r3, [pc, #752]	; (8009a44 <__gethex+0x304>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	4618      	mov	r0, r3
 8009758:	468b      	mov	fp, r1
 800975a:	4690      	mov	r8, r2
 800975c:	f7f6 fd40 	bl	80001e0 <strlen>
 8009760:	9b01      	ldr	r3, [sp, #4]
 8009762:	f8db 2000 	ldr.w	r2, [fp]
 8009766:	4403      	add	r3, r0
 8009768:	4682      	mov	sl, r0
 800976a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800976e:	9305      	str	r3, [sp, #20]
 8009770:	1c93      	adds	r3, r2, #2
 8009772:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009776:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800977a:	32fe      	adds	r2, #254	; 0xfe
 800977c:	18d1      	adds	r1, r2, r3
 800977e:	461f      	mov	r7, r3
 8009780:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009784:	9100      	str	r1, [sp, #0]
 8009786:	2830      	cmp	r0, #48	; 0x30
 8009788:	d0f8      	beq.n	800977c <__gethex+0x3c>
 800978a:	f7ff ffc3 	bl	8009714 <__hexdig_fun>
 800978e:	4604      	mov	r4, r0
 8009790:	2800      	cmp	r0, #0
 8009792:	d13a      	bne.n	800980a <__gethex+0xca>
 8009794:	9901      	ldr	r1, [sp, #4]
 8009796:	4652      	mov	r2, sl
 8009798:	4638      	mov	r0, r7
 800979a:	f001 f9ed 	bl	800ab78 <strncmp>
 800979e:	4605      	mov	r5, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d168      	bne.n	8009876 <__gethex+0x136>
 80097a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80097a8:	eb07 060a 	add.w	r6, r7, sl
 80097ac:	f7ff ffb2 	bl	8009714 <__hexdig_fun>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d062      	beq.n	800987a <__gethex+0x13a>
 80097b4:	4633      	mov	r3, r6
 80097b6:	7818      	ldrb	r0, [r3, #0]
 80097b8:	2830      	cmp	r0, #48	; 0x30
 80097ba:	461f      	mov	r7, r3
 80097bc:	f103 0301 	add.w	r3, r3, #1
 80097c0:	d0f9      	beq.n	80097b6 <__gethex+0x76>
 80097c2:	f7ff ffa7 	bl	8009714 <__hexdig_fun>
 80097c6:	2301      	movs	r3, #1
 80097c8:	fab0 f480 	clz	r4, r0
 80097cc:	0964      	lsrs	r4, r4, #5
 80097ce:	4635      	mov	r5, r6
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	463a      	mov	r2, r7
 80097d4:	4616      	mov	r6, r2
 80097d6:	3201      	adds	r2, #1
 80097d8:	7830      	ldrb	r0, [r6, #0]
 80097da:	f7ff ff9b 	bl	8009714 <__hexdig_fun>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1f8      	bne.n	80097d4 <__gethex+0x94>
 80097e2:	9901      	ldr	r1, [sp, #4]
 80097e4:	4652      	mov	r2, sl
 80097e6:	4630      	mov	r0, r6
 80097e8:	f001 f9c6 	bl	800ab78 <strncmp>
 80097ec:	b980      	cbnz	r0, 8009810 <__gethex+0xd0>
 80097ee:	b94d      	cbnz	r5, 8009804 <__gethex+0xc4>
 80097f0:	eb06 050a 	add.w	r5, r6, sl
 80097f4:	462a      	mov	r2, r5
 80097f6:	4616      	mov	r6, r2
 80097f8:	3201      	adds	r2, #1
 80097fa:	7830      	ldrb	r0, [r6, #0]
 80097fc:	f7ff ff8a 	bl	8009714 <__hexdig_fun>
 8009800:	2800      	cmp	r0, #0
 8009802:	d1f8      	bne.n	80097f6 <__gethex+0xb6>
 8009804:	1bad      	subs	r5, r5, r6
 8009806:	00ad      	lsls	r5, r5, #2
 8009808:	e004      	b.n	8009814 <__gethex+0xd4>
 800980a:	2400      	movs	r4, #0
 800980c:	4625      	mov	r5, r4
 800980e:	e7e0      	b.n	80097d2 <__gethex+0x92>
 8009810:	2d00      	cmp	r5, #0
 8009812:	d1f7      	bne.n	8009804 <__gethex+0xc4>
 8009814:	7833      	ldrb	r3, [r6, #0]
 8009816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800981a:	2b50      	cmp	r3, #80	; 0x50
 800981c:	d13b      	bne.n	8009896 <__gethex+0x156>
 800981e:	7873      	ldrb	r3, [r6, #1]
 8009820:	2b2b      	cmp	r3, #43	; 0x2b
 8009822:	d02c      	beq.n	800987e <__gethex+0x13e>
 8009824:	2b2d      	cmp	r3, #45	; 0x2d
 8009826:	d02e      	beq.n	8009886 <__gethex+0x146>
 8009828:	1c71      	adds	r1, r6, #1
 800982a:	f04f 0900 	mov.w	r9, #0
 800982e:	7808      	ldrb	r0, [r1, #0]
 8009830:	f7ff ff70 	bl	8009714 <__hexdig_fun>
 8009834:	1e43      	subs	r3, r0, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b18      	cmp	r3, #24
 800983a:	d82c      	bhi.n	8009896 <__gethex+0x156>
 800983c:	f1a0 0210 	sub.w	r2, r0, #16
 8009840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009844:	f7ff ff66 	bl	8009714 <__hexdig_fun>
 8009848:	1e43      	subs	r3, r0, #1
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b18      	cmp	r3, #24
 800984e:	d91d      	bls.n	800988c <__gethex+0x14c>
 8009850:	f1b9 0f00 	cmp.w	r9, #0
 8009854:	d000      	beq.n	8009858 <__gethex+0x118>
 8009856:	4252      	negs	r2, r2
 8009858:	4415      	add	r5, r2
 800985a:	f8cb 1000 	str.w	r1, [fp]
 800985e:	b1e4      	cbz	r4, 800989a <__gethex+0x15a>
 8009860:	9b00      	ldr	r3, [sp, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2700      	movne	r7, #0
 8009868:	2706      	moveq	r7, #6
 800986a:	4638      	mov	r0, r7
 800986c:	b009      	add	sp, #36	; 0x24
 800986e:	ecbd 8b02 	vpop	{d8}
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	463e      	mov	r6, r7
 8009878:	4625      	mov	r5, r4
 800987a:	2401      	movs	r4, #1
 800987c:	e7ca      	b.n	8009814 <__gethex+0xd4>
 800987e:	f04f 0900 	mov.w	r9, #0
 8009882:	1cb1      	adds	r1, r6, #2
 8009884:	e7d3      	b.n	800982e <__gethex+0xee>
 8009886:	f04f 0901 	mov.w	r9, #1
 800988a:	e7fa      	b.n	8009882 <__gethex+0x142>
 800988c:	230a      	movs	r3, #10
 800988e:	fb03 0202 	mla	r2, r3, r2, r0
 8009892:	3a10      	subs	r2, #16
 8009894:	e7d4      	b.n	8009840 <__gethex+0x100>
 8009896:	4631      	mov	r1, r6
 8009898:	e7df      	b.n	800985a <__gethex+0x11a>
 800989a:	1bf3      	subs	r3, r6, r7
 800989c:	3b01      	subs	r3, #1
 800989e:	4621      	mov	r1, r4
 80098a0:	2b07      	cmp	r3, #7
 80098a2:	dc0b      	bgt.n	80098bc <__gethex+0x17c>
 80098a4:	ee18 0a10 	vmov	r0, s16
 80098a8:	f000 fa7e 	bl	8009da8 <_Balloc>
 80098ac:	4604      	mov	r4, r0
 80098ae:	b940      	cbnz	r0, 80098c2 <__gethex+0x182>
 80098b0:	4b65      	ldr	r3, [pc, #404]	; (8009a48 <__gethex+0x308>)
 80098b2:	4602      	mov	r2, r0
 80098b4:	21de      	movs	r1, #222	; 0xde
 80098b6:	4865      	ldr	r0, [pc, #404]	; (8009a4c <__gethex+0x30c>)
 80098b8:	f001 f97e 	bl	800abb8 <__assert_func>
 80098bc:	3101      	adds	r1, #1
 80098be:	105b      	asrs	r3, r3, #1
 80098c0:	e7ee      	b.n	80098a0 <__gethex+0x160>
 80098c2:	f100 0914 	add.w	r9, r0, #20
 80098c6:	f04f 0b00 	mov.w	fp, #0
 80098ca:	f1ca 0301 	rsb	r3, sl, #1
 80098ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80098d2:	f8cd b000 	str.w	fp, [sp]
 80098d6:	9306      	str	r3, [sp, #24]
 80098d8:	42b7      	cmp	r7, r6
 80098da:	d340      	bcc.n	800995e <__gethex+0x21e>
 80098dc:	9802      	ldr	r0, [sp, #8]
 80098de:	9b00      	ldr	r3, [sp, #0]
 80098e0:	f840 3b04 	str.w	r3, [r0], #4
 80098e4:	eba0 0009 	sub.w	r0, r0, r9
 80098e8:	1080      	asrs	r0, r0, #2
 80098ea:	0146      	lsls	r6, r0, #5
 80098ec:	6120      	str	r0, [r4, #16]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fb50 	bl	8009f94 <__hi0bits>
 80098f4:	1a30      	subs	r0, r6, r0
 80098f6:	f8d8 6000 	ldr.w	r6, [r8]
 80098fa:	42b0      	cmp	r0, r6
 80098fc:	dd63      	ble.n	80099c6 <__gethex+0x286>
 80098fe:	1b87      	subs	r7, r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	4620      	mov	r0, r4
 8009904:	f000 feea 	bl	800a6dc <__any_on>
 8009908:	4682      	mov	sl, r0
 800990a:	b1a8      	cbz	r0, 8009938 <__gethex+0x1f8>
 800990c:	1e7b      	subs	r3, r7, #1
 800990e:	1159      	asrs	r1, r3, #5
 8009910:	f003 021f 	and.w	r2, r3, #31
 8009914:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009918:	f04f 0a01 	mov.w	sl, #1
 800991c:	fa0a f202 	lsl.w	r2, sl, r2
 8009920:	420a      	tst	r2, r1
 8009922:	d009      	beq.n	8009938 <__gethex+0x1f8>
 8009924:	4553      	cmp	r3, sl
 8009926:	dd05      	ble.n	8009934 <__gethex+0x1f4>
 8009928:	1eb9      	subs	r1, r7, #2
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fed6 	bl	800a6dc <__any_on>
 8009930:	2800      	cmp	r0, #0
 8009932:	d145      	bne.n	80099c0 <__gethex+0x280>
 8009934:	f04f 0a02 	mov.w	sl, #2
 8009938:	4639      	mov	r1, r7
 800993a:	4620      	mov	r0, r4
 800993c:	f7ff fe98 	bl	8009670 <rshift>
 8009940:	443d      	add	r5, r7
 8009942:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009946:	42ab      	cmp	r3, r5
 8009948:	da4c      	bge.n	80099e4 <__gethex+0x2a4>
 800994a:	ee18 0a10 	vmov	r0, s16
 800994e:	4621      	mov	r1, r4
 8009950:	f000 fa6a 	bl	8009e28 <_Bfree>
 8009954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009956:	2300      	movs	r3, #0
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	27a3      	movs	r7, #163	; 0xa3
 800995c:	e785      	b.n	800986a <__gethex+0x12a>
 800995e:	1e73      	subs	r3, r6, #1
 8009960:	9a05      	ldr	r2, [sp, #20]
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009968:	4293      	cmp	r3, r2
 800996a:	d019      	beq.n	80099a0 <__gethex+0x260>
 800996c:	f1bb 0f20 	cmp.w	fp, #32
 8009970:	d107      	bne.n	8009982 <__gethex+0x242>
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	9a00      	ldr	r2, [sp, #0]
 8009976:	f843 2b04 	str.w	r2, [r3], #4
 800997a:	9302      	str	r3, [sp, #8]
 800997c:	2300      	movs	r3, #0
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	469b      	mov	fp, r3
 8009982:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009986:	f7ff fec5 	bl	8009714 <__hexdig_fun>
 800998a:	9b00      	ldr	r3, [sp, #0]
 800998c:	f000 000f 	and.w	r0, r0, #15
 8009990:	fa00 f00b 	lsl.w	r0, r0, fp
 8009994:	4303      	orrs	r3, r0
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	f10b 0b04 	add.w	fp, fp, #4
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	e00d      	b.n	80099bc <__gethex+0x27c>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	9a06      	ldr	r2, [sp, #24]
 80099a4:	4413      	add	r3, r2
 80099a6:	42bb      	cmp	r3, r7
 80099a8:	d3e0      	bcc.n	800996c <__gethex+0x22c>
 80099aa:	4618      	mov	r0, r3
 80099ac:	9901      	ldr	r1, [sp, #4]
 80099ae:	9307      	str	r3, [sp, #28]
 80099b0:	4652      	mov	r2, sl
 80099b2:	f001 f8e1 	bl	800ab78 <strncmp>
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1d7      	bne.n	800996c <__gethex+0x22c>
 80099bc:	461e      	mov	r6, r3
 80099be:	e78b      	b.n	80098d8 <__gethex+0x198>
 80099c0:	f04f 0a03 	mov.w	sl, #3
 80099c4:	e7b8      	b.n	8009938 <__gethex+0x1f8>
 80099c6:	da0a      	bge.n	80099de <__gethex+0x29e>
 80099c8:	1a37      	subs	r7, r6, r0
 80099ca:	4621      	mov	r1, r4
 80099cc:	ee18 0a10 	vmov	r0, s16
 80099d0:	463a      	mov	r2, r7
 80099d2:	f000 fc45 	bl	800a260 <__lshift>
 80099d6:	1bed      	subs	r5, r5, r7
 80099d8:	4604      	mov	r4, r0
 80099da:	f100 0914 	add.w	r9, r0, #20
 80099de:	f04f 0a00 	mov.w	sl, #0
 80099e2:	e7ae      	b.n	8009942 <__gethex+0x202>
 80099e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80099e8:	42a8      	cmp	r0, r5
 80099ea:	dd72      	ble.n	8009ad2 <__gethex+0x392>
 80099ec:	1b45      	subs	r5, r0, r5
 80099ee:	42ae      	cmp	r6, r5
 80099f0:	dc36      	bgt.n	8009a60 <__gethex+0x320>
 80099f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d02a      	beq.n	8009a50 <__gethex+0x310>
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d02c      	beq.n	8009a58 <__gethex+0x318>
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d115      	bne.n	8009a2e <__gethex+0x2ee>
 8009a02:	42ae      	cmp	r6, r5
 8009a04:	d113      	bne.n	8009a2e <__gethex+0x2ee>
 8009a06:	2e01      	cmp	r6, #1
 8009a08:	d10b      	bne.n	8009a22 <__gethex+0x2e2>
 8009a0a:	9a04      	ldr	r2, [sp, #16]
 8009a0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	2301      	movs	r3, #1
 8009a14:	6123      	str	r3, [r4, #16]
 8009a16:	f8c9 3000 	str.w	r3, [r9]
 8009a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a1c:	2762      	movs	r7, #98	; 0x62
 8009a1e:	601c      	str	r4, [r3, #0]
 8009a20:	e723      	b.n	800986a <__gethex+0x12a>
 8009a22:	1e71      	subs	r1, r6, #1
 8009a24:	4620      	mov	r0, r4
 8009a26:	f000 fe59 	bl	800a6dc <__any_on>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d1ed      	bne.n	8009a0a <__gethex+0x2ca>
 8009a2e:	ee18 0a10 	vmov	r0, s16
 8009a32:	4621      	mov	r1, r4
 8009a34:	f000 f9f8 	bl	8009e28 <_Bfree>
 8009a38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	2750      	movs	r7, #80	; 0x50
 8009a40:	e713      	b.n	800986a <__gethex+0x12a>
 8009a42:	bf00      	nop
 8009a44:	0800c010 	.word	0x0800c010
 8009a48:	0800bf94 	.word	0x0800bf94
 8009a4c:	0800bfa5 	.word	0x0800bfa5
 8009a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1eb      	bne.n	8009a2e <__gethex+0x2ee>
 8009a56:	e7d8      	b.n	8009a0a <__gethex+0x2ca>
 8009a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1d5      	bne.n	8009a0a <__gethex+0x2ca>
 8009a5e:	e7e6      	b.n	8009a2e <__gethex+0x2ee>
 8009a60:	1e6f      	subs	r7, r5, #1
 8009a62:	f1ba 0f00 	cmp.w	sl, #0
 8009a66:	d131      	bne.n	8009acc <__gethex+0x38c>
 8009a68:	b127      	cbz	r7, 8009a74 <__gethex+0x334>
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 fe35 	bl	800a6dc <__any_on>
 8009a72:	4682      	mov	sl, r0
 8009a74:	117b      	asrs	r3, r7, #5
 8009a76:	2101      	movs	r1, #1
 8009a78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009a7c:	f007 071f 	and.w	r7, r7, #31
 8009a80:	fa01 f707 	lsl.w	r7, r1, r7
 8009a84:	421f      	tst	r7, r3
 8009a86:	4629      	mov	r1, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bf18      	it	ne
 8009a8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a90:	1b76      	subs	r6, r6, r5
 8009a92:	f7ff fded 	bl	8009670 <rshift>
 8009a96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a9a:	2702      	movs	r7, #2
 8009a9c:	f1ba 0f00 	cmp.w	sl, #0
 8009aa0:	d048      	beq.n	8009b34 <__gethex+0x3f4>
 8009aa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d015      	beq.n	8009ad6 <__gethex+0x396>
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d017      	beq.n	8009ade <__gethex+0x39e>
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d109      	bne.n	8009ac6 <__gethex+0x386>
 8009ab2:	f01a 0f02 	tst.w	sl, #2
 8009ab6:	d006      	beq.n	8009ac6 <__gethex+0x386>
 8009ab8:	f8d9 0000 	ldr.w	r0, [r9]
 8009abc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ac0:	f01a 0f01 	tst.w	sl, #1
 8009ac4:	d10e      	bne.n	8009ae4 <__gethex+0x3a4>
 8009ac6:	f047 0710 	orr.w	r7, r7, #16
 8009aca:	e033      	b.n	8009b34 <__gethex+0x3f4>
 8009acc:	f04f 0a01 	mov.w	sl, #1
 8009ad0:	e7d0      	b.n	8009a74 <__gethex+0x334>
 8009ad2:	2701      	movs	r7, #1
 8009ad4:	e7e2      	b.n	8009a9c <__gethex+0x35c>
 8009ad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ad8:	f1c3 0301 	rsb	r3, r3, #1
 8009adc:	9315      	str	r3, [sp, #84]	; 0x54
 8009ade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f0      	beq.n	8009ac6 <__gethex+0x386>
 8009ae4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ae8:	f104 0314 	add.w	r3, r4, #20
 8009aec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009af0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009af4:	f04f 0c00 	mov.w	ip, #0
 8009af8:	4618      	mov	r0, r3
 8009afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b02:	d01c      	beq.n	8009b3e <__gethex+0x3fe>
 8009b04:	3201      	adds	r2, #1
 8009b06:	6002      	str	r2, [r0, #0]
 8009b08:	2f02      	cmp	r7, #2
 8009b0a:	f104 0314 	add.w	r3, r4, #20
 8009b0e:	d13f      	bne.n	8009b90 <__gethex+0x450>
 8009b10:	f8d8 2000 	ldr.w	r2, [r8]
 8009b14:	3a01      	subs	r2, #1
 8009b16:	42b2      	cmp	r2, r6
 8009b18:	d10a      	bne.n	8009b30 <__gethex+0x3f0>
 8009b1a:	1171      	asrs	r1, r6, #5
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b22:	f006 061f 	and.w	r6, r6, #31
 8009b26:	fa02 f606 	lsl.w	r6, r2, r6
 8009b2a:	421e      	tst	r6, r3
 8009b2c:	bf18      	it	ne
 8009b2e:	4617      	movne	r7, r2
 8009b30:	f047 0720 	orr.w	r7, r7, #32
 8009b34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b36:	601c      	str	r4, [r3, #0]
 8009b38:	9b04      	ldr	r3, [sp, #16]
 8009b3a:	601d      	str	r5, [r3, #0]
 8009b3c:	e695      	b.n	800986a <__gethex+0x12a>
 8009b3e:	4299      	cmp	r1, r3
 8009b40:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b44:	d8d8      	bhi.n	8009af8 <__gethex+0x3b8>
 8009b46:	68a3      	ldr	r3, [r4, #8]
 8009b48:	459b      	cmp	fp, r3
 8009b4a:	db19      	blt.n	8009b80 <__gethex+0x440>
 8009b4c:	6861      	ldr	r1, [r4, #4]
 8009b4e:	ee18 0a10 	vmov	r0, s16
 8009b52:	3101      	adds	r1, #1
 8009b54:	f000 f928 	bl	8009da8 <_Balloc>
 8009b58:	4681      	mov	r9, r0
 8009b5a:	b918      	cbnz	r0, 8009b64 <__gethex+0x424>
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <__gethex+0x488>)
 8009b5e:	4602      	mov	r2, r0
 8009b60:	2184      	movs	r1, #132	; 0x84
 8009b62:	e6a8      	b.n	80098b6 <__gethex+0x176>
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	3202      	adds	r2, #2
 8009b68:	f104 010c 	add.w	r1, r4, #12
 8009b6c:	0092      	lsls	r2, r2, #2
 8009b6e:	300c      	adds	r0, #12
 8009b70:	f000 f90c 	bl	8009d8c <memcpy>
 8009b74:	4621      	mov	r1, r4
 8009b76:	ee18 0a10 	vmov	r0, s16
 8009b7a:	f000 f955 	bl	8009e28 <_Bfree>
 8009b7e:	464c      	mov	r4, r9
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b88:	6122      	str	r2, [r4, #16]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	615a      	str	r2, [r3, #20]
 8009b8e:	e7bb      	b.n	8009b08 <__gethex+0x3c8>
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	455a      	cmp	r2, fp
 8009b94:	dd0b      	ble.n	8009bae <__gethex+0x46e>
 8009b96:	2101      	movs	r1, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f7ff fd69 	bl	8009670 <rshift>
 8009b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	f6ff aed0 	blt.w	800994a <__gethex+0x20a>
 8009baa:	2701      	movs	r7, #1
 8009bac:	e7c0      	b.n	8009b30 <__gethex+0x3f0>
 8009bae:	f016 061f 	ands.w	r6, r6, #31
 8009bb2:	d0fa      	beq.n	8009baa <__gethex+0x46a>
 8009bb4:	449a      	add	sl, r3
 8009bb6:	f1c6 0620 	rsb	r6, r6, #32
 8009bba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009bbe:	f000 f9e9 	bl	8009f94 <__hi0bits>
 8009bc2:	42b0      	cmp	r0, r6
 8009bc4:	dbe7      	blt.n	8009b96 <__gethex+0x456>
 8009bc6:	e7f0      	b.n	8009baa <__gethex+0x46a>
 8009bc8:	0800bf94 	.word	0x0800bf94

08009bcc <L_shift>:
 8009bcc:	f1c2 0208 	rsb	r2, r2, #8
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	f1c2 0620 	rsb	r6, r2, #32
 8009bd8:	6843      	ldr	r3, [r0, #4]
 8009bda:	6804      	ldr	r4, [r0, #0]
 8009bdc:	fa03 f506 	lsl.w	r5, r3, r6
 8009be0:	432c      	orrs	r4, r5
 8009be2:	40d3      	lsrs	r3, r2
 8009be4:	6004      	str	r4, [r0, #0]
 8009be6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bea:	4288      	cmp	r0, r1
 8009bec:	d3f4      	bcc.n	8009bd8 <L_shift+0xc>
 8009bee:	bd70      	pop	{r4, r5, r6, pc}

08009bf0 <__match>:
 8009bf0:	b530      	push	{r4, r5, lr}
 8009bf2:	6803      	ldr	r3, [r0, #0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bfa:	b914      	cbnz	r4, 8009c02 <__match+0x12>
 8009bfc:	6003      	str	r3, [r0, #0]
 8009bfe:	2001      	movs	r0, #1
 8009c00:	bd30      	pop	{r4, r5, pc}
 8009c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c0a:	2d19      	cmp	r5, #25
 8009c0c:	bf98      	it	ls
 8009c0e:	3220      	addls	r2, #32
 8009c10:	42a2      	cmp	r2, r4
 8009c12:	d0f0      	beq.n	8009bf6 <__match+0x6>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e7f3      	b.n	8009c00 <__match+0x10>

08009c18 <__hexnan>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	680b      	ldr	r3, [r1, #0]
 8009c1e:	6801      	ldr	r1, [r0, #0]
 8009c20:	115e      	asrs	r6, r3, #5
 8009c22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c26:	f013 031f 	ands.w	r3, r3, #31
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	bf18      	it	ne
 8009c2e:	3604      	addne	r6, #4
 8009c30:	2500      	movs	r5, #0
 8009c32:	1f37      	subs	r7, r6, #4
 8009c34:	4682      	mov	sl, r0
 8009c36:	4690      	mov	r8, r2
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c3e:	46b9      	mov	r9, r7
 8009c40:	463c      	mov	r4, r7
 8009c42:	9502      	str	r5, [sp, #8]
 8009c44:	46ab      	mov	fp, r5
 8009c46:	784a      	ldrb	r2, [r1, #1]
 8009c48:	1c4b      	adds	r3, r1, #1
 8009c4a:	9303      	str	r3, [sp, #12]
 8009c4c:	b342      	cbz	r2, 8009ca0 <__hexnan+0x88>
 8009c4e:	4610      	mov	r0, r2
 8009c50:	9105      	str	r1, [sp, #20]
 8009c52:	9204      	str	r2, [sp, #16]
 8009c54:	f7ff fd5e 	bl	8009714 <__hexdig_fun>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d14f      	bne.n	8009cfc <__hexnan+0xe4>
 8009c5c:	9a04      	ldr	r2, [sp, #16]
 8009c5e:	9905      	ldr	r1, [sp, #20]
 8009c60:	2a20      	cmp	r2, #32
 8009c62:	d818      	bhi.n	8009c96 <__hexnan+0x7e>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	459b      	cmp	fp, r3
 8009c68:	dd13      	ble.n	8009c92 <__hexnan+0x7a>
 8009c6a:	454c      	cmp	r4, r9
 8009c6c:	d206      	bcs.n	8009c7c <__hexnan+0x64>
 8009c6e:	2d07      	cmp	r5, #7
 8009c70:	dc04      	bgt.n	8009c7c <__hexnan+0x64>
 8009c72:	462a      	mov	r2, r5
 8009c74:	4649      	mov	r1, r9
 8009c76:	4620      	mov	r0, r4
 8009c78:	f7ff ffa8 	bl	8009bcc <L_shift>
 8009c7c:	4544      	cmp	r4, r8
 8009c7e:	d950      	bls.n	8009d22 <__hexnan+0x10a>
 8009c80:	2300      	movs	r3, #0
 8009c82:	f1a4 0904 	sub.w	r9, r4, #4
 8009c86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c8e:	464c      	mov	r4, r9
 8009c90:	461d      	mov	r5, r3
 8009c92:	9903      	ldr	r1, [sp, #12]
 8009c94:	e7d7      	b.n	8009c46 <__hexnan+0x2e>
 8009c96:	2a29      	cmp	r2, #41	; 0x29
 8009c98:	d156      	bne.n	8009d48 <__hexnan+0x130>
 8009c9a:	3102      	adds	r1, #2
 8009c9c:	f8ca 1000 	str.w	r1, [sl]
 8009ca0:	f1bb 0f00 	cmp.w	fp, #0
 8009ca4:	d050      	beq.n	8009d48 <__hexnan+0x130>
 8009ca6:	454c      	cmp	r4, r9
 8009ca8:	d206      	bcs.n	8009cb8 <__hexnan+0xa0>
 8009caa:	2d07      	cmp	r5, #7
 8009cac:	dc04      	bgt.n	8009cb8 <__hexnan+0xa0>
 8009cae:	462a      	mov	r2, r5
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7ff ff8a 	bl	8009bcc <L_shift>
 8009cb8:	4544      	cmp	r4, r8
 8009cba:	d934      	bls.n	8009d26 <__hexnan+0x10e>
 8009cbc:	f1a8 0204 	sub.w	r2, r8, #4
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cca:	429f      	cmp	r7, r3
 8009ccc:	d2f9      	bcs.n	8009cc2 <__hexnan+0xaa>
 8009cce:	1b3b      	subs	r3, r7, r4
 8009cd0:	f023 0303 	bic.w	r3, r3, #3
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	3401      	adds	r4, #1
 8009cd8:	3e03      	subs	r6, #3
 8009cda:	42b4      	cmp	r4, r6
 8009cdc:	bf88      	it	hi
 8009cde:	2304      	movhi	r3, #4
 8009ce0:	4443      	add	r3, r8
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f843 2b04 	str.w	r2, [r3], #4
 8009ce8:	429f      	cmp	r7, r3
 8009cea:	d2fb      	bcs.n	8009ce4 <__hexnan+0xcc>
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	b91b      	cbnz	r3, 8009cf8 <__hexnan+0xe0>
 8009cf0:	4547      	cmp	r7, r8
 8009cf2:	d127      	bne.n	8009d44 <__hexnan+0x12c>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	2005      	movs	r0, #5
 8009cfa:	e026      	b.n	8009d4a <__hexnan+0x132>
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	2d08      	cmp	r5, #8
 8009d00:	f10b 0b01 	add.w	fp, fp, #1
 8009d04:	dd06      	ble.n	8009d14 <__hexnan+0xfc>
 8009d06:	4544      	cmp	r4, r8
 8009d08:	d9c3      	bls.n	8009c92 <__hexnan+0x7a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d10:	2501      	movs	r5, #1
 8009d12:	3c04      	subs	r4, #4
 8009d14:	6822      	ldr	r2, [r4, #0]
 8009d16:	f000 000f 	and.w	r0, r0, #15
 8009d1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d1e:	6022      	str	r2, [r4, #0]
 8009d20:	e7b7      	b.n	8009c92 <__hexnan+0x7a>
 8009d22:	2508      	movs	r5, #8
 8009d24:	e7b5      	b.n	8009c92 <__hexnan+0x7a>
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d0df      	beq.n	8009cec <__hexnan+0xd4>
 8009d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d30:	f1c3 0320 	rsb	r3, r3, #32
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
 8009d38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d3c:	401a      	ands	r2, r3
 8009d3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d42:	e7d3      	b.n	8009cec <__hexnan+0xd4>
 8009d44:	3f04      	subs	r7, #4
 8009d46:	e7d1      	b.n	8009cec <__hexnan+0xd4>
 8009d48:	2004      	movs	r0, #4
 8009d4a:	b007      	add	sp, #28
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d50 <_localeconv_r>:
 8009d50:	4800      	ldr	r0, [pc, #0]	; (8009d54 <_localeconv_r+0x4>)
 8009d52:	4770      	bx	lr
 8009d54:	20000168 	.word	0x20000168

08009d58 <malloc>:
 8009d58:	4b02      	ldr	r3, [pc, #8]	; (8009d64 <malloc+0xc>)
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	f000 bd3d 	b.w	800a7dc <_malloc_r>
 8009d62:	bf00      	nop
 8009d64:	20000010 	.word	0x20000010

08009d68 <__ascii_mbtowc>:
 8009d68:	b082      	sub	sp, #8
 8009d6a:	b901      	cbnz	r1, 8009d6e <__ascii_mbtowc+0x6>
 8009d6c:	a901      	add	r1, sp, #4
 8009d6e:	b142      	cbz	r2, 8009d82 <__ascii_mbtowc+0x1a>
 8009d70:	b14b      	cbz	r3, 8009d86 <__ascii_mbtowc+0x1e>
 8009d72:	7813      	ldrb	r3, [r2, #0]
 8009d74:	600b      	str	r3, [r1, #0]
 8009d76:	7812      	ldrb	r2, [r2, #0]
 8009d78:	1e10      	subs	r0, r2, #0
 8009d7a:	bf18      	it	ne
 8009d7c:	2001      	movne	r0, #1
 8009d7e:	b002      	add	sp, #8
 8009d80:	4770      	bx	lr
 8009d82:	4610      	mov	r0, r2
 8009d84:	e7fb      	b.n	8009d7e <__ascii_mbtowc+0x16>
 8009d86:	f06f 0001 	mvn.w	r0, #1
 8009d8a:	e7f8      	b.n	8009d7e <__ascii_mbtowc+0x16>

08009d8c <memcpy>:
 8009d8c:	440a      	add	r2, r1
 8009d8e:	4291      	cmp	r1, r2
 8009d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d94:	d100      	bne.n	8009d98 <memcpy+0xc>
 8009d96:	4770      	bx	lr
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009da2:	4291      	cmp	r1, r2
 8009da4:	d1f9      	bne.n	8009d9a <memcpy+0xe>
 8009da6:	bd10      	pop	{r4, pc}

08009da8 <_Balloc>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dac:	4604      	mov	r4, r0
 8009dae:	460d      	mov	r5, r1
 8009db0:	b976      	cbnz	r6, 8009dd0 <_Balloc+0x28>
 8009db2:	2010      	movs	r0, #16
 8009db4:	f7ff ffd0 	bl	8009d58 <malloc>
 8009db8:	4602      	mov	r2, r0
 8009dba:	6260      	str	r0, [r4, #36]	; 0x24
 8009dbc:	b920      	cbnz	r0, 8009dc8 <_Balloc+0x20>
 8009dbe:	4b18      	ldr	r3, [pc, #96]	; (8009e20 <_Balloc+0x78>)
 8009dc0:	4818      	ldr	r0, [pc, #96]	; (8009e24 <_Balloc+0x7c>)
 8009dc2:	2166      	movs	r1, #102	; 0x66
 8009dc4:	f000 fef8 	bl	800abb8 <__assert_func>
 8009dc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dcc:	6006      	str	r6, [r0, #0]
 8009dce:	60c6      	str	r6, [r0, #12]
 8009dd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009dd2:	68f3      	ldr	r3, [r6, #12]
 8009dd4:	b183      	cbz	r3, 8009df8 <_Balloc+0x50>
 8009dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dde:	b9b8      	cbnz	r0, 8009e10 <_Balloc+0x68>
 8009de0:	2101      	movs	r1, #1
 8009de2:	fa01 f605 	lsl.w	r6, r1, r5
 8009de6:	1d72      	adds	r2, r6, #5
 8009de8:	0092      	lsls	r2, r2, #2
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fc97 	bl	800a71e <_calloc_r>
 8009df0:	b160      	cbz	r0, 8009e0c <_Balloc+0x64>
 8009df2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009df6:	e00e      	b.n	8009e16 <_Balloc+0x6e>
 8009df8:	2221      	movs	r2, #33	; 0x21
 8009dfa:	2104      	movs	r1, #4
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 fc8e 	bl	800a71e <_calloc_r>
 8009e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e04:	60f0      	str	r0, [r6, #12]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e4      	bne.n	8009dd6 <_Balloc+0x2e>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}
 8009e10:	6802      	ldr	r2, [r0, #0]
 8009e12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e16:	2300      	movs	r3, #0
 8009e18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e1c:	e7f7      	b.n	8009e0e <_Balloc+0x66>
 8009e1e:	bf00      	nop
 8009e20:	0800bf1e 	.word	0x0800bf1e
 8009e24:	0800c024 	.word	0x0800c024

08009e28 <_Bfree>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	460c      	mov	r4, r1
 8009e30:	b976      	cbnz	r6, 8009e50 <_Bfree+0x28>
 8009e32:	2010      	movs	r0, #16
 8009e34:	f7ff ff90 	bl	8009d58 <malloc>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6268      	str	r0, [r5, #36]	; 0x24
 8009e3c:	b920      	cbnz	r0, 8009e48 <_Bfree+0x20>
 8009e3e:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <_Bfree+0x3c>)
 8009e40:	4809      	ldr	r0, [pc, #36]	; (8009e68 <_Bfree+0x40>)
 8009e42:	218a      	movs	r1, #138	; 0x8a
 8009e44:	f000 feb8 	bl	800abb8 <__assert_func>
 8009e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e4c:	6006      	str	r6, [r0, #0]
 8009e4e:	60c6      	str	r6, [r0, #12]
 8009e50:	b13c      	cbz	r4, 8009e62 <_Bfree+0x3a>
 8009e52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e54:	6862      	ldr	r2, [r4, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e5c:	6021      	str	r1, [r4, #0]
 8009e5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	0800bf1e 	.word	0x0800bf1e
 8009e68:	0800c024 	.word	0x0800c024

08009e6c <__multadd>:
 8009e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	690e      	ldr	r6, [r1, #16]
 8009e72:	4607      	mov	r7, r0
 8009e74:	4698      	mov	r8, r3
 8009e76:	460c      	mov	r4, r1
 8009e78:	f101 0014 	add.w	r0, r1, #20
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	6805      	ldr	r5, [r0, #0]
 8009e80:	b2a9      	uxth	r1, r5
 8009e82:	fb02 8101 	mla	r1, r2, r1, r8
 8009e86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009e8a:	0c2d      	lsrs	r5, r5, #16
 8009e8c:	fb02 c505 	mla	r5, r2, r5, ip
 8009e90:	b289      	uxth	r1, r1
 8009e92:	3301      	adds	r3, #1
 8009e94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009e98:	429e      	cmp	r6, r3
 8009e9a:	f840 1b04 	str.w	r1, [r0], #4
 8009e9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ea2:	dcec      	bgt.n	8009e7e <__multadd+0x12>
 8009ea4:	f1b8 0f00 	cmp.w	r8, #0
 8009ea8:	d022      	beq.n	8009ef0 <__multadd+0x84>
 8009eaa:	68a3      	ldr	r3, [r4, #8]
 8009eac:	42b3      	cmp	r3, r6
 8009eae:	dc19      	bgt.n	8009ee4 <__multadd+0x78>
 8009eb0:	6861      	ldr	r1, [r4, #4]
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	3101      	adds	r1, #1
 8009eb6:	f7ff ff77 	bl	8009da8 <_Balloc>
 8009eba:	4605      	mov	r5, r0
 8009ebc:	b928      	cbnz	r0, 8009eca <__multadd+0x5e>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <__multadd+0x8c>)
 8009ec2:	480e      	ldr	r0, [pc, #56]	; (8009efc <__multadd+0x90>)
 8009ec4:	21b5      	movs	r1, #181	; 0xb5
 8009ec6:	f000 fe77 	bl	800abb8 <__assert_func>
 8009eca:	6922      	ldr	r2, [r4, #16]
 8009ecc:	3202      	adds	r2, #2
 8009ece:	f104 010c 	add.w	r1, r4, #12
 8009ed2:	0092      	lsls	r2, r2, #2
 8009ed4:	300c      	adds	r0, #12
 8009ed6:	f7ff ff59 	bl	8009d8c <memcpy>
 8009eda:	4621      	mov	r1, r4
 8009edc:	4638      	mov	r0, r7
 8009ede:	f7ff ffa3 	bl	8009e28 <_Bfree>
 8009ee2:	462c      	mov	r4, r5
 8009ee4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009ee8:	3601      	adds	r6, #1
 8009eea:	f8c3 8014 	str.w	r8, [r3, #20]
 8009eee:	6126      	str	r6, [r4, #16]
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0800bf94 	.word	0x0800bf94
 8009efc:	0800c024 	.word	0x0800c024

08009f00 <__s2b>:
 8009f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f04:	460c      	mov	r4, r1
 8009f06:	4615      	mov	r5, r2
 8009f08:	461f      	mov	r7, r3
 8009f0a:	2209      	movs	r2, #9
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	4606      	mov	r6, r0
 8009f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f14:	2100      	movs	r1, #0
 8009f16:	2201      	movs	r2, #1
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	db09      	blt.n	8009f30 <__s2b+0x30>
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff ff43 	bl	8009da8 <_Balloc>
 8009f22:	b940      	cbnz	r0, 8009f36 <__s2b+0x36>
 8009f24:	4602      	mov	r2, r0
 8009f26:	4b19      	ldr	r3, [pc, #100]	; (8009f8c <__s2b+0x8c>)
 8009f28:	4819      	ldr	r0, [pc, #100]	; (8009f90 <__s2b+0x90>)
 8009f2a:	21ce      	movs	r1, #206	; 0xce
 8009f2c:	f000 fe44 	bl	800abb8 <__assert_func>
 8009f30:	0052      	lsls	r2, r2, #1
 8009f32:	3101      	adds	r1, #1
 8009f34:	e7f0      	b.n	8009f18 <__s2b+0x18>
 8009f36:	9b08      	ldr	r3, [sp, #32]
 8009f38:	6143      	str	r3, [r0, #20]
 8009f3a:	2d09      	cmp	r5, #9
 8009f3c:	f04f 0301 	mov.w	r3, #1
 8009f40:	6103      	str	r3, [r0, #16]
 8009f42:	dd16      	ble.n	8009f72 <__s2b+0x72>
 8009f44:	f104 0909 	add.w	r9, r4, #9
 8009f48:	46c8      	mov	r8, r9
 8009f4a:	442c      	add	r4, r5
 8009f4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f50:	4601      	mov	r1, r0
 8009f52:	3b30      	subs	r3, #48	; 0x30
 8009f54:	220a      	movs	r2, #10
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff ff88 	bl	8009e6c <__multadd>
 8009f5c:	45a0      	cmp	r8, r4
 8009f5e:	d1f5      	bne.n	8009f4c <__s2b+0x4c>
 8009f60:	f1a5 0408 	sub.w	r4, r5, #8
 8009f64:	444c      	add	r4, r9
 8009f66:	1b2d      	subs	r5, r5, r4
 8009f68:	1963      	adds	r3, r4, r5
 8009f6a:	42bb      	cmp	r3, r7
 8009f6c:	db04      	blt.n	8009f78 <__s2b+0x78>
 8009f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f72:	340a      	adds	r4, #10
 8009f74:	2509      	movs	r5, #9
 8009f76:	e7f6      	b.n	8009f66 <__s2b+0x66>
 8009f78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f7c:	4601      	mov	r1, r0
 8009f7e:	3b30      	subs	r3, #48	; 0x30
 8009f80:	220a      	movs	r2, #10
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff ff72 	bl	8009e6c <__multadd>
 8009f88:	e7ee      	b.n	8009f68 <__s2b+0x68>
 8009f8a:	bf00      	nop
 8009f8c:	0800bf94 	.word	0x0800bf94
 8009f90:	0800c024 	.word	0x0800c024

08009f94 <__hi0bits>:
 8009f94:	0c03      	lsrs	r3, r0, #16
 8009f96:	041b      	lsls	r3, r3, #16
 8009f98:	b9d3      	cbnz	r3, 8009fd0 <__hi0bits+0x3c>
 8009f9a:	0400      	lsls	r0, r0, #16
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009fa2:	bf04      	itt	eq
 8009fa4:	0200      	lsleq	r0, r0, #8
 8009fa6:	3308      	addeq	r3, #8
 8009fa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009fac:	bf04      	itt	eq
 8009fae:	0100      	lsleq	r0, r0, #4
 8009fb0:	3304      	addeq	r3, #4
 8009fb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009fb6:	bf04      	itt	eq
 8009fb8:	0080      	lsleq	r0, r0, #2
 8009fba:	3302      	addeq	r3, #2
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	db05      	blt.n	8009fcc <__hi0bits+0x38>
 8009fc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009fc4:	f103 0301 	add.w	r3, r3, #1
 8009fc8:	bf08      	it	eq
 8009fca:	2320      	moveq	r3, #32
 8009fcc:	4618      	mov	r0, r3
 8009fce:	4770      	bx	lr
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e7e4      	b.n	8009f9e <__hi0bits+0xa>

08009fd4 <__lo0bits>:
 8009fd4:	6803      	ldr	r3, [r0, #0]
 8009fd6:	f013 0207 	ands.w	r2, r3, #7
 8009fda:	4601      	mov	r1, r0
 8009fdc:	d00b      	beq.n	8009ff6 <__lo0bits+0x22>
 8009fde:	07da      	lsls	r2, r3, #31
 8009fe0:	d424      	bmi.n	800a02c <__lo0bits+0x58>
 8009fe2:	0798      	lsls	r0, r3, #30
 8009fe4:	bf49      	itett	mi
 8009fe6:	085b      	lsrmi	r3, r3, #1
 8009fe8:	089b      	lsrpl	r3, r3, #2
 8009fea:	2001      	movmi	r0, #1
 8009fec:	600b      	strmi	r3, [r1, #0]
 8009fee:	bf5c      	itt	pl
 8009ff0:	600b      	strpl	r3, [r1, #0]
 8009ff2:	2002      	movpl	r0, #2
 8009ff4:	4770      	bx	lr
 8009ff6:	b298      	uxth	r0, r3
 8009ff8:	b9b0      	cbnz	r0, 800a028 <__lo0bits+0x54>
 8009ffa:	0c1b      	lsrs	r3, r3, #16
 8009ffc:	2010      	movs	r0, #16
 8009ffe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a002:	bf04      	itt	eq
 800a004:	0a1b      	lsreq	r3, r3, #8
 800a006:	3008      	addeq	r0, #8
 800a008:	071a      	lsls	r2, r3, #28
 800a00a:	bf04      	itt	eq
 800a00c:	091b      	lsreq	r3, r3, #4
 800a00e:	3004      	addeq	r0, #4
 800a010:	079a      	lsls	r2, r3, #30
 800a012:	bf04      	itt	eq
 800a014:	089b      	lsreq	r3, r3, #2
 800a016:	3002      	addeq	r0, #2
 800a018:	07da      	lsls	r2, r3, #31
 800a01a:	d403      	bmi.n	800a024 <__lo0bits+0x50>
 800a01c:	085b      	lsrs	r3, r3, #1
 800a01e:	f100 0001 	add.w	r0, r0, #1
 800a022:	d005      	beq.n	800a030 <__lo0bits+0x5c>
 800a024:	600b      	str	r3, [r1, #0]
 800a026:	4770      	bx	lr
 800a028:	4610      	mov	r0, r2
 800a02a:	e7e8      	b.n	8009ffe <__lo0bits+0x2a>
 800a02c:	2000      	movs	r0, #0
 800a02e:	4770      	bx	lr
 800a030:	2020      	movs	r0, #32
 800a032:	4770      	bx	lr

0800a034 <__i2b>:
 800a034:	b510      	push	{r4, lr}
 800a036:	460c      	mov	r4, r1
 800a038:	2101      	movs	r1, #1
 800a03a:	f7ff feb5 	bl	8009da8 <_Balloc>
 800a03e:	4602      	mov	r2, r0
 800a040:	b928      	cbnz	r0, 800a04e <__i2b+0x1a>
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <__i2b+0x24>)
 800a044:	4805      	ldr	r0, [pc, #20]	; (800a05c <__i2b+0x28>)
 800a046:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a04a:	f000 fdb5 	bl	800abb8 <__assert_func>
 800a04e:	2301      	movs	r3, #1
 800a050:	6144      	str	r4, [r0, #20]
 800a052:	6103      	str	r3, [r0, #16]
 800a054:	bd10      	pop	{r4, pc}
 800a056:	bf00      	nop
 800a058:	0800bf94 	.word	0x0800bf94
 800a05c:	0800c024 	.word	0x0800c024

0800a060 <__multiply>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	4614      	mov	r4, r2
 800a066:	690a      	ldr	r2, [r1, #16]
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	bfb8      	it	lt
 800a06e:	460b      	movlt	r3, r1
 800a070:	460d      	mov	r5, r1
 800a072:	bfbc      	itt	lt
 800a074:	4625      	movlt	r5, r4
 800a076:	461c      	movlt	r4, r3
 800a078:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a07c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a080:	68ab      	ldr	r3, [r5, #8]
 800a082:	6869      	ldr	r1, [r5, #4]
 800a084:	eb0a 0709 	add.w	r7, sl, r9
 800a088:	42bb      	cmp	r3, r7
 800a08a:	b085      	sub	sp, #20
 800a08c:	bfb8      	it	lt
 800a08e:	3101      	addlt	r1, #1
 800a090:	f7ff fe8a 	bl	8009da8 <_Balloc>
 800a094:	b930      	cbnz	r0, 800a0a4 <__multiply+0x44>
 800a096:	4602      	mov	r2, r0
 800a098:	4b42      	ldr	r3, [pc, #264]	; (800a1a4 <__multiply+0x144>)
 800a09a:	4843      	ldr	r0, [pc, #268]	; (800a1a8 <__multiply+0x148>)
 800a09c:	f240 115d 	movw	r1, #349	; 0x15d
 800a0a0:	f000 fd8a 	bl	800abb8 <__assert_func>
 800a0a4:	f100 0614 	add.w	r6, r0, #20
 800a0a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a0ac:	4633      	mov	r3, r6
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	4543      	cmp	r3, r8
 800a0b2:	d31e      	bcc.n	800a0f2 <__multiply+0x92>
 800a0b4:	f105 0c14 	add.w	ip, r5, #20
 800a0b8:	f104 0314 	add.w	r3, r4, #20
 800a0bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a0c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a0c4:	9202      	str	r2, [sp, #8]
 800a0c6:	ebac 0205 	sub.w	r2, ip, r5
 800a0ca:	3a15      	subs	r2, #21
 800a0cc:	f022 0203 	bic.w	r2, r2, #3
 800a0d0:	3204      	adds	r2, #4
 800a0d2:	f105 0115 	add.w	r1, r5, #21
 800a0d6:	458c      	cmp	ip, r1
 800a0d8:	bf38      	it	cc
 800a0da:	2204      	movcc	r2, #4
 800a0dc:	9201      	str	r2, [sp, #4]
 800a0de:	9a02      	ldr	r2, [sp, #8]
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d808      	bhi.n	800a0f8 <__multiply+0x98>
 800a0e6:	2f00      	cmp	r7, #0
 800a0e8:	dc55      	bgt.n	800a196 <__multiply+0x136>
 800a0ea:	6107      	str	r7, [r0, #16]
 800a0ec:	b005      	add	sp, #20
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	f843 2b04 	str.w	r2, [r3], #4
 800a0f6:	e7db      	b.n	800a0b0 <__multiply+0x50>
 800a0f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0fc:	f1ba 0f00 	cmp.w	sl, #0
 800a100:	d020      	beq.n	800a144 <__multiply+0xe4>
 800a102:	f105 0e14 	add.w	lr, r5, #20
 800a106:	46b1      	mov	r9, r6
 800a108:	2200      	movs	r2, #0
 800a10a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a10e:	f8d9 b000 	ldr.w	fp, [r9]
 800a112:	b2a1      	uxth	r1, r4
 800a114:	fa1f fb8b 	uxth.w	fp, fp
 800a118:	fb0a b101 	mla	r1, sl, r1, fp
 800a11c:	4411      	add	r1, r2
 800a11e:	f8d9 2000 	ldr.w	r2, [r9]
 800a122:	0c24      	lsrs	r4, r4, #16
 800a124:	0c12      	lsrs	r2, r2, #16
 800a126:	fb0a 2404 	mla	r4, sl, r4, r2
 800a12a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a12e:	b289      	uxth	r1, r1
 800a130:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a134:	45f4      	cmp	ip, lr
 800a136:	f849 1b04 	str.w	r1, [r9], #4
 800a13a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a13e:	d8e4      	bhi.n	800a10a <__multiply+0xaa>
 800a140:	9901      	ldr	r1, [sp, #4]
 800a142:	5072      	str	r2, [r6, r1]
 800a144:	9a03      	ldr	r2, [sp, #12]
 800a146:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a14a:	3304      	adds	r3, #4
 800a14c:	f1b9 0f00 	cmp.w	r9, #0
 800a150:	d01f      	beq.n	800a192 <__multiply+0x132>
 800a152:	6834      	ldr	r4, [r6, #0]
 800a154:	f105 0114 	add.w	r1, r5, #20
 800a158:	46b6      	mov	lr, r6
 800a15a:	f04f 0a00 	mov.w	sl, #0
 800a15e:	880a      	ldrh	r2, [r1, #0]
 800a160:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a164:	fb09 b202 	mla	r2, r9, r2, fp
 800a168:	4492      	add	sl, r2
 800a16a:	b2a4      	uxth	r4, r4
 800a16c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a170:	f84e 4b04 	str.w	r4, [lr], #4
 800a174:	f851 4b04 	ldr.w	r4, [r1], #4
 800a178:	f8be 2000 	ldrh.w	r2, [lr]
 800a17c:	0c24      	lsrs	r4, r4, #16
 800a17e:	fb09 2404 	mla	r4, r9, r4, r2
 800a182:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a186:	458c      	cmp	ip, r1
 800a188:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a18c:	d8e7      	bhi.n	800a15e <__multiply+0xfe>
 800a18e:	9a01      	ldr	r2, [sp, #4]
 800a190:	50b4      	str	r4, [r6, r2]
 800a192:	3604      	adds	r6, #4
 800a194:	e7a3      	b.n	800a0de <__multiply+0x7e>
 800a196:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1a5      	bne.n	800a0ea <__multiply+0x8a>
 800a19e:	3f01      	subs	r7, #1
 800a1a0:	e7a1      	b.n	800a0e6 <__multiply+0x86>
 800a1a2:	bf00      	nop
 800a1a4:	0800bf94 	.word	0x0800bf94
 800a1a8:	0800c024 	.word	0x0800c024

0800a1ac <__pow5mult>:
 800a1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b0:	4615      	mov	r5, r2
 800a1b2:	f012 0203 	ands.w	r2, r2, #3
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	d007      	beq.n	800a1cc <__pow5mult+0x20>
 800a1bc:	4c25      	ldr	r4, [pc, #148]	; (800a254 <__pow5mult+0xa8>)
 800a1be:	3a01      	subs	r2, #1
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1c6:	f7ff fe51 	bl	8009e6c <__multadd>
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	10ad      	asrs	r5, r5, #2
 800a1ce:	d03d      	beq.n	800a24c <__pow5mult+0xa0>
 800a1d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1d2:	b97c      	cbnz	r4, 800a1f4 <__pow5mult+0x48>
 800a1d4:	2010      	movs	r0, #16
 800a1d6:	f7ff fdbf 	bl	8009d58 <malloc>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	6270      	str	r0, [r6, #36]	; 0x24
 800a1de:	b928      	cbnz	r0, 800a1ec <__pow5mult+0x40>
 800a1e0:	4b1d      	ldr	r3, [pc, #116]	; (800a258 <__pow5mult+0xac>)
 800a1e2:	481e      	ldr	r0, [pc, #120]	; (800a25c <__pow5mult+0xb0>)
 800a1e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1e8:	f000 fce6 	bl	800abb8 <__assert_func>
 800a1ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1f0:	6004      	str	r4, [r0, #0]
 800a1f2:	60c4      	str	r4, [r0, #12]
 800a1f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1fc:	b94c      	cbnz	r4, 800a212 <__pow5mult+0x66>
 800a1fe:	f240 2171 	movw	r1, #625	; 0x271
 800a202:	4630      	mov	r0, r6
 800a204:	f7ff ff16 	bl	800a034 <__i2b>
 800a208:	2300      	movs	r3, #0
 800a20a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a20e:	4604      	mov	r4, r0
 800a210:	6003      	str	r3, [r0, #0]
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	07eb      	lsls	r3, r5, #31
 800a218:	d50a      	bpl.n	800a230 <__pow5mult+0x84>
 800a21a:	4639      	mov	r1, r7
 800a21c:	4622      	mov	r2, r4
 800a21e:	4630      	mov	r0, r6
 800a220:	f7ff ff1e 	bl	800a060 <__multiply>
 800a224:	4639      	mov	r1, r7
 800a226:	4680      	mov	r8, r0
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff fdfd 	bl	8009e28 <_Bfree>
 800a22e:	4647      	mov	r7, r8
 800a230:	106d      	asrs	r5, r5, #1
 800a232:	d00b      	beq.n	800a24c <__pow5mult+0xa0>
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	b938      	cbnz	r0, 800a248 <__pow5mult+0x9c>
 800a238:	4622      	mov	r2, r4
 800a23a:	4621      	mov	r1, r4
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff ff0f 	bl	800a060 <__multiply>
 800a242:	6020      	str	r0, [r4, #0]
 800a244:	f8c0 9000 	str.w	r9, [r0]
 800a248:	4604      	mov	r4, r0
 800a24a:	e7e4      	b.n	800a216 <__pow5mult+0x6a>
 800a24c:	4638      	mov	r0, r7
 800a24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a252:	bf00      	nop
 800a254:	0800c178 	.word	0x0800c178
 800a258:	0800bf1e 	.word	0x0800bf1e
 800a25c:	0800c024 	.word	0x0800c024

0800a260 <__lshift>:
 800a260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	460c      	mov	r4, r1
 800a266:	6849      	ldr	r1, [r1, #4]
 800a268:	6923      	ldr	r3, [r4, #16]
 800a26a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a26e:	68a3      	ldr	r3, [r4, #8]
 800a270:	4607      	mov	r7, r0
 800a272:	4691      	mov	r9, r2
 800a274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a278:	f108 0601 	add.w	r6, r8, #1
 800a27c:	42b3      	cmp	r3, r6
 800a27e:	db0b      	blt.n	800a298 <__lshift+0x38>
 800a280:	4638      	mov	r0, r7
 800a282:	f7ff fd91 	bl	8009da8 <_Balloc>
 800a286:	4605      	mov	r5, r0
 800a288:	b948      	cbnz	r0, 800a29e <__lshift+0x3e>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4b28      	ldr	r3, [pc, #160]	; (800a330 <__lshift+0xd0>)
 800a28e:	4829      	ldr	r0, [pc, #164]	; (800a334 <__lshift+0xd4>)
 800a290:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a294:	f000 fc90 	bl	800abb8 <__assert_func>
 800a298:	3101      	adds	r1, #1
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	e7ee      	b.n	800a27c <__lshift+0x1c>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f100 0114 	add.w	r1, r0, #20
 800a2a4:	f100 0210 	add.w	r2, r0, #16
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	4553      	cmp	r3, sl
 800a2ac:	db33      	blt.n	800a316 <__lshift+0xb6>
 800a2ae:	6920      	ldr	r0, [r4, #16]
 800a2b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2b4:	f104 0314 	add.w	r3, r4, #20
 800a2b8:	f019 091f 	ands.w	r9, r9, #31
 800a2bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2c4:	d02b      	beq.n	800a31e <__lshift+0xbe>
 800a2c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a2ca:	468a      	mov	sl, r1
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	fa00 f009 	lsl.w	r0, r0, r9
 800a2d4:	4302      	orrs	r2, r0
 800a2d6:	f84a 2b04 	str.w	r2, [sl], #4
 800a2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2de:	459c      	cmp	ip, r3
 800a2e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2e4:	d8f3      	bhi.n	800a2ce <__lshift+0x6e>
 800a2e6:	ebac 0304 	sub.w	r3, ip, r4
 800a2ea:	3b15      	subs	r3, #21
 800a2ec:	f023 0303 	bic.w	r3, r3, #3
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	f104 0015 	add.w	r0, r4, #21
 800a2f6:	4584      	cmp	ip, r0
 800a2f8:	bf38      	it	cc
 800a2fa:	2304      	movcc	r3, #4
 800a2fc:	50ca      	str	r2, [r1, r3]
 800a2fe:	b10a      	cbz	r2, 800a304 <__lshift+0xa4>
 800a300:	f108 0602 	add.w	r6, r8, #2
 800a304:	3e01      	subs	r6, #1
 800a306:	4638      	mov	r0, r7
 800a308:	612e      	str	r6, [r5, #16]
 800a30a:	4621      	mov	r1, r4
 800a30c:	f7ff fd8c 	bl	8009e28 <_Bfree>
 800a310:	4628      	mov	r0, r5
 800a312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a316:	f842 0f04 	str.w	r0, [r2, #4]!
 800a31a:	3301      	adds	r3, #1
 800a31c:	e7c5      	b.n	800a2aa <__lshift+0x4a>
 800a31e:	3904      	subs	r1, #4
 800a320:	f853 2b04 	ldr.w	r2, [r3], #4
 800a324:	f841 2f04 	str.w	r2, [r1, #4]!
 800a328:	459c      	cmp	ip, r3
 800a32a:	d8f9      	bhi.n	800a320 <__lshift+0xc0>
 800a32c:	e7ea      	b.n	800a304 <__lshift+0xa4>
 800a32e:	bf00      	nop
 800a330:	0800bf94 	.word	0x0800bf94
 800a334:	0800c024 	.word	0x0800c024

0800a338 <__mcmp>:
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	6902      	ldr	r2, [r0, #16]
 800a33c:	690c      	ldr	r4, [r1, #16]
 800a33e:	1b12      	subs	r2, r2, r4
 800a340:	d10e      	bne.n	800a360 <__mcmp+0x28>
 800a342:	f100 0314 	add.w	r3, r0, #20
 800a346:	3114      	adds	r1, #20
 800a348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a34c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a358:	42a5      	cmp	r5, r4
 800a35a:	d003      	beq.n	800a364 <__mcmp+0x2c>
 800a35c:	d305      	bcc.n	800a36a <__mcmp+0x32>
 800a35e:	2201      	movs	r2, #1
 800a360:	4610      	mov	r0, r2
 800a362:	bd30      	pop	{r4, r5, pc}
 800a364:	4283      	cmp	r3, r0
 800a366:	d3f3      	bcc.n	800a350 <__mcmp+0x18>
 800a368:	e7fa      	b.n	800a360 <__mcmp+0x28>
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295
 800a36e:	e7f7      	b.n	800a360 <__mcmp+0x28>

0800a370 <__mdiff>:
 800a370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	460c      	mov	r4, r1
 800a376:	4606      	mov	r6, r0
 800a378:	4611      	mov	r1, r2
 800a37a:	4620      	mov	r0, r4
 800a37c:	4617      	mov	r7, r2
 800a37e:	f7ff ffdb 	bl	800a338 <__mcmp>
 800a382:	1e05      	subs	r5, r0, #0
 800a384:	d110      	bne.n	800a3a8 <__mdiff+0x38>
 800a386:	4629      	mov	r1, r5
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff fd0d 	bl	8009da8 <_Balloc>
 800a38e:	b930      	cbnz	r0, 800a39e <__mdiff+0x2e>
 800a390:	4b39      	ldr	r3, [pc, #228]	; (800a478 <__mdiff+0x108>)
 800a392:	4602      	mov	r2, r0
 800a394:	f240 2132 	movw	r1, #562	; 0x232
 800a398:	4838      	ldr	r0, [pc, #224]	; (800a47c <__mdiff+0x10c>)
 800a39a:	f000 fc0d 	bl	800abb8 <__assert_func>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a8:	bfa4      	itt	ge
 800a3aa:	463b      	movge	r3, r7
 800a3ac:	4627      	movge	r7, r4
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	bfa6      	itte	ge
 800a3b4:	461c      	movge	r4, r3
 800a3b6:	2500      	movge	r5, #0
 800a3b8:	2501      	movlt	r5, #1
 800a3ba:	f7ff fcf5 	bl	8009da8 <_Balloc>
 800a3be:	b920      	cbnz	r0, 800a3ca <__mdiff+0x5a>
 800a3c0:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <__mdiff+0x108>)
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3c8:	e7e6      	b.n	800a398 <__mdiff+0x28>
 800a3ca:	693e      	ldr	r6, [r7, #16]
 800a3cc:	60c5      	str	r5, [r0, #12]
 800a3ce:	6925      	ldr	r5, [r4, #16]
 800a3d0:	f107 0114 	add.w	r1, r7, #20
 800a3d4:	f104 0914 	add.w	r9, r4, #20
 800a3d8:	f100 0e14 	add.w	lr, r0, #20
 800a3dc:	f107 0210 	add.w	r2, r7, #16
 800a3e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a3e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a3e8:	46f2      	mov	sl, lr
 800a3ea:	2700      	movs	r7, #0
 800a3ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3f4:	fa1f f883 	uxth.w	r8, r3
 800a3f8:	fa17 f78b 	uxtah	r7, r7, fp
 800a3fc:	0c1b      	lsrs	r3, r3, #16
 800a3fe:	eba7 0808 	sub.w	r8, r7, r8
 800a402:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a406:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a40a:	fa1f f888 	uxth.w	r8, r8
 800a40e:	141f      	asrs	r7, r3, #16
 800a410:	454d      	cmp	r5, r9
 800a412:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a416:	f84a 3b04 	str.w	r3, [sl], #4
 800a41a:	d8e7      	bhi.n	800a3ec <__mdiff+0x7c>
 800a41c:	1b2b      	subs	r3, r5, r4
 800a41e:	3b15      	subs	r3, #21
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	3415      	adds	r4, #21
 800a428:	42a5      	cmp	r5, r4
 800a42a:	bf38      	it	cc
 800a42c:	2304      	movcc	r3, #4
 800a42e:	4419      	add	r1, r3
 800a430:	4473      	add	r3, lr
 800a432:	469e      	mov	lr, r3
 800a434:	460d      	mov	r5, r1
 800a436:	4565      	cmp	r5, ip
 800a438:	d30e      	bcc.n	800a458 <__mdiff+0xe8>
 800a43a:	f10c 0203 	add.w	r2, ip, #3
 800a43e:	1a52      	subs	r2, r2, r1
 800a440:	f022 0203 	bic.w	r2, r2, #3
 800a444:	3903      	subs	r1, #3
 800a446:	458c      	cmp	ip, r1
 800a448:	bf38      	it	cc
 800a44a:	2200      	movcc	r2, #0
 800a44c:	441a      	add	r2, r3
 800a44e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a452:	b17b      	cbz	r3, 800a474 <__mdiff+0x104>
 800a454:	6106      	str	r6, [r0, #16]
 800a456:	e7a5      	b.n	800a3a4 <__mdiff+0x34>
 800a458:	f855 8b04 	ldr.w	r8, [r5], #4
 800a45c:	fa17 f488 	uxtah	r4, r7, r8
 800a460:	1422      	asrs	r2, r4, #16
 800a462:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a466:	b2a4      	uxth	r4, r4
 800a468:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a46c:	f84e 4b04 	str.w	r4, [lr], #4
 800a470:	1417      	asrs	r7, r2, #16
 800a472:	e7e0      	b.n	800a436 <__mdiff+0xc6>
 800a474:	3e01      	subs	r6, #1
 800a476:	e7ea      	b.n	800a44e <__mdiff+0xde>
 800a478:	0800bf94 	.word	0x0800bf94
 800a47c:	0800c024 	.word	0x0800c024

0800a480 <__ulp>:
 800a480:	b082      	sub	sp, #8
 800a482:	ed8d 0b00 	vstr	d0, [sp]
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	4912      	ldr	r1, [pc, #72]	; (800a4d4 <__ulp+0x54>)
 800a48a:	4019      	ands	r1, r3
 800a48c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a490:	2900      	cmp	r1, #0
 800a492:	dd05      	ble.n	800a4a0 <__ulp+0x20>
 800a494:	2200      	movs	r2, #0
 800a496:	460b      	mov	r3, r1
 800a498:	ec43 2b10 	vmov	d0, r2, r3
 800a49c:	b002      	add	sp, #8
 800a49e:	4770      	bx	lr
 800a4a0:	4249      	negs	r1, r1
 800a4a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a4a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	da04      	bge.n	800a4be <__ulp+0x3e>
 800a4b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a4b8:	fa41 f300 	asr.w	r3, r1, r0
 800a4bc:	e7ec      	b.n	800a498 <__ulp+0x18>
 800a4be:	f1a0 0114 	sub.w	r1, r0, #20
 800a4c2:	291e      	cmp	r1, #30
 800a4c4:	bfda      	itte	le
 800a4c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a4ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800a4ce:	2101      	movgt	r1, #1
 800a4d0:	460a      	mov	r2, r1
 800a4d2:	e7e1      	b.n	800a498 <__ulp+0x18>
 800a4d4:	7ff00000 	.word	0x7ff00000

0800a4d8 <__b2d>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	6905      	ldr	r5, [r0, #16]
 800a4dc:	f100 0714 	add.w	r7, r0, #20
 800a4e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a4e4:	1f2e      	subs	r6, r5, #4
 800a4e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f7ff fd52 	bl	8009f94 <__hi0bits>
 800a4f0:	f1c0 0320 	rsb	r3, r0, #32
 800a4f4:	280a      	cmp	r0, #10
 800a4f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a574 <__b2d+0x9c>
 800a4fa:	600b      	str	r3, [r1, #0]
 800a4fc:	dc14      	bgt.n	800a528 <__b2d+0x50>
 800a4fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800a502:	fa24 f10e 	lsr.w	r1, r4, lr
 800a506:	42b7      	cmp	r7, r6
 800a508:	ea41 030c 	orr.w	r3, r1, ip
 800a50c:	bf34      	ite	cc
 800a50e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a512:	2100      	movcs	r1, #0
 800a514:	3015      	adds	r0, #21
 800a516:	fa04 f000 	lsl.w	r0, r4, r0
 800a51a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a51e:	ea40 0201 	orr.w	r2, r0, r1
 800a522:	ec43 2b10 	vmov	d0, r2, r3
 800a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a528:	42b7      	cmp	r7, r6
 800a52a:	bf3a      	itte	cc
 800a52c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a530:	f1a5 0608 	subcc.w	r6, r5, #8
 800a534:	2100      	movcs	r1, #0
 800a536:	380b      	subs	r0, #11
 800a538:	d017      	beq.n	800a56a <__b2d+0x92>
 800a53a:	f1c0 0c20 	rsb	ip, r0, #32
 800a53e:	fa04 f500 	lsl.w	r5, r4, r0
 800a542:	42be      	cmp	r6, r7
 800a544:	fa21 f40c 	lsr.w	r4, r1, ip
 800a548:	ea45 0504 	orr.w	r5, r5, r4
 800a54c:	bf8c      	ite	hi
 800a54e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a552:	2400      	movls	r4, #0
 800a554:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a558:	fa01 f000 	lsl.w	r0, r1, r0
 800a55c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a560:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a564:	ea40 0204 	orr.w	r2, r0, r4
 800a568:	e7db      	b.n	800a522 <__b2d+0x4a>
 800a56a:	ea44 030c 	orr.w	r3, r4, ip
 800a56e:	460a      	mov	r2, r1
 800a570:	e7d7      	b.n	800a522 <__b2d+0x4a>
 800a572:	bf00      	nop
 800a574:	3ff00000 	.word	0x3ff00000

0800a578 <__d2b>:
 800a578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a57c:	4689      	mov	r9, r1
 800a57e:	2101      	movs	r1, #1
 800a580:	ec57 6b10 	vmov	r6, r7, d0
 800a584:	4690      	mov	r8, r2
 800a586:	f7ff fc0f 	bl	8009da8 <_Balloc>
 800a58a:	4604      	mov	r4, r0
 800a58c:	b930      	cbnz	r0, 800a59c <__d2b+0x24>
 800a58e:	4602      	mov	r2, r0
 800a590:	4b25      	ldr	r3, [pc, #148]	; (800a628 <__d2b+0xb0>)
 800a592:	4826      	ldr	r0, [pc, #152]	; (800a62c <__d2b+0xb4>)
 800a594:	f240 310a 	movw	r1, #778	; 0x30a
 800a598:	f000 fb0e 	bl	800abb8 <__assert_func>
 800a59c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a5a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5a4:	bb35      	cbnz	r5, 800a5f4 <__d2b+0x7c>
 800a5a6:	2e00      	cmp	r6, #0
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	d028      	beq.n	800a5fe <__d2b+0x86>
 800a5ac:	4668      	mov	r0, sp
 800a5ae:	9600      	str	r6, [sp, #0]
 800a5b0:	f7ff fd10 	bl	8009fd4 <__lo0bits>
 800a5b4:	9900      	ldr	r1, [sp, #0]
 800a5b6:	b300      	cbz	r0, 800a5fa <__d2b+0x82>
 800a5b8:	9a01      	ldr	r2, [sp, #4]
 800a5ba:	f1c0 0320 	rsb	r3, r0, #32
 800a5be:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c2:	430b      	orrs	r3, r1
 800a5c4:	40c2      	lsrs	r2, r0
 800a5c6:	6163      	str	r3, [r4, #20]
 800a5c8:	9201      	str	r2, [sp, #4]
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	61a3      	str	r3, [r4, #24]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bf14      	ite	ne
 800a5d2:	2202      	movne	r2, #2
 800a5d4:	2201      	moveq	r2, #1
 800a5d6:	6122      	str	r2, [r4, #16]
 800a5d8:	b1d5      	cbz	r5, 800a610 <__d2b+0x98>
 800a5da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5de:	4405      	add	r5, r0
 800a5e0:	f8c9 5000 	str.w	r5, [r9]
 800a5e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5e8:	f8c8 0000 	str.w	r0, [r8]
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	b003      	add	sp, #12
 800a5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5f8:	e7d5      	b.n	800a5a6 <__d2b+0x2e>
 800a5fa:	6161      	str	r1, [r4, #20]
 800a5fc:	e7e5      	b.n	800a5ca <__d2b+0x52>
 800a5fe:	a801      	add	r0, sp, #4
 800a600:	f7ff fce8 	bl	8009fd4 <__lo0bits>
 800a604:	9b01      	ldr	r3, [sp, #4]
 800a606:	6163      	str	r3, [r4, #20]
 800a608:	2201      	movs	r2, #1
 800a60a:	6122      	str	r2, [r4, #16]
 800a60c:	3020      	adds	r0, #32
 800a60e:	e7e3      	b.n	800a5d8 <__d2b+0x60>
 800a610:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a614:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a618:	f8c9 0000 	str.w	r0, [r9]
 800a61c:	6918      	ldr	r0, [r3, #16]
 800a61e:	f7ff fcb9 	bl	8009f94 <__hi0bits>
 800a622:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a626:	e7df      	b.n	800a5e8 <__d2b+0x70>
 800a628:	0800bf94 	.word	0x0800bf94
 800a62c:	0800c024 	.word	0x0800c024

0800a630 <__ratio>:
 800a630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	4688      	mov	r8, r1
 800a636:	4669      	mov	r1, sp
 800a638:	4681      	mov	r9, r0
 800a63a:	f7ff ff4d 	bl	800a4d8 <__b2d>
 800a63e:	a901      	add	r1, sp, #4
 800a640:	4640      	mov	r0, r8
 800a642:	ec55 4b10 	vmov	r4, r5, d0
 800a646:	f7ff ff47 	bl	800a4d8 <__b2d>
 800a64a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a64e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a652:	eba3 0c02 	sub.w	ip, r3, r2
 800a656:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a65a:	1a9b      	subs	r3, r3, r2
 800a65c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a660:	ec51 0b10 	vmov	r0, r1, d0
 800a664:	2b00      	cmp	r3, #0
 800a666:	bfd6      	itet	le
 800a668:	460a      	movle	r2, r1
 800a66a:	462a      	movgt	r2, r5
 800a66c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a670:	468b      	mov	fp, r1
 800a672:	462f      	mov	r7, r5
 800a674:	bfd4      	ite	le
 800a676:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a67a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a67e:	4620      	mov	r0, r4
 800a680:	ee10 2a10 	vmov	r2, s0
 800a684:	465b      	mov	r3, fp
 800a686:	4639      	mov	r1, r7
 800a688:	f7f6 f8e8 	bl	800085c <__aeabi_ddiv>
 800a68c:	ec41 0b10 	vmov	d0, r0, r1
 800a690:	b003      	add	sp, #12
 800a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a696 <__copybits>:
 800a696:	3901      	subs	r1, #1
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	1149      	asrs	r1, r1, #5
 800a69c:	6914      	ldr	r4, [r2, #16]
 800a69e:	3101      	adds	r1, #1
 800a6a0:	f102 0314 	add.w	r3, r2, #20
 800a6a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6ac:	1f05      	subs	r5, r0, #4
 800a6ae:	42a3      	cmp	r3, r4
 800a6b0:	d30c      	bcc.n	800a6cc <__copybits+0x36>
 800a6b2:	1aa3      	subs	r3, r4, r2
 800a6b4:	3b11      	subs	r3, #17
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	3211      	adds	r2, #17
 800a6bc:	42a2      	cmp	r2, r4
 800a6be:	bf88      	it	hi
 800a6c0:	2300      	movhi	r3, #0
 800a6c2:	4418      	add	r0, r3
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4288      	cmp	r0, r1
 800a6c8:	d305      	bcc.n	800a6d6 <__copybits+0x40>
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6d4:	e7eb      	b.n	800a6ae <__copybits+0x18>
 800a6d6:	f840 3b04 	str.w	r3, [r0], #4
 800a6da:	e7f4      	b.n	800a6c6 <__copybits+0x30>

0800a6dc <__any_on>:
 800a6dc:	f100 0214 	add.w	r2, r0, #20
 800a6e0:	6900      	ldr	r0, [r0, #16]
 800a6e2:	114b      	asrs	r3, r1, #5
 800a6e4:	4298      	cmp	r0, r3
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	db11      	blt.n	800a70e <__any_on+0x32>
 800a6ea:	dd0a      	ble.n	800a702 <__any_on+0x26>
 800a6ec:	f011 011f 	ands.w	r1, r1, #31
 800a6f0:	d007      	beq.n	800a702 <__any_on+0x26>
 800a6f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6f6:	fa24 f001 	lsr.w	r0, r4, r1
 800a6fa:	fa00 f101 	lsl.w	r1, r0, r1
 800a6fe:	428c      	cmp	r4, r1
 800a700:	d10b      	bne.n	800a71a <__any_on+0x3e>
 800a702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a706:	4293      	cmp	r3, r2
 800a708:	d803      	bhi.n	800a712 <__any_on+0x36>
 800a70a:	2000      	movs	r0, #0
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	4603      	mov	r3, r0
 800a710:	e7f7      	b.n	800a702 <__any_on+0x26>
 800a712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a716:	2900      	cmp	r1, #0
 800a718:	d0f5      	beq.n	800a706 <__any_on+0x2a>
 800a71a:	2001      	movs	r0, #1
 800a71c:	e7f6      	b.n	800a70c <__any_on+0x30>

0800a71e <_calloc_r>:
 800a71e:	b513      	push	{r0, r1, r4, lr}
 800a720:	434a      	muls	r2, r1
 800a722:	4611      	mov	r1, r2
 800a724:	9201      	str	r2, [sp, #4]
 800a726:	f000 f859 	bl	800a7dc <_malloc_r>
 800a72a:	4604      	mov	r4, r0
 800a72c:	b118      	cbz	r0, 800a736 <_calloc_r+0x18>
 800a72e:	9a01      	ldr	r2, [sp, #4]
 800a730:	2100      	movs	r1, #0
 800a732:	f7fc fbc9 	bl	8006ec8 <memset>
 800a736:	4620      	mov	r0, r4
 800a738:	b002      	add	sp, #8
 800a73a:	bd10      	pop	{r4, pc}

0800a73c <_free_r>:
 800a73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a73e:	2900      	cmp	r1, #0
 800a740:	d048      	beq.n	800a7d4 <_free_r+0x98>
 800a742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a746:	9001      	str	r0, [sp, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f1a1 0404 	sub.w	r4, r1, #4
 800a74e:	bfb8      	it	lt
 800a750:	18e4      	addlt	r4, r4, r3
 800a752:	f000 fa7b 	bl	800ac4c <__malloc_lock>
 800a756:	4a20      	ldr	r2, [pc, #128]	; (800a7d8 <_free_r+0x9c>)
 800a758:	9801      	ldr	r0, [sp, #4]
 800a75a:	6813      	ldr	r3, [r2, #0]
 800a75c:	4615      	mov	r5, r2
 800a75e:	b933      	cbnz	r3, 800a76e <_free_r+0x32>
 800a760:	6063      	str	r3, [r4, #4]
 800a762:	6014      	str	r4, [r2, #0]
 800a764:	b003      	add	sp, #12
 800a766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a76a:	f000 ba75 	b.w	800ac58 <__malloc_unlock>
 800a76e:	42a3      	cmp	r3, r4
 800a770:	d90b      	bls.n	800a78a <_free_r+0x4e>
 800a772:	6821      	ldr	r1, [r4, #0]
 800a774:	1862      	adds	r2, r4, r1
 800a776:	4293      	cmp	r3, r2
 800a778:	bf04      	itt	eq
 800a77a:	681a      	ldreq	r2, [r3, #0]
 800a77c:	685b      	ldreq	r3, [r3, #4]
 800a77e:	6063      	str	r3, [r4, #4]
 800a780:	bf04      	itt	eq
 800a782:	1852      	addeq	r2, r2, r1
 800a784:	6022      	streq	r2, [r4, #0]
 800a786:	602c      	str	r4, [r5, #0]
 800a788:	e7ec      	b.n	800a764 <_free_r+0x28>
 800a78a:	461a      	mov	r2, r3
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	b10b      	cbz	r3, 800a794 <_free_r+0x58>
 800a790:	42a3      	cmp	r3, r4
 800a792:	d9fa      	bls.n	800a78a <_free_r+0x4e>
 800a794:	6811      	ldr	r1, [r2, #0]
 800a796:	1855      	adds	r5, r2, r1
 800a798:	42a5      	cmp	r5, r4
 800a79a:	d10b      	bne.n	800a7b4 <_free_r+0x78>
 800a79c:	6824      	ldr	r4, [r4, #0]
 800a79e:	4421      	add	r1, r4
 800a7a0:	1854      	adds	r4, r2, r1
 800a7a2:	42a3      	cmp	r3, r4
 800a7a4:	6011      	str	r1, [r2, #0]
 800a7a6:	d1dd      	bne.n	800a764 <_free_r+0x28>
 800a7a8:	681c      	ldr	r4, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	6053      	str	r3, [r2, #4]
 800a7ae:	4421      	add	r1, r4
 800a7b0:	6011      	str	r1, [r2, #0]
 800a7b2:	e7d7      	b.n	800a764 <_free_r+0x28>
 800a7b4:	d902      	bls.n	800a7bc <_free_r+0x80>
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	6003      	str	r3, [r0, #0]
 800a7ba:	e7d3      	b.n	800a764 <_free_r+0x28>
 800a7bc:	6825      	ldr	r5, [r4, #0]
 800a7be:	1961      	adds	r1, r4, r5
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	bf04      	itt	eq
 800a7c4:	6819      	ldreq	r1, [r3, #0]
 800a7c6:	685b      	ldreq	r3, [r3, #4]
 800a7c8:	6063      	str	r3, [r4, #4]
 800a7ca:	bf04      	itt	eq
 800a7cc:	1949      	addeq	r1, r1, r5
 800a7ce:	6021      	streq	r1, [r4, #0]
 800a7d0:	6054      	str	r4, [r2, #4]
 800a7d2:	e7c7      	b.n	800a764 <_free_r+0x28>
 800a7d4:	b003      	add	sp, #12
 800a7d6:	bd30      	pop	{r4, r5, pc}
 800a7d8:	200006b4 	.word	0x200006b4

0800a7dc <_malloc_r>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	1ccd      	adds	r5, r1, #3
 800a7e0:	f025 0503 	bic.w	r5, r5, #3
 800a7e4:	3508      	adds	r5, #8
 800a7e6:	2d0c      	cmp	r5, #12
 800a7e8:	bf38      	it	cc
 800a7ea:	250c      	movcc	r5, #12
 800a7ec:	2d00      	cmp	r5, #0
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	db01      	blt.n	800a7f6 <_malloc_r+0x1a>
 800a7f2:	42a9      	cmp	r1, r5
 800a7f4:	d903      	bls.n	800a7fe <_malloc_r+0x22>
 800a7f6:	230c      	movs	r3, #12
 800a7f8:	6033      	str	r3, [r6, #0]
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7fe:	f000 fa25 	bl	800ac4c <__malloc_lock>
 800a802:	4921      	ldr	r1, [pc, #132]	; (800a888 <_malloc_r+0xac>)
 800a804:	680a      	ldr	r2, [r1, #0]
 800a806:	4614      	mov	r4, r2
 800a808:	b99c      	cbnz	r4, 800a832 <_malloc_r+0x56>
 800a80a:	4f20      	ldr	r7, [pc, #128]	; (800a88c <_malloc_r+0xb0>)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	b923      	cbnz	r3, 800a81a <_malloc_r+0x3e>
 800a810:	4621      	mov	r1, r4
 800a812:	4630      	mov	r0, r6
 800a814:	f000 f9a0 	bl	800ab58 <_sbrk_r>
 800a818:	6038      	str	r0, [r7, #0]
 800a81a:	4629      	mov	r1, r5
 800a81c:	4630      	mov	r0, r6
 800a81e:	f000 f99b 	bl	800ab58 <_sbrk_r>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	d123      	bne.n	800a86e <_malloc_r+0x92>
 800a826:	230c      	movs	r3, #12
 800a828:	6033      	str	r3, [r6, #0]
 800a82a:	4630      	mov	r0, r6
 800a82c:	f000 fa14 	bl	800ac58 <__malloc_unlock>
 800a830:	e7e3      	b.n	800a7fa <_malloc_r+0x1e>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	1b5b      	subs	r3, r3, r5
 800a836:	d417      	bmi.n	800a868 <_malloc_r+0x8c>
 800a838:	2b0b      	cmp	r3, #11
 800a83a:	d903      	bls.n	800a844 <_malloc_r+0x68>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	441c      	add	r4, r3
 800a840:	6025      	str	r5, [r4, #0]
 800a842:	e004      	b.n	800a84e <_malloc_r+0x72>
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	42a2      	cmp	r2, r4
 800a848:	bf0c      	ite	eq
 800a84a:	600b      	streq	r3, [r1, #0]
 800a84c:	6053      	strne	r3, [r2, #4]
 800a84e:	4630      	mov	r0, r6
 800a850:	f000 fa02 	bl	800ac58 <__malloc_unlock>
 800a854:	f104 000b 	add.w	r0, r4, #11
 800a858:	1d23      	adds	r3, r4, #4
 800a85a:	f020 0007 	bic.w	r0, r0, #7
 800a85e:	1ac2      	subs	r2, r0, r3
 800a860:	d0cc      	beq.n	800a7fc <_malloc_r+0x20>
 800a862:	1a1b      	subs	r3, r3, r0
 800a864:	50a3      	str	r3, [r4, r2]
 800a866:	e7c9      	b.n	800a7fc <_malloc_r+0x20>
 800a868:	4622      	mov	r2, r4
 800a86a:	6864      	ldr	r4, [r4, #4]
 800a86c:	e7cc      	b.n	800a808 <_malloc_r+0x2c>
 800a86e:	1cc4      	adds	r4, r0, #3
 800a870:	f024 0403 	bic.w	r4, r4, #3
 800a874:	42a0      	cmp	r0, r4
 800a876:	d0e3      	beq.n	800a840 <_malloc_r+0x64>
 800a878:	1a21      	subs	r1, r4, r0
 800a87a:	4630      	mov	r0, r6
 800a87c:	f000 f96c 	bl	800ab58 <_sbrk_r>
 800a880:	3001      	adds	r0, #1
 800a882:	d1dd      	bne.n	800a840 <_malloc_r+0x64>
 800a884:	e7cf      	b.n	800a826 <_malloc_r+0x4a>
 800a886:	bf00      	nop
 800a888:	200006b4 	.word	0x200006b4
 800a88c:	200006b8 	.word	0x200006b8

0800a890 <__ssputs_r>:
 800a890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a894:	688e      	ldr	r6, [r1, #8]
 800a896:	429e      	cmp	r6, r3
 800a898:	4682      	mov	sl, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	4690      	mov	r8, r2
 800a89e:	461f      	mov	r7, r3
 800a8a0:	d838      	bhi.n	800a914 <__ssputs_r+0x84>
 800a8a2:	898a      	ldrh	r2, [r1, #12]
 800a8a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8a8:	d032      	beq.n	800a910 <__ssputs_r+0x80>
 800a8aa:	6825      	ldr	r5, [r4, #0]
 800a8ac:	6909      	ldr	r1, [r1, #16]
 800a8ae:	eba5 0901 	sub.w	r9, r5, r1
 800a8b2:	6965      	ldr	r5, [r4, #20]
 800a8b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8bc:	3301      	adds	r3, #1
 800a8be:	444b      	add	r3, r9
 800a8c0:	106d      	asrs	r5, r5, #1
 800a8c2:	429d      	cmp	r5, r3
 800a8c4:	bf38      	it	cc
 800a8c6:	461d      	movcc	r5, r3
 800a8c8:	0553      	lsls	r3, r2, #21
 800a8ca:	d531      	bpl.n	800a930 <__ssputs_r+0xa0>
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	f7ff ff85 	bl	800a7dc <_malloc_r>
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	b950      	cbnz	r0, 800a8ec <__ssputs_r+0x5c>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	f8ca 3000 	str.w	r3, [sl]
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e2:	81a3      	strh	r3, [r4, #12]
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ec:	6921      	ldr	r1, [r4, #16]
 800a8ee:	464a      	mov	r2, r9
 800a8f0:	f7ff fa4c 	bl	8009d8c <memcpy>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	6126      	str	r6, [r4, #16]
 800a902:	6165      	str	r5, [r4, #20]
 800a904:	444e      	add	r6, r9
 800a906:	eba5 0509 	sub.w	r5, r5, r9
 800a90a:	6026      	str	r6, [r4, #0]
 800a90c:	60a5      	str	r5, [r4, #8]
 800a90e:	463e      	mov	r6, r7
 800a910:	42be      	cmp	r6, r7
 800a912:	d900      	bls.n	800a916 <__ssputs_r+0x86>
 800a914:	463e      	mov	r6, r7
 800a916:	4632      	mov	r2, r6
 800a918:	6820      	ldr	r0, [r4, #0]
 800a91a:	4641      	mov	r1, r8
 800a91c:	f000 f97c 	bl	800ac18 <memmove>
 800a920:	68a3      	ldr	r3, [r4, #8]
 800a922:	6822      	ldr	r2, [r4, #0]
 800a924:	1b9b      	subs	r3, r3, r6
 800a926:	4432      	add	r2, r6
 800a928:	60a3      	str	r3, [r4, #8]
 800a92a:	6022      	str	r2, [r4, #0]
 800a92c:	2000      	movs	r0, #0
 800a92e:	e7db      	b.n	800a8e8 <__ssputs_r+0x58>
 800a930:	462a      	mov	r2, r5
 800a932:	f000 f997 	bl	800ac64 <_realloc_r>
 800a936:	4606      	mov	r6, r0
 800a938:	2800      	cmp	r0, #0
 800a93a:	d1e1      	bne.n	800a900 <__ssputs_r+0x70>
 800a93c:	6921      	ldr	r1, [r4, #16]
 800a93e:	4650      	mov	r0, sl
 800a940:	f7ff fefc 	bl	800a73c <_free_r>
 800a944:	e7c7      	b.n	800a8d6 <__ssputs_r+0x46>
	...

0800a948 <_svfiprintf_r>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	4698      	mov	r8, r3
 800a94e:	898b      	ldrh	r3, [r1, #12]
 800a950:	061b      	lsls	r3, r3, #24
 800a952:	b09d      	sub	sp, #116	; 0x74
 800a954:	4607      	mov	r7, r0
 800a956:	460d      	mov	r5, r1
 800a958:	4614      	mov	r4, r2
 800a95a:	d50e      	bpl.n	800a97a <_svfiprintf_r+0x32>
 800a95c:	690b      	ldr	r3, [r1, #16]
 800a95e:	b963      	cbnz	r3, 800a97a <_svfiprintf_r+0x32>
 800a960:	2140      	movs	r1, #64	; 0x40
 800a962:	f7ff ff3b 	bl	800a7dc <_malloc_r>
 800a966:	6028      	str	r0, [r5, #0]
 800a968:	6128      	str	r0, [r5, #16]
 800a96a:	b920      	cbnz	r0, 800a976 <_svfiprintf_r+0x2e>
 800a96c:	230c      	movs	r3, #12
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	f04f 30ff 	mov.w	r0, #4294967295
 800a974:	e0d1      	b.n	800ab1a <_svfiprintf_r+0x1d2>
 800a976:	2340      	movs	r3, #64	; 0x40
 800a978:	616b      	str	r3, [r5, #20]
 800a97a:	2300      	movs	r3, #0
 800a97c:	9309      	str	r3, [sp, #36]	; 0x24
 800a97e:	2320      	movs	r3, #32
 800a980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a984:	f8cd 800c 	str.w	r8, [sp, #12]
 800a988:	2330      	movs	r3, #48	; 0x30
 800a98a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab34 <_svfiprintf_r+0x1ec>
 800a98e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a992:	f04f 0901 	mov.w	r9, #1
 800a996:	4623      	mov	r3, r4
 800a998:	469a      	mov	sl, r3
 800a99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a99e:	b10a      	cbz	r2, 800a9a4 <_svfiprintf_r+0x5c>
 800a9a0:	2a25      	cmp	r2, #37	; 0x25
 800a9a2:	d1f9      	bne.n	800a998 <_svfiprintf_r+0x50>
 800a9a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a9a8:	d00b      	beq.n	800a9c2 <_svfiprintf_r+0x7a>
 800a9aa:	465b      	mov	r3, fp
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff ff6d 	bl	800a890 <__ssputs_r>
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	f000 80aa 	beq.w	800ab10 <_svfiprintf_r+0x1c8>
 800a9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9be:	445a      	add	r2, fp
 800a9c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f000 80a2 	beq.w	800ab10 <_svfiprintf_r+0x1c8>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9d6:	f10a 0a01 	add.w	sl, sl, #1
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	9307      	str	r3, [sp, #28]
 800a9de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9e4:	4654      	mov	r4, sl
 800a9e6:	2205      	movs	r2, #5
 800a9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ec:	4851      	ldr	r0, [pc, #324]	; (800ab34 <_svfiprintf_r+0x1ec>)
 800a9ee:	f7f5 fbff 	bl	80001f0 <memchr>
 800a9f2:	9a04      	ldr	r2, [sp, #16]
 800a9f4:	b9d8      	cbnz	r0, 800aa2e <_svfiprintf_r+0xe6>
 800a9f6:	06d0      	lsls	r0, r2, #27
 800a9f8:	bf44      	itt	mi
 800a9fa:	2320      	movmi	r3, #32
 800a9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa00:	0711      	lsls	r1, r2, #28
 800aa02:	bf44      	itt	mi
 800aa04:	232b      	movmi	r3, #43	; 0x2b
 800aa06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa0a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa0e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa10:	d015      	beq.n	800aa3e <_svfiprintf_r+0xf6>
 800aa12:	9a07      	ldr	r2, [sp, #28]
 800aa14:	4654      	mov	r4, sl
 800aa16:	2000      	movs	r0, #0
 800aa18:	f04f 0c0a 	mov.w	ip, #10
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa22:	3b30      	subs	r3, #48	; 0x30
 800aa24:	2b09      	cmp	r3, #9
 800aa26:	d94e      	bls.n	800aac6 <_svfiprintf_r+0x17e>
 800aa28:	b1b0      	cbz	r0, 800aa58 <_svfiprintf_r+0x110>
 800aa2a:	9207      	str	r2, [sp, #28]
 800aa2c:	e014      	b.n	800aa58 <_svfiprintf_r+0x110>
 800aa2e:	eba0 0308 	sub.w	r3, r0, r8
 800aa32:	fa09 f303 	lsl.w	r3, r9, r3
 800aa36:	4313      	orrs	r3, r2
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	46a2      	mov	sl, r4
 800aa3c:	e7d2      	b.n	800a9e4 <_svfiprintf_r+0x9c>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	1d19      	adds	r1, r3, #4
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	9103      	str	r1, [sp, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfbb      	ittet	lt
 800aa4a:	425b      	neglt	r3, r3
 800aa4c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa50:	9307      	strge	r3, [sp, #28]
 800aa52:	9307      	strlt	r3, [sp, #28]
 800aa54:	bfb8      	it	lt
 800aa56:	9204      	strlt	r2, [sp, #16]
 800aa58:	7823      	ldrb	r3, [r4, #0]
 800aa5a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa5c:	d10c      	bne.n	800aa78 <_svfiprintf_r+0x130>
 800aa5e:	7863      	ldrb	r3, [r4, #1]
 800aa60:	2b2a      	cmp	r3, #42	; 0x2a
 800aa62:	d135      	bne.n	800aad0 <_svfiprintf_r+0x188>
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	9203      	str	r2, [sp, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bfb8      	it	lt
 800aa70:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa74:	3402      	adds	r4, #2
 800aa76:	9305      	str	r3, [sp, #20]
 800aa78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab44 <_svfiprintf_r+0x1fc>
 800aa7c:	7821      	ldrb	r1, [r4, #0]
 800aa7e:	2203      	movs	r2, #3
 800aa80:	4650      	mov	r0, sl
 800aa82:	f7f5 fbb5 	bl	80001f0 <memchr>
 800aa86:	b140      	cbz	r0, 800aa9a <_svfiprintf_r+0x152>
 800aa88:	2340      	movs	r3, #64	; 0x40
 800aa8a:	eba0 000a 	sub.w	r0, r0, sl
 800aa8e:	fa03 f000 	lsl.w	r0, r3, r0
 800aa92:	9b04      	ldr	r3, [sp, #16]
 800aa94:	4303      	orrs	r3, r0
 800aa96:	3401      	adds	r4, #1
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa9e:	4826      	ldr	r0, [pc, #152]	; (800ab38 <_svfiprintf_r+0x1f0>)
 800aaa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaa4:	2206      	movs	r2, #6
 800aaa6:	f7f5 fba3 	bl	80001f0 <memchr>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d038      	beq.n	800ab20 <_svfiprintf_r+0x1d8>
 800aaae:	4b23      	ldr	r3, [pc, #140]	; (800ab3c <_svfiprintf_r+0x1f4>)
 800aab0:	bb1b      	cbnz	r3, 800aafa <_svfiprintf_r+0x1b2>
 800aab2:	9b03      	ldr	r3, [sp, #12]
 800aab4:	3307      	adds	r3, #7
 800aab6:	f023 0307 	bic.w	r3, r3, #7
 800aaba:	3308      	adds	r3, #8
 800aabc:	9303      	str	r3, [sp, #12]
 800aabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac0:	4433      	add	r3, r6
 800aac2:	9309      	str	r3, [sp, #36]	; 0x24
 800aac4:	e767      	b.n	800a996 <_svfiprintf_r+0x4e>
 800aac6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaca:	460c      	mov	r4, r1
 800aacc:	2001      	movs	r0, #1
 800aace:	e7a5      	b.n	800aa1c <_svfiprintf_r+0xd4>
 800aad0:	2300      	movs	r3, #0
 800aad2:	3401      	adds	r4, #1
 800aad4:	9305      	str	r3, [sp, #20]
 800aad6:	4619      	mov	r1, r3
 800aad8:	f04f 0c0a 	mov.w	ip, #10
 800aadc:	4620      	mov	r0, r4
 800aade:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aae2:	3a30      	subs	r2, #48	; 0x30
 800aae4:	2a09      	cmp	r2, #9
 800aae6:	d903      	bls.n	800aaf0 <_svfiprintf_r+0x1a8>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0c5      	beq.n	800aa78 <_svfiprintf_r+0x130>
 800aaec:	9105      	str	r1, [sp, #20]
 800aaee:	e7c3      	b.n	800aa78 <_svfiprintf_r+0x130>
 800aaf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e7f0      	b.n	800aadc <_svfiprintf_r+0x194>
 800aafa:	ab03      	add	r3, sp, #12
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	462a      	mov	r2, r5
 800ab00:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <_svfiprintf_r+0x1f8>)
 800ab02:	a904      	add	r1, sp, #16
 800ab04:	4638      	mov	r0, r7
 800ab06:	f7fc fa87 	bl	8007018 <_printf_float>
 800ab0a:	1c42      	adds	r2, r0, #1
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	d1d6      	bne.n	800aabe <_svfiprintf_r+0x176>
 800ab10:	89ab      	ldrh	r3, [r5, #12]
 800ab12:	065b      	lsls	r3, r3, #25
 800ab14:	f53f af2c 	bmi.w	800a970 <_svfiprintf_r+0x28>
 800ab18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab1a:	b01d      	add	sp, #116	; 0x74
 800ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	462a      	mov	r2, r5
 800ab26:	4b06      	ldr	r3, [pc, #24]	; (800ab40 <_svfiprintf_r+0x1f8>)
 800ab28:	a904      	add	r1, sp, #16
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	f7fc fd18 	bl	8007560 <_printf_i>
 800ab30:	e7eb      	b.n	800ab0a <_svfiprintf_r+0x1c2>
 800ab32:	bf00      	nop
 800ab34:	0800c184 	.word	0x0800c184
 800ab38:	0800c18e 	.word	0x0800c18e
 800ab3c:	08007019 	.word	0x08007019
 800ab40:	0800a891 	.word	0x0800a891
 800ab44:	0800c18a 	.word	0x0800c18a

0800ab48 <nan>:
 800ab48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab50 <nan+0x8>
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	00000000 	.word	0x00000000
 800ab54:	7ff80000 	.word	0x7ff80000

0800ab58 <_sbrk_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d06      	ldr	r5, [pc, #24]	; (800ab74 <_sbrk_r+0x1c>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	602b      	str	r3, [r5, #0]
 800ab64:	f7f7 fc90 	bl	8002488 <_sbrk>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_sbrk_r+0x1a>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_sbrk_r+0x1a>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	200007f8 	.word	0x200007f8

0800ab78 <strncmp>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	b16a      	cbz	r2, 800ab98 <strncmp+0x20>
 800ab7c:	3901      	subs	r1, #1
 800ab7e:	1884      	adds	r4, r0, r2
 800ab80:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ab84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d103      	bne.n	800ab94 <strncmp+0x1c>
 800ab8c:	42a0      	cmp	r0, r4
 800ab8e:	d001      	beq.n	800ab94 <strncmp+0x1c>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1f5      	bne.n	800ab80 <strncmp+0x8>
 800ab94:	1a98      	subs	r0, r3, r2
 800ab96:	bd10      	pop	{r4, pc}
 800ab98:	4610      	mov	r0, r2
 800ab9a:	e7fc      	b.n	800ab96 <strncmp+0x1e>

0800ab9c <__ascii_wctomb>:
 800ab9c:	b149      	cbz	r1, 800abb2 <__ascii_wctomb+0x16>
 800ab9e:	2aff      	cmp	r2, #255	; 0xff
 800aba0:	bf85      	ittet	hi
 800aba2:	238a      	movhi	r3, #138	; 0x8a
 800aba4:	6003      	strhi	r3, [r0, #0]
 800aba6:	700a      	strbls	r2, [r1, #0]
 800aba8:	f04f 30ff 	movhi.w	r0, #4294967295
 800abac:	bf98      	it	ls
 800abae:	2001      	movls	r0, #1
 800abb0:	4770      	bx	lr
 800abb2:	4608      	mov	r0, r1
 800abb4:	4770      	bx	lr
	...

0800abb8 <__assert_func>:
 800abb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abba:	4614      	mov	r4, r2
 800abbc:	461a      	mov	r2, r3
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <__assert_func+0x2c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4605      	mov	r5, r0
 800abc4:	68d8      	ldr	r0, [r3, #12]
 800abc6:	b14c      	cbz	r4, 800abdc <__assert_func+0x24>
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <__assert_func+0x30>)
 800abca:	9100      	str	r1, [sp, #0]
 800abcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abd0:	4906      	ldr	r1, [pc, #24]	; (800abec <__assert_func+0x34>)
 800abd2:	462b      	mov	r3, r5
 800abd4:	f000 f80e 	bl	800abf4 <fiprintf>
 800abd8:	f000 fa84 	bl	800b0e4 <abort>
 800abdc:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <__assert_func+0x38>)
 800abde:	461c      	mov	r4, r3
 800abe0:	e7f3      	b.n	800abca <__assert_func+0x12>
 800abe2:	bf00      	nop
 800abe4:	20000010 	.word	0x20000010
 800abe8:	0800c195 	.word	0x0800c195
 800abec:	0800c1a2 	.word	0x0800c1a2
 800abf0:	0800c1d0 	.word	0x0800c1d0

0800abf4 <fiprintf>:
 800abf4:	b40e      	push	{r1, r2, r3}
 800abf6:	b503      	push	{r0, r1, lr}
 800abf8:	4601      	mov	r1, r0
 800abfa:	ab03      	add	r3, sp, #12
 800abfc:	4805      	ldr	r0, [pc, #20]	; (800ac14 <fiprintf+0x20>)
 800abfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac02:	6800      	ldr	r0, [r0, #0]
 800ac04:	9301      	str	r3, [sp, #4]
 800ac06:	f000 f87d 	bl	800ad04 <_vfiprintf_r>
 800ac0a:	b002      	add	sp, #8
 800ac0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac10:	b003      	add	sp, #12
 800ac12:	4770      	bx	lr
 800ac14:	20000010 	.word	0x20000010

0800ac18 <memmove>:
 800ac18:	4288      	cmp	r0, r1
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	eb01 0402 	add.w	r4, r1, r2
 800ac20:	d902      	bls.n	800ac28 <memmove+0x10>
 800ac22:	4284      	cmp	r4, r0
 800ac24:	4623      	mov	r3, r4
 800ac26:	d807      	bhi.n	800ac38 <memmove+0x20>
 800ac28:	1e43      	subs	r3, r0, #1
 800ac2a:	42a1      	cmp	r1, r4
 800ac2c:	d008      	beq.n	800ac40 <memmove+0x28>
 800ac2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac36:	e7f8      	b.n	800ac2a <memmove+0x12>
 800ac38:	4402      	add	r2, r0
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	428a      	cmp	r2, r1
 800ac3e:	d100      	bne.n	800ac42 <memmove+0x2a>
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac4a:	e7f7      	b.n	800ac3c <memmove+0x24>

0800ac4c <__malloc_lock>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	; (800ac54 <__malloc_lock+0x8>)
 800ac4e:	f000 bc09 	b.w	800b464 <__retarget_lock_acquire_recursive>
 800ac52:	bf00      	nop
 800ac54:	20000800 	.word	0x20000800

0800ac58 <__malloc_unlock>:
 800ac58:	4801      	ldr	r0, [pc, #4]	; (800ac60 <__malloc_unlock+0x8>)
 800ac5a:	f000 bc04 	b.w	800b466 <__retarget_lock_release_recursive>
 800ac5e:	bf00      	nop
 800ac60:	20000800 	.word	0x20000800

0800ac64 <_realloc_r>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	4607      	mov	r7, r0
 800ac68:	4614      	mov	r4, r2
 800ac6a:	460e      	mov	r6, r1
 800ac6c:	b921      	cbnz	r1, 800ac78 <_realloc_r+0x14>
 800ac6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac72:	4611      	mov	r1, r2
 800ac74:	f7ff bdb2 	b.w	800a7dc <_malloc_r>
 800ac78:	b922      	cbnz	r2, 800ac84 <_realloc_r+0x20>
 800ac7a:	f7ff fd5f 	bl	800a73c <_free_r>
 800ac7e:	4625      	mov	r5, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac84:	f000 fc54 	bl	800b530 <_malloc_usable_size_r>
 800ac88:	42a0      	cmp	r0, r4
 800ac8a:	d20f      	bcs.n	800acac <_realloc_r+0x48>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4638      	mov	r0, r7
 800ac90:	f7ff fda4 	bl	800a7dc <_malloc_r>
 800ac94:	4605      	mov	r5, r0
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d0f2      	beq.n	800ac80 <_realloc_r+0x1c>
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4622      	mov	r2, r4
 800ac9e:	f7ff f875 	bl	8009d8c <memcpy>
 800aca2:	4631      	mov	r1, r6
 800aca4:	4638      	mov	r0, r7
 800aca6:	f7ff fd49 	bl	800a73c <_free_r>
 800acaa:	e7e9      	b.n	800ac80 <_realloc_r+0x1c>
 800acac:	4635      	mov	r5, r6
 800acae:	e7e7      	b.n	800ac80 <_realloc_r+0x1c>

0800acb0 <__sfputc_r>:
 800acb0:	6893      	ldr	r3, [r2, #8]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	b410      	push	{r4}
 800acb8:	6093      	str	r3, [r2, #8]
 800acba:	da08      	bge.n	800acce <__sfputc_r+0x1e>
 800acbc:	6994      	ldr	r4, [r2, #24]
 800acbe:	42a3      	cmp	r3, r4
 800acc0:	db01      	blt.n	800acc6 <__sfputc_r+0x16>
 800acc2:	290a      	cmp	r1, #10
 800acc4:	d103      	bne.n	800acce <__sfputc_r+0x1e>
 800acc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acca:	f000 b94b 	b.w	800af64 <__swbuf_r>
 800acce:	6813      	ldr	r3, [r2, #0]
 800acd0:	1c58      	adds	r0, r3, #1
 800acd2:	6010      	str	r0, [r2, #0]
 800acd4:	7019      	strb	r1, [r3, #0]
 800acd6:	4608      	mov	r0, r1
 800acd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <__sfputs_r>:
 800acde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace0:	4606      	mov	r6, r0
 800ace2:	460f      	mov	r7, r1
 800ace4:	4614      	mov	r4, r2
 800ace6:	18d5      	adds	r5, r2, r3
 800ace8:	42ac      	cmp	r4, r5
 800acea:	d101      	bne.n	800acf0 <__sfputs_r+0x12>
 800acec:	2000      	movs	r0, #0
 800acee:	e007      	b.n	800ad00 <__sfputs_r+0x22>
 800acf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf4:	463a      	mov	r2, r7
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7ff ffda 	bl	800acb0 <__sfputc_r>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d1f3      	bne.n	800ace8 <__sfputs_r+0xa>
 800ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad04 <_vfiprintf_r>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	460d      	mov	r5, r1
 800ad0a:	b09d      	sub	sp, #116	; 0x74
 800ad0c:	4614      	mov	r4, r2
 800ad0e:	4698      	mov	r8, r3
 800ad10:	4606      	mov	r6, r0
 800ad12:	b118      	cbz	r0, 800ad1c <_vfiprintf_r+0x18>
 800ad14:	6983      	ldr	r3, [r0, #24]
 800ad16:	b90b      	cbnz	r3, 800ad1c <_vfiprintf_r+0x18>
 800ad18:	f000 fb06 	bl	800b328 <__sinit>
 800ad1c:	4b89      	ldr	r3, [pc, #548]	; (800af44 <_vfiprintf_r+0x240>)
 800ad1e:	429d      	cmp	r5, r3
 800ad20:	d11b      	bne.n	800ad5a <_vfiprintf_r+0x56>
 800ad22:	6875      	ldr	r5, [r6, #4]
 800ad24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad26:	07d9      	lsls	r1, r3, #31
 800ad28:	d405      	bmi.n	800ad36 <_vfiprintf_r+0x32>
 800ad2a:	89ab      	ldrh	r3, [r5, #12]
 800ad2c:	059a      	lsls	r2, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <_vfiprintf_r+0x32>
 800ad30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad32:	f000 fb97 	bl	800b464 <__retarget_lock_acquire_recursive>
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	071b      	lsls	r3, r3, #28
 800ad3a:	d501      	bpl.n	800ad40 <_vfiprintf_r+0x3c>
 800ad3c:	692b      	ldr	r3, [r5, #16]
 800ad3e:	b9eb      	cbnz	r3, 800ad7c <_vfiprintf_r+0x78>
 800ad40:	4629      	mov	r1, r5
 800ad42:	4630      	mov	r0, r6
 800ad44:	f000 f960 	bl	800b008 <__swsetup_r>
 800ad48:	b1c0      	cbz	r0, 800ad7c <_vfiprintf_r+0x78>
 800ad4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad4c:	07dc      	lsls	r4, r3, #31
 800ad4e:	d50e      	bpl.n	800ad6e <_vfiprintf_r+0x6a>
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295
 800ad54:	b01d      	add	sp, #116	; 0x74
 800ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5a:	4b7b      	ldr	r3, [pc, #492]	; (800af48 <_vfiprintf_r+0x244>)
 800ad5c:	429d      	cmp	r5, r3
 800ad5e:	d101      	bne.n	800ad64 <_vfiprintf_r+0x60>
 800ad60:	68b5      	ldr	r5, [r6, #8]
 800ad62:	e7df      	b.n	800ad24 <_vfiprintf_r+0x20>
 800ad64:	4b79      	ldr	r3, [pc, #484]	; (800af4c <_vfiprintf_r+0x248>)
 800ad66:	429d      	cmp	r5, r3
 800ad68:	bf08      	it	eq
 800ad6a:	68f5      	ldreq	r5, [r6, #12]
 800ad6c:	e7da      	b.n	800ad24 <_vfiprintf_r+0x20>
 800ad6e:	89ab      	ldrh	r3, [r5, #12]
 800ad70:	0598      	lsls	r0, r3, #22
 800ad72:	d4ed      	bmi.n	800ad50 <_vfiprintf_r+0x4c>
 800ad74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad76:	f000 fb76 	bl	800b466 <__retarget_lock_release_recursive>
 800ad7a:	e7e9      	b.n	800ad50 <_vfiprintf_r+0x4c>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad80:	2320      	movs	r3, #32
 800ad82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad8a:	2330      	movs	r3, #48	; 0x30
 800ad8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af50 <_vfiprintf_r+0x24c>
 800ad90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad94:	f04f 0901 	mov.w	r9, #1
 800ad98:	4623      	mov	r3, r4
 800ad9a:	469a      	mov	sl, r3
 800ad9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada0:	b10a      	cbz	r2, 800ada6 <_vfiprintf_r+0xa2>
 800ada2:	2a25      	cmp	r2, #37	; 0x25
 800ada4:	d1f9      	bne.n	800ad9a <_vfiprintf_r+0x96>
 800ada6:	ebba 0b04 	subs.w	fp, sl, r4
 800adaa:	d00b      	beq.n	800adc4 <_vfiprintf_r+0xc0>
 800adac:	465b      	mov	r3, fp
 800adae:	4622      	mov	r2, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	4630      	mov	r0, r6
 800adb4:	f7ff ff93 	bl	800acde <__sfputs_r>
 800adb8:	3001      	adds	r0, #1
 800adba:	f000 80aa 	beq.w	800af12 <_vfiprintf_r+0x20e>
 800adbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc0:	445a      	add	r2, fp
 800adc2:	9209      	str	r2, [sp, #36]	; 0x24
 800adc4:	f89a 3000 	ldrb.w	r3, [sl]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 80a2 	beq.w	800af12 <_vfiprintf_r+0x20e>
 800adce:	2300      	movs	r3, #0
 800add0:	f04f 32ff 	mov.w	r2, #4294967295
 800add4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800add8:	f10a 0a01 	add.w	sl, sl, #1
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	9307      	str	r3, [sp, #28]
 800ade0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ade4:	931a      	str	r3, [sp, #104]	; 0x68
 800ade6:	4654      	mov	r4, sl
 800ade8:	2205      	movs	r2, #5
 800adea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adee:	4858      	ldr	r0, [pc, #352]	; (800af50 <_vfiprintf_r+0x24c>)
 800adf0:	f7f5 f9fe 	bl	80001f0 <memchr>
 800adf4:	9a04      	ldr	r2, [sp, #16]
 800adf6:	b9d8      	cbnz	r0, 800ae30 <_vfiprintf_r+0x12c>
 800adf8:	06d1      	lsls	r1, r2, #27
 800adfa:	bf44      	itt	mi
 800adfc:	2320      	movmi	r3, #32
 800adfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae02:	0713      	lsls	r3, r2, #28
 800ae04:	bf44      	itt	mi
 800ae06:	232b      	movmi	r3, #43	; 0x2b
 800ae08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae10:	2b2a      	cmp	r3, #42	; 0x2a
 800ae12:	d015      	beq.n	800ae40 <_vfiprintf_r+0x13c>
 800ae14:	9a07      	ldr	r2, [sp, #28]
 800ae16:	4654      	mov	r4, sl
 800ae18:	2000      	movs	r0, #0
 800ae1a:	f04f 0c0a 	mov.w	ip, #10
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae24:	3b30      	subs	r3, #48	; 0x30
 800ae26:	2b09      	cmp	r3, #9
 800ae28:	d94e      	bls.n	800aec8 <_vfiprintf_r+0x1c4>
 800ae2a:	b1b0      	cbz	r0, 800ae5a <_vfiprintf_r+0x156>
 800ae2c:	9207      	str	r2, [sp, #28]
 800ae2e:	e014      	b.n	800ae5a <_vfiprintf_r+0x156>
 800ae30:	eba0 0308 	sub.w	r3, r0, r8
 800ae34:	fa09 f303 	lsl.w	r3, r9, r3
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	9304      	str	r3, [sp, #16]
 800ae3c:	46a2      	mov	sl, r4
 800ae3e:	e7d2      	b.n	800ade6 <_vfiprintf_r+0xe2>
 800ae40:	9b03      	ldr	r3, [sp, #12]
 800ae42:	1d19      	adds	r1, r3, #4
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	9103      	str	r1, [sp, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	bfbb      	ittet	lt
 800ae4c:	425b      	neglt	r3, r3
 800ae4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae52:	9307      	strge	r3, [sp, #28]
 800ae54:	9307      	strlt	r3, [sp, #28]
 800ae56:	bfb8      	it	lt
 800ae58:	9204      	strlt	r2, [sp, #16]
 800ae5a:	7823      	ldrb	r3, [r4, #0]
 800ae5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae5e:	d10c      	bne.n	800ae7a <_vfiprintf_r+0x176>
 800ae60:	7863      	ldrb	r3, [r4, #1]
 800ae62:	2b2a      	cmp	r3, #42	; 0x2a
 800ae64:	d135      	bne.n	800aed2 <_vfiprintf_r+0x1ce>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	1d1a      	adds	r2, r3, #4
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	9203      	str	r2, [sp, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfb8      	it	lt
 800ae72:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae76:	3402      	adds	r4, #2
 800ae78:	9305      	str	r3, [sp, #20]
 800ae7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af60 <_vfiprintf_r+0x25c>
 800ae7e:	7821      	ldrb	r1, [r4, #0]
 800ae80:	2203      	movs	r2, #3
 800ae82:	4650      	mov	r0, sl
 800ae84:	f7f5 f9b4 	bl	80001f0 <memchr>
 800ae88:	b140      	cbz	r0, 800ae9c <_vfiprintf_r+0x198>
 800ae8a:	2340      	movs	r3, #64	; 0x40
 800ae8c:	eba0 000a 	sub.w	r0, r0, sl
 800ae90:	fa03 f000 	lsl.w	r0, r3, r0
 800ae94:	9b04      	ldr	r3, [sp, #16]
 800ae96:	4303      	orrs	r3, r0
 800ae98:	3401      	adds	r4, #1
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea0:	482c      	ldr	r0, [pc, #176]	; (800af54 <_vfiprintf_r+0x250>)
 800aea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aea6:	2206      	movs	r2, #6
 800aea8:	f7f5 f9a2 	bl	80001f0 <memchr>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d03f      	beq.n	800af30 <_vfiprintf_r+0x22c>
 800aeb0:	4b29      	ldr	r3, [pc, #164]	; (800af58 <_vfiprintf_r+0x254>)
 800aeb2:	bb1b      	cbnz	r3, 800aefc <_vfiprintf_r+0x1f8>
 800aeb4:	9b03      	ldr	r3, [sp, #12]
 800aeb6:	3307      	adds	r3, #7
 800aeb8:	f023 0307 	bic.w	r3, r3, #7
 800aebc:	3308      	adds	r3, #8
 800aebe:	9303      	str	r3, [sp, #12]
 800aec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec2:	443b      	add	r3, r7
 800aec4:	9309      	str	r3, [sp, #36]	; 0x24
 800aec6:	e767      	b.n	800ad98 <_vfiprintf_r+0x94>
 800aec8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aecc:	460c      	mov	r4, r1
 800aece:	2001      	movs	r0, #1
 800aed0:	e7a5      	b.n	800ae1e <_vfiprintf_r+0x11a>
 800aed2:	2300      	movs	r3, #0
 800aed4:	3401      	adds	r4, #1
 800aed6:	9305      	str	r3, [sp, #20]
 800aed8:	4619      	mov	r1, r3
 800aeda:	f04f 0c0a 	mov.w	ip, #10
 800aede:	4620      	mov	r0, r4
 800aee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee4:	3a30      	subs	r2, #48	; 0x30
 800aee6:	2a09      	cmp	r2, #9
 800aee8:	d903      	bls.n	800aef2 <_vfiprintf_r+0x1ee>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d0c5      	beq.n	800ae7a <_vfiprintf_r+0x176>
 800aeee:	9105      	str	r1, [sp, #20]
 800aef0:	e7c3      	b.n	800ae7a <_vfiprintf_r+0x176>
 800aef2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef6:	4604      	mov	r4, r0
 800aef8:	2301      	movs	r3, #1
 800aefa:	e7f0      	b.n	800aede <_vfiprintf_r+0x1da>
 800aefc:	ab03      	add	r3, sp, #12
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	462a      	mov	r2, r5
 800af02:	4b16      	ldr	r3, [pc, #88]	; (800af5c <_vfiprintf_r+0x258>)
 800af04:	a904      	add	r1, sp, #16
 800af06:	4630      	mov	r0, r6
 800af08:	f7fc f886 	bl	8007018 <_printf_float>
 800af0c:	4607      	mov	r7, r0
 800af0e:	1c78      	adds	r0, r7, #1
 800af10:	d1d6      	bne.n	800aec0 <_vfiprintf_r+0x1bc>
 800af12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af14:	07d9      	lsls	r1, r3, #31
 800af16:	d405      	bmi.n	800af24 <_vfiprintf_r+0x220>
 800af18:	89ab      	ldrh	r3, [r5, #12]
 800af1a:	059a      	lsls	r2, r3, #22
 800af1c:	d402      	bmi.n	800af24 <_vfiprintf_r+0x220>
 800af1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af20:	f000 faa1 	bl	800b466 <__retarget_lock_release_recursive>
 800af24:	89ab      	ldrh	r3, [r5, #12]
 800af26:	065b      	lsls	r3, r3, #25
 800af28:	f53f af12 	bmi.w	800ad50 <_vfiprintf_r+0x4c>
 800af2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af2e:	e711      	b.n	800ad54 <_vfiprintf_r+0x50>
 800af30:	ab03      	add	r3, sp, #12
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	462a      	mov	r2, r5
 800af36:	4b09      	ldr	r3, [pc, #36]	; (800af5c <_vfiprintf_r+0x258>)
 800af38:	a904      	add	r1, sp, #16
 800af3a:	4630      	mov	r0, r6
 800af3c:	f7fc fb10 	bl	8007560 <_printf_i>
 800af40:	e7e4      	b.n	800af0c <_vfiprintf_r+0x208>
 800af42:	bf00      	nop
 800af44:	0800c1f4 	.word	0x0800c1f4
 800af48:	0800c214 	.word	0x0800c214
 800af4c:	0800c1d4 	.word	0x0800c1d4
 800af50:	0800c184 	.word	0x0800c184
 800af54:	0800c18e 	.word	0x0800c18e
 800af58:	08007019 	.word	0x08007019
 800af5c:	0800acdf 	.word	0x0800acdf
 800af60:	0800c18a 	.word	0x0800c18a

0800af64 <__swbuf_r>:
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	460e      	mov	r6, r1
 800af68:	4614      	mov	r4, r2
 800af6a:	4605      	mov	r5, r0
 800af6c:	b118      	cbz	r0, 800af76 <__swbuf_r+0x12>
 800af6e:	6983      	ldr	r3, [r0, #24]
 800af70:	b90b      	cbnz	r3, 800af76 <__swbuf_r+0x12>
 800af72:	f000 f9d9 	bl	800b328 <__sinit>
 800af76:	4b21      	ldr	r3, [pc, #132]	; (800affc <__swbuf_r+0x98>)
 800af78:	429c      	cmp	r4, r3
 800af7a:	d12b      	bne.n	800afd4 <__swbuf_r+0x70>
 800af7c:	686c      	ldr	r4, [r5, #4]
 800af7e:	69a3      	ldr	r3, [r4, #24]
 800af80:	60a3      	str	r3, [r4, #8]
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	071a      	lsls	r2, r3, #28
 800af86:	d52f      	bpl.n	800afe8 <__swbuf_r+0x84>
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	b36b      	cbz	r3, 800afe8 <__swbuf_r+0x84>
 800af8c:	6923      	ldr	r3, [r4, #16]
 800af8e:	6820      	ldr	r0, [r4, #0]
 800af90:	1ac0      	subs	r0, r0, r3
 800af92:	6963      	ldr	r3, [r4, #20]
 800af94:	b2f6      	uxtb	r6, r6
 800af96:	4283      	cmp	r3, r0
 800af98:	4637      	mov	r7, r6
 800af9a:	dc04      	bgt.n	800afa6 <__swbuf_r+0x42>
 800af9c:	4621      	mov	r1, r4
 800af9e:	4628      	mov	r0, r5
 800afa0:	f000 f92e 	bl	800b200 <_fflush_r>
 800afa4:	bb30      	cbnz	r0, 800aff4 <__swbuf_r+0x90>
 800afa6:	68a3      	ldr	r3, [r4, #8]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	60a3      	str	r3, [r4, #8]
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	6022      	str	r2, [r4, #0]
 800afb2:	701e      	strb	r6, [r3, #0]
 800afb4:	6963      	ldr	r3, [r4, #20]
 800afb6:	3001      	adds	r0, #1
 800afb8:	4283      	cmp	r3, r0
 800afba:	d004      	beq.n	800afc6 <__swbuf_r+0x62>
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	07db      	lsls	r3, r3, #31
 800afc0:	d506      	bpl.n	800afd0 <__swbuf_r+0x6c>
 800afc2:	2e0a      	cmp	r6, #10
 800afc4:	d104      	bne.n	800afd0 <__swbuf_r+0x6c>
 800afc6:	4621      	mov	r1, r4
 800afc8:	4628      	mov	r0, r5
 800afca:	f000 f919 	bl	800b200 <_fflush_r>
 800afce:	b988      	cbnz	r0, 800aff4 <__swbuf_r+0x90>
 800afd0:	4638      	mov	r0, r7
 800afd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd4:	4b0a      	ldr	r3, [pc, #40]	; (800b000 <__swbuf_r+0x9c>)
 800afd6:	429c      	cmp	r4, r3
 800afd8:	d101      	bne.n	800afde <__swbuf_r+0x7a>
 800afda:	68ac      	ldr	r4, [r5, #8]
 800afdc:	e7cf      	b.n	800af7e <__swbuf_r+0x1a>
 800afde:	4b09      	ldr	r3, [pc, #36]	; (800b004 <__swbuf_r+0xa0>)
 800afe0:	429c      	cmp	r4, r3
 800afe2:	bf08      	it	eq
 800afe4:	68ec      	ldreq	r4, [r5, #12]
 800afe6:	e7ca      	b.n	800af7e <__swbuf_r+0x1a>
 800afe8:	4621      	mov	r1, r4
 800afea:	4628      	mov	r0, r5
 800afec:	f000 f80c 	bl	800b008 <__swsetup_r>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d0cb      	beq.n	800af8c <__swbuf_r+0x28>
 800aff4:	f04f 37ff 	mov.w	r7, #4294967295
 800aff8:	e7ea      	b.n	800afd0 <__swbuf_r+0x6c>
 800affa:	bf00      	nop
 800affc:	0800c1f4 	.word	0x0800c1f4
 800b000:	0800c214 	.word	0x0800c214
 800b004:	0800c1d4 	.word	0x0800c1d4

0800b008 <__swsetup_r>:
 800b008:	4b32      	ldr	r3, [pc, #200]	; (800b0d4 <__swsetup_r+0xcc>)
 800b00a:	b570      	push	{r4, r5, r6, lr}
 800b00c:	681d      	ldr	r5, [r3, #0]
 800b00e:	4606      	mov	r6, r0
 800b010:	460c      	mov	r4, r1
 800b012:	b125      	cbz	r5, 800b01e <__swsetup_r+0x16>
 800b014:	69ab      	ldr	r3, [r5, #24]
 800b016:	b913      	cbnz	r3, 800b01e <__swsetup_r+0x16>
 800b018:	4628      	mov	r0, r5
 800b01a:	f000 f985 	bl	800b328 <__sinit>
 800b01e:	4b2e      	ldr	r3, [pc, #184]	; (800b0d8 <__swsetup_r+0xd0>)
 800b020:	429c      	cmp	r4, r3
 800b022:	d10f      	bne.n	800b044 <__swsetup_r+0x3c>
 800b024:	686c      	ldr	r4, [r5, #4]
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b02c:	0719      	lsls	r1, r3, #28
 800b02e:	d42c      	bmi.n	800b08a <__swsetup_r+0x82>
 800b030:	06dd      	lsls	r5, r3, #27
 800b032:	d411      	bmi.n	800b058 <__swsetup_r+0x50>
 800b034:	2309      	movs	r3, #9
 800b036:	6033      	str	r3, [r6, #0]
 800b038:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	e03e      	b.n	800b0c2 <__swsetup_r+0xba>
 800b044:	4b25      	ldr	r3, [pc, #148]	; (800b0dc <__swsetup_r+0xd4>)
 800b046:	429c      	cmp	r4, r3
 800b048:	d101      	bne.n	800b04e <__swsetup_r+0x46>
 800b04a:	68ac      	ldr	r4, [r5, #8]
 800b04c:	e7eb      	b.n	800b026 <__swsetup_r+0x1e>
 800b04e:	4b24      	ldr	r3, [pc, #144]	; (800b0e0 <__swsetup_r+0xd8>)
 800b050:	429c      	cmp	r4, r3
 800b052:	bf08      	it	eq
 800b054:	68ec      	ldreq	r4, [r5, #12]
 800b056:	e7e6      	b.n	800b026 <__swsetup_r+0x1e>
 800b058:	0758      	lsls	r0, r3, #29
 800b05a:	d512      	bpl.n	800b082 <__swsetup_r+0x7a>
 800b05c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b05e:	b141      	cbz	r1, 800b072 <__swsetup_r+0x6a>
 800b060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b064:	4299      	cmp	r1, r3
 800b066:	d002      	beq.n	800b06e <__swsetup_r+0x66>
 800b068:	4630      	mov	r0, r6
 800b06a:	f7ff fb67 	bl	800a73c <_free_r>
 800b06e:	2300      	movs	r3, #0
 800b070:	6363      	str	r3, [r4, #52]	; 0x34
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	2300      	movs	r3, #0
 800b07c:	6063      	str	r3, [r4, #4]
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f043 0308 	orr.w	r3, r3, #8
 800b088:	81a3      	strh	r3, [r4, #12]
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	b94b      	cbnz	r3, 800b0a2 <__swsetup_r+0x9a>
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b098:	d003      	beq.n	800b0a2 <__swsetup_r+0x9a>
 800b09a:	4621      	mov	r1, r4
 800b09c:	4630      	mov	r0, r6
 800b09e:	f000 fa07 	bl	800b4b0 <__smakebuf_r>
 800b0a2:	89a0      	ldrh	r0, [r4, #12]
 800b0a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0a8:	f010 0301 	ands.w	r3, r0, #1
 800b0ac:	d00a      	beq.n	800b0c4 <__swsetup_r+0xbc>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60a3      	str	r3, [r4, #8]
 800b0b2:	6963      	ldr	r3, [r4, #20]
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	61a3      	str	r3, [r4, #24]
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	b943      	cbnz	r3, 800b0ce <__swsetup_r+0xc6>
 800b0bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0c0:	d1ba      	bne.n	800b038 <__swsetup_r+0x30>
 800b0c2:	bd70      	pop	{r4, r5, r6, pc}
 800b0c4:	0781      	lsls	r1, r0, #30
 800b0c6:	bf58      	it	pl
 800b0c8:	6963      	ldrpl	r3, [r4, #20]
 800b0ca:	60a3      	str	r3, [r4, #8]
 800b0cc:	e7f4      	b.n	800b0b8 <__swsetup_r+0xb0>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	e7f7      	b.n	800b0c2 <__swsetup_r+0xba>
 800b0d2:	bf00      	nop
 800b0d4:	20000010 	.word	0x20000010
 800b0d8:	0800c1f4 	.word	0x0800c1f4
 800b0dc:	0800c214 	.word	0x0800c214
 800b0e0:	0800c1d4 	.word	0x0800c1d4

0800b0e4 <abort>:
 800b0e4:	b508      	push	{r3, lr}
 800b0e6:	2006      	movs	r0, #6
 800b0e8:	f000 fa52 	bl	800b590 <raise>
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	f7f7 f953 	bl	8002398 <_exit>
	...

0800b0f4 <__sflush_r>:
 800b0f4:	898a      	ldrh	r2, [r1, #12]
 800b0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fa:	4605      	mov	r5, r0
 800b0fc:	0710      	lsls	r0, r2, #28
 800b0fe:	460c      	mov	r4, r1
 800b100:	d458      	bmi.n	800b1b4 <__sflush_r+0xc0>
 800b102:	684b      	ldr	r3, [r1, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	dc05      	bgt.n	800b114 <__sflush_r+0x20>
 800b108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dc02      	bgt.n	800b114 <__sflush_r+0x20>
 800b10e:	2000      	movs	r0, #0
 800b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b116:	2e00      	cmp	r6, #0
 800b118:	d0f9      	beq.n	800b10e <__sflush_r+0x1a>
 800b11a:	2300      	movs	r3, #0
 800b11c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b120:	682f      	ldr	r7, [r5, #0]
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	d032      	beq.n	800b18c <__sflush_r+0x98>
 800b126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	075a      	lsls	r2, r3, #29
 800b12c:	d505      	bpl.n	800b13a <__sflush_r+0x46>
 800b12e:	6863      	ldr	r3, [r4, #4]
 800b130:	1ac0      	subs	r0, r0, r3
 800b132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b134:	b10b      	cbz	r3, 800b13a <__sflush_r+0x46>
 800b136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b138:	1ac0      	subs	r0, r0, r3
 800b13a:	2300      	movs	r3, #0
 800b13c:	4602      	mov	r2, r0
 800b13e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b140:	6a21      	ldr	r1, [r4, #32]
 800b142:	4628      	mov	r0, r5
 800b144:	47b0      	blx	r6
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	d106      	bne.n	800b15a <__sflush_r+0x66>
 800b14c:	6829      	ldr	r1, [r5, #0]
 800b14e:	291d      	cmp	r1, #29
 800b150:	d82c      	bhi.n	800b1ac <__sflush_r+0xb8>
 800b152:	4a2a      	ldr	r2, [pc, #168]	; (800b1fc <__sflush_r+0x108>)
 800b154:	40ca      	lsrs	r2, r1
 800b156:	07d6      	lsls	r6, r2, #31
 800b158:	d528      	bpl.n	800b1ac <__sflush_r+0xb8>
 800b15a:	2200      	movs	r2, #0
 800b15c:	6062      	str	r2, [r4, #4]
 800b15e:	04d9      	lsls	r1, r3, #19
 800b160:	6922      	ldr	r2, [r4, #16]
 800b162:	6022      	str	r2, [r4, #0]
 800b164:	d504      	bpl.n	800b170 <__sflush_r+0x7c>
 800b166:	1c42      	adds	r2, r0, #1
 800b168:	d101      	bne.n	800b16e <__sflush_r+0x7a>
 800b16a:	682b      	ldr	r3, [r5, #0]
 800b16c:	b903      	cbnz	r3, 800b170 <__sflush_r+0x7c>
 800b16e:	6560      	str	r0, [r4, #84]	; 0x54
 800b170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b172:	602f      	str	r7, [r5, #0]
 800b174:	2900      	cmp	r1, #0
 800b176:	d0ca      	beq.n	800b10e <__sflush_r+0x1a>
 800b178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b17c:	4299      	cmp	r1, r3
 800b17e:	d002      	beq.n	800b186 <__sflush_r+0x92>
 800b180:	4628      	mov	r0, r5
 800b182:	f7ff fadb 	bl	800a73c <_free_r>
 800b186:	2000      	movs	r0, #0
 800b188:	6360      	str	r0, [r4, #52]	; 0x34
 800b18a:	e7c1      	b.n	800b110 <__sflush_r+0x1c>
 800b18c:	6a21      	ldr	r1, [r4, #32]
 800b18e:	2301      	movs	r3, #1
 800b190:	4628      	mov	r0, r5
 800b192:	47b0      	blx	r6
 800b194:	1c41      	adds	r1, r0, #1
 800b196:	d1c7      	bne.n	800b128 <__sflush_r+0x34>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d0c4      	beq.n	800b128 <__sflush_r+0x34>
 800b19e:	2b1d      	cmp	r3, #29
 800b1a0:	d001      	beq.n	800b1a6 <__sflush_r+0xb2>
 800b1a2:	2b16      	cmp	r3, #22
 800b1a4:	d101      	bne.n	800b1aa <__sflush_r+0xb6>
 800b1a6:	602f      	str	r7, [r5, #0]
 800b1a8:	e7b1      	b.n	800b10e <__sflush_r+0x1a>
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b0:	81a3      	strh	r3, [r4, #12]
 800b1b2:	e7ad      	b.n	800b110 <__sflush_r+0x1c>
 800b1b4:	690f      	ldr	r7, [r1, #16]
 800b1b6:	2f00      	cmp	r7, #0
 800b1b8:	d0a9      	beq.n	800b10e <__sflush_r+0x1a>
 800b1ba:	0793      	lsls	r3, r2, #30
 800b1bc:	680e      	ldr	r6, [r1, #0]
 800b1be:	bf08      	it	eq
 800b1c0:	694b      	ldreq	r3, [r1, #20]
 800b1c2:	600f      	str	r7, [r1, #0]
 800b1c4:	bf18      	it	ne
 800b1c6:	2300      	movne	r3, #0
 800b1c8:	eba6 0807 	sub.w	r8, r6, r7
 800b1cc:	608b      	str	r3, [r1, #8]
 800b1ce:	f1b8 0f00 	cmp.w	r8, #0
 800b1d2:	dd9c      	ble.n	800b10e <__sflush_r+0x1a>
 800b1d4:	6a21      	ldr	r1, [r4, #32]
 800b1d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1d8:	4643      	mov	r3, r8
 800b1da:	463a      	mov	r2, r7
 800b1dc:	4628      	mov	r0, r5
 800b1de:	47b0      	blx	r6
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	dc06      	bgt.n	800b1f2 <__sflush_r+0xfe>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ea:	81a3      	strh	r3, [r4, #12]
 800b1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f0:	e78e      	b.n	800b110 <__sflush_r+0x1c>
 800b1f2:	4407      	add	r7, r0
 800b1f4:	eba8 0800 	sub.w	r8, r8, r0
 800b1f8:	e7e9      	b.n	800b1ce <__sflush_r+0xda>
 800b1fa:	bf00      	nop
 800b1fc:	20400001 	.word	0x20400001

0800b200 <_fflush_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	690b      	ldr	r3, [r1, #16]
 800b204:	4605      	mov	r5, r0
 800b206:	460c      	mov	r4, r1
 800b208:	b913      	cbnz	r3, 800b210 <_fflush_r+0x10>
 800b20a:	2500      	movs	r5, #0
 800b20c:	4628      	mov	r0, r5
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	b118      	cbz	r0, 800b21a <_fflush_r+0x1a>
 800b212:	6983      	ldr	r3, [r0, #24]
 800b214:	b90b      	cbnz	r3, 800b21a <_fflush_r+0x1a>
 800b216:	f000 f887 	bl	800b328 <__sinit>
 800b21a:	4b14      	ldr	r3, [pc, #80]	; (800b26c <_fflush_r+0x6c>)
 800b21c:	429c      	cmp	r4, r3
 800b21e:	d11b      	bne.n	800b258 <_fflush_r+0x58>
 800b220:	686c      	ldr	r4, [r5, #4]
 800b222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0ef      	beq.n	800b20a <_fflush_r+0xa>
 800b22a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b22c:	07d0      	lsls	r0, r2, #31
 800b22e:	d404      	bmi.n	800b23a <_fflush_r+0x3a>
 800b230:	0599      	lsls	r1, r3, #22
 800b232:	d402      	bmi.n	800b23a <_fflush_r+0x3a>
 800b234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b236:	f000 f915 	bl	800b464 <__retarget_lock_acquire_recursive>
 800b23a:	4628      	mov	r0, r5
 800b23c:	4621      	mov	r1, r4
 800b23e:	f7ff ff59 	bl	800b0f4 <__sflush_r>
 800b242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b244:	07da      	lsls	r2, r3, #31
 800b246:	4605      	mov	r5, r0
 800b248:	d4e0      	bmi.n	800b20c <_fflush_r+0xc>
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	059b      	lsls	r3, r3, #22
 800b24e:	d4dd      	bmi.n	800b20c <_fflush_r+0xc>
 800b250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b252:	f000 f908 	bl	800b466 <__retarget_lock_release_recursive>
 800b256:	e7d9      	b.n	800b20c <_fflush_r+0xc>
 800b258:	4b05      	ldr	r3, [pc, #20]	; (800b270 <_fflush_r+0x70>)
 800b25a:	429c      	cmp	r4, r3
 800b25c:	d101      	bne.n	800b262 <_fflush_r+0x62>
 800b25e:	68ac      	ldr	r4, [r5, #8]
 800b260:	e7df      	b.n	800b222 <_fflush_r+0x22>
 800b262:	4b04      	ldr	r3, [pc, #16]	; (800b274 <_fflush_r+0x74>)
 800b264:	429c      	cmp	r4, r3
 800b266:	bf08      	it	eq
 800b268:	68ec      	ldreq	r4, [r5, #12]
 800b26a:	e7da      	b.n	800b222 <_fflush_r+0x22>
 800b26c:	0800c1f4 	.word	0x0800c1f4
 800b270:	0800c214 	.word	0x0800c214
 800b274:	0800c1d4 	.word	0x0800c1d4

0800b278 <std>:
 800b278:	2300      	movs	r3, #0
 800b27a:	b510      	push	{r4, lr}
 800b27c:	4604      	mov	r4, r0
 800b27e:	e9c0 3300 	strd	r3, r3, [r0]
 800b282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b286:	6083      	str	r3, [r0, #8]
 800b288:	8181      	strh	r1, [r0, #12]
 800b28a:	6643      	str	r3, [r0, #100]	; 0x64
 800b28c:	81c2      	strh	r2, [r0, #14]
 800b28e:	6183      	str	r3, [r0, #24]
 800b290:	4619      	mov	r1, r3
 800b292:	2208      	movs	r2, #8
 800b294:	305c      	adds	r0, #92	; 0x5c
 800b296:	f7fb fe17 	bl	8006ec8 <memset>
 800b29a:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <std+0x38>)
 800b29c:	6263      	str	r3, [r4, #36]	; 0x24
 800b29e:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <std+0x3c>)
 800b2a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2a2:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <std+0x40>)
 800b2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2a6:	4b05      	ldr	r3, [pc, #20]	; (800b2bc <std+0x44>)
 800b2a8:	6224      	str	r4, [r4, #32]
 800b2aa:	6323      	str	r3, [r4, #48]	; 0x30
 800b2ac:	bd10      	pop	{r4, pc}
 800b2ae:	bf00      	nop
 800b2b0:	0800b5c9 	.word	0x0800b5c9
 800b2b4:	0800b5eb 	.word	0x0800b5eb
 800b2b8:	0800b623 	.word	0x0800b623
 800b2bc:	0800b647 	.word	0x0800b647

0800b2c0 <_cleanup_r>:
 800b2c0:	4901      	ldr	r1, [pc, #4]	; (800b2c8 <_cleanup_r+0x8>)
 800b2c2:	f000 b8af 	b.w	800b424 <_fwalk_reent>
 800b2c6:	bf00      	nop
 800b2c8:	0800b201 	.word	0x0800b201

0800b2cc <__sfmoreglue>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	1e4a      	subs	r2, r1, #1
 800b2d0:	2568      	movs	r5, #104	; 0x68
 800b2d2:	4355      	muls	r5, r2
 800b2d4:	460e      	mov	r6, r1
 800b2d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2da:	f7ff fa7f 	bl	800a7dc <_malloc_r>
 800b2de:	4604      	mov	r4, r0
 800b2e0:	b140      	cbz	r0, 800b2f4 <__sfmoreglue+0x28>
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	e9c0 1600 	strd	r1, r6, [r0]
 800b2e8:	300c      	adds	r0, #12
 800b2ea:	60a0      	str	r0, [r4, #8]
 800b2ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2f0:	f7fb fdea 	bl	8006ec8 <memset>
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	bd70      	pop	{r4, r5, r6, pc}

0800b2f8 <__sfp_lock_acquire>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__sfp_lock_acquire+0x8>)
 800b2fa:	f000 b8b3 	b.w	800b464 <__retarget_lock_acquire_recursive>
 800b2fe:	bf00      	nop
 800b300:	20000804 	.word	0x20000804

0800b304 <__sfp_lock_release>:
 800b304:	4801      	ldr	r0, [pc, #4]	; (800b30c <__sfp_lock_release+0x8>)
 800b306:	f000 b8ae 	b.w	800b466 <__retarget_lock_release_recursive>
 800b30a:	bf00      	nop
 800b30c:	20000804 	.word	0x20000804

0800b310 <__sinit_lock_acquire>:
 800b310:	4801      	ldr	r0, [pc, #4]	; (800b318 <__sinit_lock_acquire+0x8>)
 800b312:	f000 b8a7 	b.w	800b464 <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	200007ff 	.word	0x200007ff

0800b31c <__sinit_lock_release>:
 800b31c:	4801      	ldr	r0, [pc, #4]	; (800b324 <__sinit_lock_release+0x8>)
 800b31e:	f000 b8a2 	b.w	800b466 <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	200007ff 	.word	0x200007ff

0800b328 <__sinit>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	4604      	mov	r4, r0
 800b32c:	f7ff fff0 	bl	800b310 <__sinit_lock_acquire>
 800b330:	69a3      	ldr	r3, [r4, #24]
 800b332:	b11b      	cbz	r3, 800b33c <__sinit+0x14>
 800b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b338:	f7ff bff0 	b.w	800b31c <__sinit_lock_release>
 800b33c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b340:	6523      	str	r3, [r4, #80]	; 0x50
 800b342:	4b13      	ldr	r3, [pc, #76]	; (800b390 <__sinit+0x68>)
 800b344:	4a13      	ldr	r2, [pc, #76]	; (800b394 <__sinit+0x6c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	62a2      	str	r2, [r4, #40]	; 0x28
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	bf04      	itt	eq
 800b34e:	2301      	moveq	r3, #1
 800b350:	61a3      	streq	r3, [r4, #24]
 800b352:	4620      	mov	r0, r4
 800b354:	f000 f820 	bl	800b398 <__sfp>
 800b358:	6060      	str	r0, [r4, #4]
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 f81c 	bl	800b398 <__sfp>
 800b360:	60a0      	str	r0, [r4, #8]
 800b362:	4620      	mov	r0, r4
 800b364:	f000 f818 	bl	800b398 <__sfp>
 800b368:	2200      	movs	r2, #0
 800b36a:	60e0      	str	r0, [r4, #12]
 800b36c:	2104      	movs	r1, #4
 800b36e:	6860      	ldr	r0, [r4, #4]
 800b370:	f7ff ff82 	bl	800b278 <std>
 800b374:	68a0      	ldr	r0, [r4, #8]
 800b376:	2201      	movs	r2, #1
 800b378:	2109      	movs	r1, #9
 800b37a:	f7ff ff7d 	bl	800b278 <std>
 800b37e:	68e0      	ldr	r0, [r4, #12]
 800b380:	2202      	movs	r2, #2
 800b382:	2112      	movs	r1, #18
 800b384:	f7ff ff78 	bl	800b278 <std>
 800b388:	2301      	movs	r3, #1
 800b38a:	61a3      	str	r3, [r4, #24]
 800b38c:	e7d2      	b.n	800b334 <__sinit+0xc>
 800b38e:	bf00      	nop
 800b390:	0800bd80 	.word	0x0800bd80
 800b394:	0800b2c1 	.word	0x0800b2c1

0800b398 <__sfp>:
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39a:	4607      	mov	r7, r0
 800b39c:	f7ff ffac 	bl	800b2f8 <__sfp_lock_acquire>
 800b3a0:	4b1e      	ldr	r3, [pc, #120]	; (800b41c <__sfp+0x84>)
 800b3a2:	681e      	ldr	r6, [r3, #0]
 800b3a4:	69b3      	ldr	r3, [r6, #24]
 800b3a6:	b913      	cbnz	r3, 800b3ae <__sfp+0x16>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7ff ffbd 	bl	800b328 <__sinit>
 800b3ae:	3648      	adds	r6, #72	; 0x48
 800b3b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	d503      	bpl.n	800b3c0 <__sfp+0x28>
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	b30b      	cbz	r3, 800b400 <__sfp+0x68>
 800b3bc:	6836      	ldr	r6, [r6, #0]
 800b3be:	e7f7      	b.n	800b3b0 <__sfp+0x18>
 800b3c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3c4:	b9d5      	cbnz	r5, 800b3fc <__sfp+0x64>
 800b3c6:	4b16      	ldr	r3, [pc, #88]	; (800b420 <__sfp+0x88>)
 800b3c8:	60e3      	str	r3, [r4, #12]
 800b3ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3ce:	6665      	str	r5, [r4, #100]	; 0x64
 800b3d0:	f000 f847 	bl	800b462 <__retarget_lock_init_recursive>
 800b3d4:	f7ff ff96 	bl	800b304 <__sfp_lock_release>
 800b3d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3e0:	6025      	str	r5, [r4, #0]
 800b3e2:	61a5      	str	r5, [r4, #24]
 800b3e4:	2208      	movs	r2, #8
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3ec:	f7fb fd6c 	bl	8006ec8 <memset>
 800b3f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fc:	3468      	adds	r4, #104	; 0x68
 800b3fe:	e7d9      	b.n	800b3b4 <__sfp+0x1c>
 800b400:	2104      	movs	r1, #4
 800b402:	4638      	mov	r0, r7
 800b404:	f7ff ff62 	bl	800b2cc <__sfmoreglue>
 800b408:	4604      	mov	r4, r0
 800b40a:	6030      	str	r0, [r6, #0]
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d1d5      	bne.n	800b3bc <__sfp+0x24>
 800b410:	f7ff ff78 	bl	800b304 <__sfp_lock_release>
 800b414:	230c      	movs	r3, #12
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	e7ee      	b.n	800b3f8 <__sfp+0x60>
 800b41a:	bf00      	nop
 800b41c:	0800bd80 	.word	0x0800bd80
 800b420:	ffff0001 	.word	0xffff0001

0800b424 <_fwalk_reent>:
 800b424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b428:	4606      	mov	r6, r0
 800b42a:	4688      	mov	r8, r1
 800b42c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b430:	2700      	movs	r7, #0
 800b432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b436:	f1b9 0901 	subs.w	r9, r9, #1
 800b43a:	d505      	bpl.n	800b448 <_fwalk_reent+0x24>
 800b43c:	6824      	ldr	r4, [r4, #0]
 800b43e:	2c00      	cmp	r4, #0
 800b440:	d1f7      	bne.n	800b432 <_fwalk_reent+0xe>
 800b442:	4638      	mov	r0, r7
 800b444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b448:	89ab      	ldrh	r3, [r5, #12]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d907      	bls.n	800b45e <_fwalk_reent+0x3a>
 800b44e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b452:	3301      	adds	r3, #1
 800b454:	d003      	beq.n	800b45e <_fwalk_reent+0x3a>
 800b456:	4629      	mov	r1, r5
 800b458:	4630      	mov	r0, r6
 800b45a:	47c0      	blx	r8
 800b45c:	4307      	orrs	r7, r0
 800b45e:	3568      	adds	r5, #104	; 0x68
 800b460:	e7e9      	b.n	800b436 <_fwalk_reent+0x12>

0800b462 <__retarget_lock_init_recursive>:
 800b462:	4770      	bx	lr

0800b464 <__retarget_lock_acquire_recursive>:
 800b464:	4770      	bx	lr

0800b466 <__retarget_lock_release_recursive>:
 800b466:	4770      	bx	lr

0800b468 <__swhatbuf_r>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	460e      	mov	r6, r1
 800b46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b470:	2900      	cmp	r1, #0
 800b472:	b096      	sub	sp, #88	; 0x58
 800b474:	4614      	mov	r4, r2
 800b476:	461d      	mov	r5, r3
 800b478:	da07      	bge.n	800b48a <__swhatbuf_r+0x22>
 800b47a:	2300      	movs	r3, #0
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	89b3      	ldrh	r3, [r6, #12]
 800b480:	061a      	lsls	r2, r3, #24
 800b482:	d410      	bmi.n	800b4a6 <__swhatbuf_r+0x3e>
 800b484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b488:	e00e      	b.n	800b4a8 <__swhatbuf_r+0x40>
 800b48a:	466a      	mov	r2, sp
 800b48c:	f000 f902 	bl	800b694 <_fstat_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	dbf2      	blt.n	800b47a <__swhatbuf_r+0x12>
 800b494:	9a01      	ldr	r2, [sp, #4]
 800b496:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b49a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b49e:	425a      	negs	r2, r3
 800b4a0:	415a      	adcs	r2, r3
 800b4a2:	602a      	str	r2, [r5, #0]
 800b4a4:	e7ee      	b.n	800b484 <__swhatbuf_r+0x1c>
 800b4a6:	2340      	movs	r3, #64	; 0x40
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	6023      	str	r3, [r4, #0]
 800b4ac:	b016      	add	sp, #88	; 0x58
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}

0800b4b0 <__smakebuf_r>:
 800b4b0:	898b      	ldrh	r3, [r1, #12]
 800b4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4b4:	079d      	lsls	r5, r3, #30
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	d507      	bpl.n	800b4cc <__smakebuf_r+0x1c>
 800b4bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	6123      	str	r3, [r4, #16]
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	6163      	str	r3, [r4, #20]
 800b4c8:	b002      	add	sp, #8
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	ab01      	add	r3, sp, #4
 800b4ce:	466a      	mov	r2, sp
 800b4d0:	f7ff ffca 	bl	800b468 <__swhatbuf_r>
 800b4d4:	9900      	ldr	r1, [sp, #0]
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7ff f97f 	bl	800a7dc <_malloc_r>
 800b4de:	b948      	cbnz	r0, 800b4f4 <__smakebuf_r+0x44>
 800b4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e4:	059a      	lsls	r2, r3, #22
 800b4e6:	d4ef      	bmi.n	800b4c8 <__smakebuf_r+0x18>
 800b4e8:	f023 0303 	bic.w	r3, r3, #3
 800b4ec:	f043 0302 	orr.w	r3, r3, #2
 800b4f0:	81a3      	strh	r3, [r4, #12]
 800b4f2:	e7e3      	b.n	800b4bc <__smakebuf_r+0xc>
 800b4f4:	4b0d      	ldr	r3, [pc, #52]	; (800b52c <__smakebuf_r+0x7c>)
 800b4f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	6020      	str	r0, [r4, #0]
 800b4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b500:	81a3      	strh	r3, [r4, #12]
 800b502:	9b00      	ldr	r3, [sp, #0]
 800b504:	6163      	str	r3, [r4, #20]
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	6120      	str	r0, [r4, #16]
 800b50a:	b15b      	cbz	r3, 800b524 <__smakebuf_r+0x74>
 800b50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b510:	4630      	mov	r0, r6
 800b512:	f000 f8d1 	bl	800b6b8 <_isatty_r>
 800b516:	b128      	cbz	r0, 800b524 <__smakebuf_r+0x74>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	f023 0303 	bic.w	r3, r3, #3
 800b51e:	f043 0301 	orr.w	r3, r3, #1
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	89a0      	ldrh	r0, [r4, #12]
 800b526:	4305      	orrs	r5, r0
 800b528:	81a5      	strh	r5, [r4, #12]
 800b52a:	e7cd      	b.n	800b4c8 <__smakebuf_r+0x18>
 800b52c:	0800b2c1 	.word	0x0800b2c1

0800b530 <_malloc_usable_size_r>:
 800b530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b534:	1f18      	subs	r0, r3, #4
 800b536:	2b00      	cmp	r3, #0
 800b538:	bfbc      	itt	lt
 800b53a:	580b      	ldrlt	r3, [r1, r0]
 800b53c:	18c0      	addlt	r0, r0, r3
 800b53e:	4770      	bx	lr

0800b540 <_raise_r>:
 800b540:	291f      	cmp	r1, #31
 800b542:	b538      	push	{r3, r4, r5, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	460d      	mov	r5, r1
 800b548:	d904      	bls.n	800b554 <_raise_r+0x14>
 800b54a:	2316      	movs	r3, #22
 800b54c:	6003      	str	r3, [r0, #0]
 800b54e:	f04f 30ff 	mov.w	r0, #4294967295
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b556:	b112      	cbz	r2, 800b55e <_raise_r+0x1e>
 800b558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b55c:	b94b      	cbnz	r3, 800b572 <_raise_r+0x32>
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 f830 	bl	800b5c4 <_getpid_r>
 800b564:	462a      	mov	r2, r5
 800b566:	4601      	mov	r1, r0
 800b568:	4620      	mov	r0, r4
 800b56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b56e:	f000 b817 	b.w	800b5a0 <_kill_r>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d00a      	beq.n	800b58c <_raise_r+0x4c>
 800b576:	1c59      	adds	r1, r3, #1
 800b578:	d103      	bne.n	800b582 <_raise_r+0x42>
 800b57a:	2316      	movs	r3, #22
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	2001      	movs	r0, #1
 800b580:	e7e7      	b.n	800b552 <_raise_r+0x12>
 800b582:	2400      	movs	r4, #0
 800b584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b588:	4628      	mov	r0, r5
 800b58a:	4798      	blx	r3
 800b58c:	2000      	movs	r0, #0
 800b58e:	e7e0      	b.n	800b552 <_raise_r+0x12>

0800b590 <raise>:
 800b590:	4b02      	ldr	r3, [pc, #8]	; (800b59c <raise+0xc>)
 800b592:	4601      	mov	r1, r0
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f7ff bfd3 	b.w	800b540 <_raise_r>
 800b59a:	bf00      	nop
 800b59c:	20000010 	.word	0x20000010

0800b5a0 <_kill_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d07      	ldr	r5, [pc, #28]	; (800b5c0 <_kill_r+0x20>)
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	f7f6 fee3 	bl	8002378 <_kill>
 800b5b2:	1c43      	adds	r3, r0, #1
 800b5b4:	d102      	bne.n	800b5bc <_kill_r+0x1c>
 800b5b6:	682b      	ldr	r3, [r5, #0]
 800b5b8:	b103      	cbz	r3, 800b5bc <_kill_r+0x1c>
 800b5ba:	6023      	str	r3, [r4, #0]
 800b5bc:	bd38      	pop	{r3, r4, r5, pc}
 800b5be:	bf00      	nop
 800b5c0:	200007f8 	.word	0x200007f8

0800b5c4 <_getpid_r>:
 800b5c4:	f7f6 bed0 	b.w	8002368 <_getpid>

0800b5c8 <__sread>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d0:	f000 f894 	bl	800b6fc <_read_r>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	bfab      	itete	ge
 800b5d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5da:	89a3      	ldrhlt	r3, [r4, #12]
 800b5dc:	181b      	addge	r3, r3, r0
 800b5de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5e2:	bfac      	ite	ge
 800b5e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5e6:	81a3      	strhlt	r3, [r4, #12]
 800b5e8:	bd10      	pop	{r4, pc}

0800b5ea <__swrite>:
 800b5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ee:	461f      	mov	r7, r3
 800b5f0:	898b      	ldrh	r3, [r1, #12]
 800b5f2:	05db      	lsls	r3, r3, #23
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	d505      	bpl.n	800b608 <__swrite+0x1e>
 800b5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b600:	2302      	movs	r3, #2
 800b602:	2200      	movs	r2, #0
 800b604:	f000 f868 	bl	800b6d8 <_lseek_r>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b60e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	4632      	mov	r2, r6
 800b616:	463b      	mov	r3, r7
 800b618:	4628      	mov	r0, r5
 800b61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b61e:	f000 b817 	b.w	800b650 <_write_r>

0800b622 <__sseek>:
 800b622:	b510      	push	{r4, lr}
 800b624:	460c      	mov	r4, r1
 800b626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62a:	f000 f855 	bl	800b6d8 <_lseek_r>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	bf15      	itete	ne
 800b634:	6560      	strne	r0, [r4, #84]	; 0x54
 800b636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b63a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b63e:	81a3      	strheq	r3, [r4, #12]
 800b640:	bf18      	it	ne
 800b642:	81a3      	strhne	r3, [r4, #12]
 800b644:	bd10      	pop	{r4, pc}

0800b646 <__sclose>:
 800b646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64a:	f000 b813 	b.w	800b674 <_close_r>
	...

0800b650 <_write_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	; (800b670 <_write_r+0x20>)
 800b654:	4604      	mov	r4, r0
 800b656:	4608      	mov	r0, r1
 800b658:	4611      	mov	r1, r2
 800b65a:	2200      	movs	r2, #0
 800b65c:	602a      	str	r2, [r5, #0]
 800b65e:	461a      	mov	r2, r3
 800b660:	f7f6 fec1 	bl	80023e6 <_write>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	d102      	bne.n	800b66e <_write_r+0x1e>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	b103      	cbz	r3, 800b66e <_write_r+0x1e>
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	200007f8 	.word	0x200007f8

0800b674 <_close_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d06      	ldr	r5, [pc, #24]	; (800b690 <_close_r+0x1c>)
 800b678:	2300      	movs	r3, #0
 800b67a:	4604      	mov	r4, r0
 800b67c:	4608      	mov	r0, r1
 800b67e:	602b      	str	r3, [r5, #0]
 800b680:	f7f6 fecd 	bl	800241e <_close>
 800b684:	1c43      	adds	r3, r0, #1
 800b686:	d102      	bne.n	800b68e <_close_r+0x1a>
 800b688:	682b      	ldr	r3, [r5, #0]
 800b68a:	b103      	cbz	r3, 800b68e <_close_r+0x1a>
 800b68c:	6023      	str	r3, [r4, #0]
 800b68e:	bd38      	pop	{r3, r4, r5, pc}
 800b690:	200007f8 	.word	0x200007f8

0800b694 <_fstat_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d07      	ldr	r5, [pc, #28]	; (800b6b4 <_fstat_r+0x20>)
 800b698:	2300      	movs	r3, #0
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	4611      	mov	r1, r2
 800b6a0:	602b      	str	r3, [r5, #0]
 800b6a2:	f7f6 fec8 	bl	8002436 <_fstat>
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	d102      	bne.n	800b6b0 <_fstat_r+0x1c>
 800b6aa:	682b      	ldr	r3, [r5, #0]
 800b6ac:	b103      	cbz	r3, 800b6b0 <_fstat_r+0x1c>
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	bd38      	pop	{r3, r4, r5, pc}
 800b6b2:	bf00      	nop
 800b6b4:	200007f8 	.word	0x200007f8

0800b6b8 <_isatty_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d06      	ldr	r5, [pc, #24]	; (800b6d4 <_isatty_r+0x1c>)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	602b      	str	r3, [r5, #0]
 800b6c4:	f7f6 fec7 	bl	8002456 <_isatty>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_isatty_r+0x1a>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_isatty_r+0x1a>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	200007f8 	.word	0x200007f8

0800b6d8 <_lseek_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d07      	ldr	r5, [pc, #28]	; (800b6f8 <_lseek_r+0x20>)
 800b6dc:	4604      	mov	r4, r0
 800b6de:	4608      	mov	r0, r1
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	602a      	str	r2, [r5, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f7f6 fec0 	bl	800246c <_lseek>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_lseek_r+0x1e>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_lseek_r+0x1e>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	200007f8 	.word	0x200007f8

0800b6fc <_read_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_read_r+0x20>)
 800b700:	4604      	mov	r4, r0
 800b702:	4608      	mov	r0, r1
 800b704:	4611      	mov	r1, r2
 800b706:	2200      	movs	r2, #0
 800b708:	602a      	str	r2, [r5, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7f6 fe4e 	bl	80023ac <_read>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_read_r+0x1e>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_read_r+0x1e>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	200007f8 	.word	0x200007f8

0800b720 <_init>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	bf00      	nop
 800b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b726:	bc08      	pop	{r3}
 800b728:	469e      	mov	lr, r3
 800b72a:	4770      	bx	lr

0800b72c <_fini>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	bf00      	nop
 800b730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b732:	bc08      	pop	{r3}
 800b734:	469e      	mov	lr, r3
 800b736:	4770      	bx	lr
